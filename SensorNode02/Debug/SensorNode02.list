
SensorNode02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006018  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08006128  08006128  00016128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061b8  080061b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080061b8  080061b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061b8  080061b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061b8  080061b8  000161b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061bc  080061bc  000161bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080061c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000000c  080061cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  080061cc  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e59d  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027ec  00000000  00000000  0002e615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc0  00000000  00000000  00030e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c24  00000000  00000000  00031dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018571  00000000  00000000  000329ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011620  00000000  00000000  0004af5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008da56  00000000  00000000  0005c57d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004328  00000000  00000000  000e9fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000ee2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800610c 	.word	0x0800610c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800610c 	.word	0x0800610c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_frsub>:
 8000938:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800093c:	e002      	b.n	8000944 <__addsf3>
 800093e:	bf00      	nop

08000940 <__aeabi_fsub>:
 8000940:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000944 <__addsf3>:
 8000944:	0042      	lsls	r2, r0, #1
 8000946:	bf1f      	itttt	ne
 8000948:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800094c:	ea92 0f03 	teqne	r2, r3
 8000950:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000954:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000958:	d06a      	beq.n	8000a30 <__addsf3+0xec>
 800095a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800095e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000962:	bfc1      	itttt	gt
 8000964:	18d2      	addgt	r2, r2, r3
 8000966:	4041      	eorgt	r1, r0
 8000968:	4048      	eorgt	r0, r1
 800096a:	4041      	eorgt	r1, r0
 800096c:	bfb8      	it	lt
 800096e:	425b      	neglt	r3, r3
 8000970:	2b19      	cmp	r3, #25
 8000972:	bf88      	it	hi
 8000974:	4770      	bxhi	lr
 8000976:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800097a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800097e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000982:	bf18      	it	ne
 8000984:	4240      	negne	r0, r0
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800098e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000992:	bf18      	it	ne
 8000994:	4249      	negne	r1, r1
 8000996:	ea92 0f03 	teq	r2, r3
 800099a:	d03f      	beq.n	8000a1c <__addsf3+0xd8>
 800099c:	f1a2 0201 	sub.w	r2, r2, #1
 80009a0:	fa41 fc03 	asr.w	ip, r1, r3
 80009a4:	eb10 000c 	adds.w	r0, r0, ip
 80009a8:	f1c3 0320 	rsb	r3, r3, #32
 80009ac:	fa01 f103 	lsl.w	r1, r1, r3
 80009b0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009b4:	d502      	bpl.n	80009bc <__addsf3+0x78>
 80009b6:	4249      	negs	r1, r1
 80009b8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009c0:	d313      	bcc.n	80009ea <__addsf3+0xa6>
 80009c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009c6:	d306      	bcc.n	80009d6 <__addsf3+0x92>
 80009c8:	0840      	lsrs	r0, r0, #1
 80009ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80009ce:	f102 0201 	add.w	r2, r2, #1
 80009d2:	2afe      	cmp	r2, #254	; 0xfe
 80009d4:	d251      	bcs.n	8000a7a <__addsf3+0x136>
 80009d6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009de:	bf08      	it	eq
 80009e0:	f020 0001 	biceq.w	r0, r0, #1
 80009e4:	ea40 0003 	orr.w	r0, r0, r3
 80009e8:	4770      	bx	lr
 80009ea:	0049      	lsls	r1, r1, #1
 80009ec:	eb40 0000 	adc.w	r0, r0, r0
 80009f0:	3a01      	subs	r2, #1
 80009f2:	bf28      	it	cs
 80009f4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009f8:	d2ed      	bcs.n	80009d6 <__addsf3+0x92>
 80009fa:	fab0 fc80 	clz	ip, r0
 80009fe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a02:	ebb2 020c 	subs.w	r2, r2, ip
 8000a06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a0a:	bfaa      	itet	ge
 8000a0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a10:	4252      	neglt	r2, r2
 8000a12:	4318      	orrge	r0, r3
 8000a14:	bfbc      	itt	lt
 8000a16:	40d0      	lsrlt	r0, r2
 8000a18:	4318      	orrlt	r0, r3
 8000a1a:	4770      	bx	lr
 8000a1c:	f092 0f00 	teq	r2, #0
 8000a20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a24:	bf06      	itte	eq
 8000a26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a2a:	3201      	addeq	r2, #1
 8000a2c:	3b01      	subne	r3, #1
 8000a2e:	e7b5      	b.n	800099c <__addsf3+0x58>
 8000a30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3e:	d021      	beq.n	8000a84 <__addsf3+0x140>
 8000a40:	ea92 0f03 	teq	r2, r3
 8000a44:	d004      	beq.n	8000a50 <__addsf3+0x10c>
 8000a46:	f092 0f00 	teq	r2, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	4608      	moveq	r0, r1
 8000a4e:	4770      	bx	lr
 8000a50:	ea90 0f01 	teq	r0, r1
 8000a54:	bf1c      	itt	ne
 8000a56:	2000      	movne	r0, #0
 8000a58:	4770      	bxne	lr
 8000a5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a5e:	d104      	bne.n	8000a6a <__addsf3+0x126>
 8000a60:	0040      	lsls	r0, r0, #1
 8000a62:	bf28      	it	cs
 8000a64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a68:	4770      	bx	lr
 8000a6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a6e:	bf3c      	itt	cc
 8000a70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a74:	4770      	bxcc	lr
 8000a76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a82:	4770      	bx	lr
 8000a84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a88:	bf16      	itet	ne
 8000a8a:	4608      	movne	r0, r1
 8000a8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a90:	4601      	movne	r1, r0
 8000a92:	0242      	lsls	r2, r0, #9
 8000a94:	bf06      	itte	eq
 8000a96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a9a:	ea90 0f01 	teqeq	r0, r1
 8000a9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aa2:	4770      	bx	lr

08000aa4 <__aeabi_ui2f>:
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	e004      	b.n	8000ab4 <__aeabi_i2f+0x8>
 8000aaa:	bf00      	nop

08000aac <__aeabi_i2f>:
 8000aac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ab0:	bf48      	it	mi
 8000ab2:	4240      	negmi	r0, r0
 8000ab4:	ea5f 0c00 	movs.w	ip, r0
 8000ab8:	bf08      	it	eq
 8000aba:	4770      	bxeq	lr
 8000abc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ac0:	4601      	mov	r1, r0
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	e01c      	b.n	8000b02 <__aeabi_l2f+0x2a>

08000ac8 <__aeabi_ul2f>:
 8000ac8:	ea50 0201 	orrs.w	r2, r0, r1
 8000acc:	bf08      	it	eq
 8000ace:	4770      	bxeq	lr
 8000ad0:	f04f 0300 	mov.w	r3, #0
 8000ad4:	e00a      	b.n	8000aec <__aeabi_l2f+0x14>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_l2f>:
 8000ad8:	ea50 0201 	orrs.w	r2, r0, r1
 8000adc:	bf08      	it	eq
 8000ade:	4770      	bxeq	lr
 8000ae0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ae4:	d502      	bpl.n	8000aec <__aeabi_l2f+0x14>
 8000ae6:	4240      	negs	r0, r0
 8000ae8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aec:	ea5f 0c01 	movs.w	ip, r1
 8000af0:	bf02      	ittt	eq
 8000af2:	4684      	moveq	ip, r0
 8000af4:	4601      	moveq	r1, r0
 8000af6:	2000      	moveq	r0, #0
 8000af8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000afc:	bf08      	it	eq
 8000afe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b06:	fabc f28c 	clz	r2, ip
 8000b0a:	3a08      	subs	r2, #8
 8000b0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b10:	db10      	blt.n	8000b34 <__aeabi_l2f+0x5c>
 8000b12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b16:	4463      	add	r3, ip
 8000b18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b1c:	f1c2 0220 	rsb	r2, r2, #32
 8000b20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b24:	fa20 f202 	lsr.w	r2, r0, r2
 8000b28:	eb43 0002 	adc.w	r0, r3, r2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f102 0220 	add.w	r2, r2, #32
 8000b38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b3c:	f1c2 0220 	rsb	r2, r2, #32
 8000b40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b44:	fa21 f202 	lsr.w	r2, r1, r2
 8000b48:	eb43 0002 	adc.w	r0, r3, r2
 8000b4c:	bf08      	it	eq
 8000b4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_fmul>:
 8000b54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b62:	ea92 0f0c 	teqne	r2, ip
 8000b66:	ea93 0f0c 	teqne	r3, ip
 8000b6a:	d06f      	beq.n	8000c4c <__aeabi_fmul+0xf8>
 8000b6c:	441a      	add	r2, r3
 8000b6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000b72:	0240      	lsls	r0, r0, #9
 8000b74:	bf18      	it	ne
 8000b76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b7a:	d01e      	beq.n	8000bba <__aeabi_fmul+0x66>
 8000b7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b88:	fba0 3101 	umull	r3, r1, r0, r1
 8000b8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b90:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b94:	bf3e      	ittt	cc
 8000b96:	0049      	lslcc	r1, r1, #1
 8000b98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b9c:	005b      	lslcc	r3, r3, #1
 8000b9e:	ea40 0001 	orr.w	r0, r0, r1
 8000ba2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ba6:	2afd      	cmp	r2, #253	; 0xfd
 8000ba8:	d81d      	bhi.n	8000be6 <__aeabi_fmul+0x92>
 8000baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bb2:	bf08      	it	eq
 8000bb4:	f020 0001 	biceq.w	r0, r0, #1
 8000bb8:	4770      	bx	lr
 8000bba:	f090 0f00 	teq	r0, #0
 8000bbe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bc2:	bf08      	it	eq
 8000bc4:	0249      	lsleq	r1, r1, #9
 8000bc6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bce:	3a7f      	subs	r2, #127	; 0x7f
 8000bd0:	bfc2      	ittt	gt
 8000bd2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bd6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bda:	4770      	bxgt	lr
 8000bdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be0:	f04f 0300 	mov.w	r3, #0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	dc5d      	bgt.n	8000ca4 <__aeabi_fmul+0x150>
 8000be8:	f112 0f19 	cmn.w	r2, #25
 8000bec:	bfdc      	itt	le
 8000bee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bf2:	4770      	bxle	lr
 8000bf4:	f1c2 0200 	rsb	r2, r2, #0
 8000bf8:	0041      	lsls	r1, r0, #1
 8000bfa:	fa21 f102 	lsr.w	r1, r1, r2
 8000bfe:	f1c2 0220 	rsb	r2, r2, #32
 8000c02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c0a:	f140 0000 	adc.w	r0, r0, #0
 8000c0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c12:	bf08      	it	eq
 8000c14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c18:	4770      	bx	lr
 8000c1a:	f092 0f00 	teq	r2, #0
 8000c1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c22:	bf02      	ittt	eq
 8000c24:	0040      	lsleq	r0, r0, #1
 8000c26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c2a:	3a01      	subeq	r2, #1
 8000c2c:	d0f9      	beq.n	8000c22 <__aeabi_fmul+0xce>
 8000c2e:	ea40 000c 	orr.w	r0, r0, ip
 8000c32:	f093 0f00 	teq	r3, #0
 8000c36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c3a:	bf02      	ittt	eq
 8000c3c:	0049      	lsleq	r1, r1, #1
 8000c3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c42:	3b01      	subeq	r3, #1
 8000c44:	d0f9      	beq.n	8000c3a <__aeabi_fmul+0xe6>
 8000c46:	ea41 010c 	orr.w	r1, r1, ip
 8000c4a:	e78f      	b.n	8000b6c <__aeabi_fmul+0x18>
 8000c4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c50:	ea92 0f0c 	teq	r2, ip
 8000c54:	bf18      	it	ne
 8000c56:	ea93 0f0c 	teqne	r3, ip
 8000c5a:	d00a      	beq.n	8000c72 <__aeabi_fmul+0x11e>
 8000c5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c60:	bf18      	it	ne
 8000c62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c66:	d1d8      	bne.n	8000c1a <__aeabi_fmul+0xc6>
 8000c68:	ea80 0001 	eor.w	r0, r0, r1
 8000c6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c70:	4770      	bx	lr
 8000c72:	f090 0f00 	teq	r0, #0
 8000c76:	bf17      	itett	ne
 8000c78:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	f091 0f00 	teqne	r1, #0
 8000c82:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c86:	d014      	beq.n	8000cb2 <__aeabi_fmul+0x15e>
 8000c88:	ea92 0f0c 	teq	r2, ip
 8000c8c:	d101      	bne.n	8000c92 <__aeabi_fmul+0x13e>
 8000c8e:	0242      	lsls	r2, r0, #9
 8000c90:	d10f      	bne.n	8000cb2 <__aeabi_fmul+0x15e>
 8000c92:	ea93 0f0c 	teq	r3, ip
 8000c96:	d103      	bne.n	8000ca0 <__aeabi_fmul+0x14c>
 8000c98:	024b      	lsls	r3, r1, #9
 8000c9a:	bf18      	it	ne
 8000c9c:	4608      	movne	r0, r1
 8000c9e:	d108      	bne.n	8000cb2 <__aeabi_fmul+0x15e>
 8000ca0:	ea80 0001 	eor.w	r0, r0, r1
 8000ca4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ca8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb0:	4770      	bx	lr
 8000cb2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_fdiv>:
 8000cbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc4:	bf1e      	ittt	ne
 8000cc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cca:	ea92 0f0c 	teqne	r2, ip
 8000cce:	ea93 0f0c 	teqne	r3, ip
 8000cd2:	d069      	beq.n	8000da8 <__aeabi_fdiv+0xec>
 8000cd4:	eba2 0203 	sub.w	r2, r2, r3
 8000cd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000cdc:	0249      	lsls	r1, r1, #9
 8000cde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ce2:	d037      	beq.n	8000d54 <__aeabi_fdiv+0x98>
 8000ce4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ce8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	bf38      	it	cc
 8000cf8:	005b      	lslcc	r3, r3, #1
 8000cfa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cfe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d02:	428b      	cmp	r3, r1
 8000d04:	bf24      	itt	cs
 8000d06:	1a5b      	subcs	r3, r3, r1
 8000d08:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d0c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d10:	bf24      	itt	cs
 8000d12:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d16:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d1a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d1e:	bf24      	itt	cs
 8000d20:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d28:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d2c:	bf24      	itt	cs
 8000d2e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d32:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	bf18      	it	ne
 8000d3a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d3e:	d1e0      	bne.n	8000d02 <__aeabi_fdiv+0x46>
 8000d40:	2afd      	cmp	r2, #253	; 0xfd
 8000d42:	f63f af50 	bhi.w	8000be6 <__aeabi_fmul+0x92>
 8000d46:	428b      	cmp	r3, r1
 8000d48:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d58:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5c:	327f      	adds	r2, #127	; 0x7f
 8000d5e:	bfc2      	ittt	gt
 8000d60:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d64:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d68:	4770      	bxgt	lr
 8000d6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d6e:	f04f 0300 	mov.w	r3, #0
 8000d72:	3a01      	subs	r2, #1
 8000d74:	e737      	b.n	8000be6 <__aeabi_fmul+0x92>
 8000d76:	f092 0f00 	teq	r2, #0
 8000d7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d7e:	bf02      	ittt	eq
 8000d80:	0040      	lsleq	r0, r0, #1
 8000d82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d86:	3a01      	subeq	r2, #1
 8000d88:	d0f9      	beq.n	8000d7e <__aeabi_fdiv+0xc2>
 8000d8a:	ea40 000c 	orr.w	r0, r0, ip
 8000d8e:	f093 0f00 	teq	r3, #0
 8000d92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0049      	lsleq	r1, r1, #1
 8000d9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d9e:	3b01      	subeq	r3, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fdiv+0xda>
 8000da2:	ea41 010c 	orr.w	r1, r1, ip
 8000da6:	e795      	b.n	8000cd4 <__aeabi_fdiv+0x18>
 8000da8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dac:	ea92 0f0c 	teq	r2, ip
 8000db0:	d108      	bne.n	8000dc4 <__aeabi_fdiv+0x108>
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	f47f af7d 	bne.w	8000cb2 <__aeabi_fmul+0x15e>
 8000db8:	ea93 0f0c 	teq	r3, ip
 8000dbc:	f47f af70 	bne.w	8000ca0 <__aeabi_fmul+0x14c>
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	e776      	b.n	8000cb2 <__aeabi_fmul+0x15e>
 8000dc4:	ea93 0f0c 	teq	r3, ip
 8000dc8:	d104      	bne.n	8000dd4 <__aeabi_fdiv+0x118>
 8000dca:	024b      	lsls	r3, r1, #9
 8000dcc:	f43f af4c 	beq.w	8000c68 <__aeabi_fmul+0x114>
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	e76e      	b.n	8000cb2 <__aeabi_fmul+0x15e>
 8000dd4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dd8:	bf18      	it	ne
 8000dda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dde:	d1ca      	bne.n	8000d76 <__aeabi_fdiv+0xba>
 8000de0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000de4:	f47f af5c 	bne.w	8000ca0 <__aeabi_fmul+0x14c>
 8000de8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	f47f af3c 	bne.w	8000c68 <__aeabi_fmul+0x114>
 8000df0:	e75f      	b.n	8000cb2 <__aeabi_fmul+0x15e>
 8000df2:	bf00      	nop

08000df4 <__aeabi_f2uiz>:
 8000df4:	0042      	lsls	r2, r0, #1
 8000df6:	d20e      	bcs.n	8000e16 <__aeabi_f2uiz+0x22>
 8000df8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000dfc:	d30b      	bcc.n	8000e16 <__aeabi_f2uiz+0x22>
 8000dfe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e02:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e06:	d409      	bmi.n	8000e1c <__aeabi_f2uiz+0x28>
 8000e08:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e10:	fa23 f002 	lsr.w	r0, r3, r2
 8000e14:	4770      	bx	lr
 8000e16:	f04f 0000 	mov.w	r0, #0
 8000e1a:	4770      	bx	lr
 8000e1c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e20:	d101      	bne.n	8000e26 <__aeabi_f2uiz+0x32>
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	d102      	bne.n	8000e2c <__aeabi_f2uiz+0x38>
 8000e26:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2a:	4770      	bx	lr
 8000e2c:	f04f 0000 	mov.w	r0, #0
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop

08000e34 <DS18B20_Start>:


extern TIM_HandleTypeDef htim1;

uint8_t DS18B20_Start(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 8000e3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e42:	4815      	ldr	r0, [pc, #84]	; (8000e98 <DS18B20_Start+0x64>)
 8000e44:	f000 f8d4 	bl	8000ff0 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e4e:	4812      	ldr	r0, [pc, #72]	; (8000e98 <DS18B20_Start+0x64>)
 8000e50:	f002 fcc5 	bl	80037de <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 8000e54:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000e58:	f000 f8b2 	bl	8000fc0 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8000e5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <DS18B20_Start+0x64>)
 8000e62:	f000 f8e2 	bl	800102a <Set_Pin_Input>
    delay (80);    // delay according to datasheet
 8000e66:	2050      	movs	r0, #80	; 0x50
 8000e68:	f000 f8aa 	bl	8000fc0 <delay>
    if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8000e6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e70:	4809      	ldr	r0, [pc, #36]	; (8000e98 <DS18B20_Start+0x64>)
 8000e72:	f002 fc9d 	bl	80037b0 <HAL_GPIO_ReadPin>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <DS18B20_Start+0x4e>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	e001      	b.n	8000e86 <DS18B20_Start+0x52>
    else Response = -1;
 8000e82:	23ff      	movs	r3, #255	; 0xff
 8000e84:	71fb      	strb	r3, [r7, #7]

    delay (400); // 480 us delay totally.
 8000e86:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000e8a:	f000 f899 	bl	8000fc0 <delay>

    return Response;
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40010c00 	.word	0x40010c00

08000e9c <DS18B20_Write>:

void DS18B20_Write(uint8_t data)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // Set as output
 8000ea6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eaa:	4821      	ldr	r0, [pc, #132]	; (8000f30 <DS18B20_Write+0x94>)
 8000eac:	f000 f8a0 	bl	8000ff0 <Set_Pin_Output>

	for (int i = 0; i < 8; i++)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	e034      	b.n	8000f20 <DS18B20_Write+0x84>
	{
		if ((data & (1 << i)) != 0)  // Nếu bit = 1
 8000eb6:	79fa      	ldrb	r2, [r7, #7]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	fa42 f303 	asr.w	r3, r2, r3
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d016      	beq.n	8000ef4 <DS18B20_Write+0x58>
		{
			// Write 1
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8000ec6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eca:	4819      	ldr	r0, [pc, #100]	; (8000f30 <DS18B20_Write+0x94>)
 8000ecc:	f000 f890 	bl	8000ff0 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);  // Kéo xuống LOW
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed6:	4816      	ldr	r0, [pc, #88]	; (8000f30 <DS18B20_Write+0x94>)
 8000ed8:	f002 fc81 	bl	80037de <HAL_GPIO_WritePin>
			delay(1);
 8000edc:	2001      	movs	r0, #1
 8000ede:	f000 f86f 	bl	8000fc0 <delay>
			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // Nhả chân (Input để pull-up)
 8000ee2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee6:	4812      	ldr	r0, [pc, #72]	; (8000f30 <DS18B20_Write+0x94>)
 8000ee8:	f000 f89f 	bl	800102a <Set_Pin_Input>
			delay(50);  // Đợi đủ 60µs
 8000eec:	2032      	movs	r0, #50	; 0x32
 8000eee:	f000 f867 	bl	8000fc0 <delay>
 8000ef2:	e012      	b.n	8000f1a <DS18B20_Write+0x7e>
		}
		else  // Nếu bit = 0
		{
			// Write 0
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8000ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef8:	480d      	ldr	r0, [pc, #52]	; (8000f30 <DS18B20_Write+0x94>)
 8000efa:	f000 f879 	bl	8000ff0 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);  // Giữ LOW
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f04:	480a      	ldr	r0, [pc, #40]	; (8000f30 <DS18B20_Write+0x94>)
 8000f06:	f002 fc6a 	bl	80037de <HAL_GPIO_WritePin>
			delay(50);  // Chờ đủ 60µs
 8000f0a:	2032      	movs	r0, #50	; 0x32
 8000f0c:	f000 f858 	bl	8000fc0 <delay>
			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // Nhả chân
 8000f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f14:	4806      	ldr	r0, [pc, #24]	; (8000f30 <DS18B20_Write+0x94>)
 8000f16:	f000 f888 	bl	800102a <Set_Pin_Input>
	for (int i = 0; i < 8; i++)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b07      	cmp	r3, #7
 8000f24:	ddc7      	ble.n	8000eb6 <DS18B20_Write+0x1a>
		}
	}
}
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40010c00 	.word	0x40010c00

08000f34 <DS18B20_Read>:


uint8_t DS18B20_Read (void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8000f3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f42:	481e      	ldr	r0, [pc, #120]	; (8000fbc <DS18B20_Read+0x88>)
 8000f44:	f000 f871 	bl	800102a <Set_Pin_Input>

	for (int i=0; i<8; i++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	e02d      	b.n	8000faa <DS18B20_Read+0x76>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // Set as output
 8000f4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f52:	481a      	ldr	r0, [pc, #104]	; (8000fbc <DS18B20_Read+0x88>)
 8000f54:	f000 f84c 	bl	8000ff0 <Set_Pin_Output>
		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);   // Pull data pin LOW
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f5e:	4817      	ldr	r0, [pc, #92]	; (8000fbc <DS18B20_Read+0x88>)
 8000f60:	f002 fc3d 	bl	80037de <HAL_GPIO_WritePin>
		delay (2);  // Chờ ít nhất 1µs
 8000f64:	2002      	movs	r0, #2
 8000f66:	f000 f82b 	bl	8000fc0 <delay>
		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);   // Thả chân, chuyển sang Input
 8000f6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f6e:	4813      	ldr	r0, [pc, #76]	; (8000fbc <DS18B20_Read+0x88>)
 8000f70:	f000 f85b 	bl	800102a <Set_Pin_Input>

		delay(15);
 8000f74:	200f      	movs	r0, #15
 8000f76:	f000 f823 	bl	8000fc0 <delay>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // Nếu chân ở mức HIGH
 8000f7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f7e:	480f      	ldr	r0, [pc, #60]	; (8000fbc <DS18B20_Read+0x88>)
 8000f80:	f002 fc16 	bl	80037b0 <HAL_GPIO_ReadPin>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d009      	beq.n	8000f9e <DS18B20_Read+0x6a>
		{
			value |= 1 << i;  // Ghi nhận bit = 1
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	b25a      	sxtb	r2, r3
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	71fb      	strb	r3, [r7, #7]
		}

		delay (45);  // Hoàn tất read slot (tổng 60µs)
 8000f9e:	202d      	movs	r0, #45	; 0x2d
 8000fa0:	f000 f80e 	bl	8000fc0 <delay>
	for (int i=0; i<8; i++)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	2b07      	cmp	r3, #7
 8000fae:	ddce      	ble.n	8000f4e <DS18B20_Read+0x1a>
	}
	return value;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40010c00 	.word	0x40010c00

08000fc0 <delay>:


void delay (uint16_t delay)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <delay+0x2c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000fd2:	bf00      	nop
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <delay+0x2c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d3f9      	bcc.n	8000fd4 <delay+0x14>
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	2000014c 	.word	0x2000014c

08000ff0 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0308 	add.w	r3, r7, #8
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100e:	2301      	movs	r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2302      	movs	r3, #2
 8001014:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	4619      	mov	r1, r3
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f002 fa43 	bl	80034a8 <HAL_GPIO_Init>
}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	460b      	mov	r3, r1
 8001034:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001044:	887b      	ldrh	r3, [r7, #2]
 8001046:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104c:	2301      	movs	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	4619      	mov	r1, r3
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f002 fa26 	bl	80034a8 <HAL_GPIO_Init>
}
 800105c:	bf00      	nop
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <Check_Temp>:

float Check_Temp(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
	  uint8_t Temp_byte1, Temp_byte2;
	  uint8_t Presence;
	  uint16_t TEMP;
	  float Temperature;
	    Presence = DS18B20_Start();
 800106a:	f7ff fee3 	bl	8000e34 <DS18B20_Start>
 800106e:	4603      	mov	r3, r0
 8001070:	73fb      	strb	r3, [r7, #15]
	    HAL_Delay (1);
 8001072:	2001      	movs	r0, #1
 8001074:	f001 fa56 	bl	8002524 <HAL_Delay>
	    if(Presence == 1){
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d105      	bne.n	800108a <Check_Temp+0x26>
	    DS18B20_Write (0xCC);  // skip ROM
 800107e:	20cc      	movs	r0, #204	; 0xcc
 8001080:	f7ff ff0c 	bl	8000e9c <DS18B20_Write>
	    DS18B20_Write (0x44);  // convert t
 8001084:	2044      	movs	r0, #68	; 0x44
 8001086:	f7ff ff09 	bl	8000e9c <DS18B20_Write>
	    }

	    HAL_Delay(800);
 800108a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800108e:	f001 fa49 	bl	8002524 <HAL_Delay>
	    Presence = DS18B20_Start();
 8001092:	f7ff fecf 	bl	8000e34 <DS18B20_Start>
 8001096:	4603      	mov	r3, r0
 8001098:	73fb      	strb	r3, [r7, #15]
	    HAL_Delay (1);
 800109a:	2001      	movs	r0, #1
 800109c:	f001 fa42 	bl	8002524 <HAL_Delay>
	    if(Presence == 1){
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d105      	bne.n	80010b2 <Check_Temp+0x4e>
	    DS18B20_Write (0xCC);  // skip ROM
 80010a6:	20cc      	movs	r0, #204	; 0xcc
 80010a8:	f7ff fef8 	bl	8000e9c <DS18B20_Write>
	    DS18B20_Write (0xBE);  // Read Scratch-pad
 80010ac:	20be      	movs	r0, #190	; 0xbe
 80010ae:	f7ff fef5 	bl	8000e9c <DS18B20_Write>
	    }

	  Temp_byte1 = DS18B20_Read();
 80010b2:	f7ff ff3f 	bl	8000f34 <DS18B20_Read>
 80010b6:	4603      	mov	r3, r0
 80010b8:	73bb      	strb	r3, [r7, #14]
	  Temp_byte2 = DS18B20_Read();
 80010ba:	f7ff ff3b 	bl	8000f34 <DS18B20_Read>
 80010be:	4603      	mov	r3, r0
 80010c0:	737b      	strb	r3, [r7, #13]
	  TEMP = (Temp_byte2<<8)|Temp_byte1;
 80010c2:	7b7b      	ldrb	r3, [r7, #13]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	817b      	strh	r3, [r7, #10]
	  Temperature = (float)TEMP/16;
 80010d2:	897b      	ldrh	r3, [r7, #10]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fce5 	bl	8000aa4 <__aeabi_ui2f>
 80010da:	4603      	mov	r3, r0
 80010dc:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fdeb 	bl	8000cbc <__aeabi_fdiv>
 80010e6:	4603      	mov	r3, r0
 80010e8:	607b      	str	r3, [r7, #4]
	  return Temperature;
 80010ea:	687b      	ldr	r3, [r7, #4]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80010f4:	b4b0      	push	{r4, r5, r7}
 80010f6:	b08f      	sub	sp, #60	; 0x3c
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80010fc:	f240 13b1 	movw	r3, #433	; 0x1b1
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8001102:	2307      	movs	r3, #7
 8001104:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8001108:	2307      	movs	r3, #7
 800110a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 800110e:	2301      	movs	r3, #1
 8001110:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8001114:	23ff      	movs	r3, #255	; 0xff
 8001116:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 800111a:	2364      	movs	r3, #100	; 0x64
 800111c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8001120:	2308      	movs	r3, #8
 8001122:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	461d      	mov	r5, r3
 8001128:	f107 040c 	add.w	r4, r7, #12
 800112c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800112e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001134:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001138:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	373c      	adds	r7, #60	; 0x3c
 8001140:	46bd      	mov	sp, r7
 8001142:	bcb0      	pop	{r4, r5, r7}
 8001144:	4770      	bx	lr

08001146 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001146:	b580      	push	{r7, lr}
 8001148:	b084      	sub	sp, #16
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001150:	2101      	movs	r1, #1
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 f9ff 	bl	8001556 <LoRa_read>
 8001158:	4603      	mov	r3, r0
 800115a:	73bb      	strb	r3, [r7, #14]
	data = read;
 800115c:	7bbb      	ldrb	r3, [r7, #14]
 800115e:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d107      	bne.n	8001176 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8001166:	7bbb      	ldrb	r3, [r7, #14]
 8001168:	f023 0307 	bic.w	r3, r3, #7
 800116c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
 8001174:	e03e      	b.n	80011f4 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d10c      	bne.n	8001196 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 800117c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001180:	f023 0307 	bic.w	r3, r3, #7
 8001184:	b25b      	sxtb	r3, r3
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	b25b      	sxtb	r3, r3
 800118c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	61da      	str	r2, [r3, #28]
 8001194:	e02e      	b.n	80011f4 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	2b03      	cmp	r3, #3
 800119a:	d10c      	bne.n	80011b6 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 800119c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011a0:	f023 0307 	bic.w	r3, r3, #7
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	f043 0303 	orr.w	r3, r3, #3
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2203      	movs	r2, #3
 80011b2:	61da      	str	r2, [r3, #28]
 80011b4:	e01e      	b.n	80011f4 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2b05      	cmp	r3, #5
 80011ba:	d10c      	bne.n	80011d6 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80011bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011c0:	f023 0307 	bic.w	r3, r3, #7
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	f043 0305 	orr.w	r3, r3, #5
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2205      	movs	r2, #5
 80011d2:	61da      	str	r2, [r3, #28]
 80011d4:	e00e      	b.n	80011f4 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2b06      	cmp	r3, #6
 80011da:	d10b      	bne.n	80011f4 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80011dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011e0:	f023 0307 	bic.w	r3, r3, #7
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	f043 0306 	orr.w	r3, r3, #6
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2206      	movs	r2, #6
 80011f2:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	461a      	mov	r2, r3
 80011f8:	2101      	movs	r1, #1
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f9c5 	bl	800158a <LoRa_write>
	//HAL_Delay(10);
}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	4613      	mov	r3, r2
 8001216:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6818      	ldr	r0, [r3, #0]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	889b      	ldrh	r3, [r3, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	4619      	mov	r1, r3
 8001224:	f002 fadb 	bl	80037de <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6998      	ldr	r0, [r3, #24]
 800122c:	88fa      	ldrh	r2, [r7, #6]
 800122e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001232:	68b9      	ldr	r1, [r7, #8]
 8001234:	f003 ff4e 	bl	80050d4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001238:	bf00      	nop
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	4618      	mov	r0, r3
 8001240:	f004 fb4e 	bl	80058e0 <HAL_SPI_GetState>
 8001244:	4603      	mov	r3, r0
 8001246:	2b01      	cmp	r3, #1
 8001248:	d1f7      	bne.n	800123a <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6998      	ldr	r0, [r3, #24]
 800124e:	8b3a      	ldrh	r2, [r7, #24]
 8001250:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001254:	6839      	ldr	r1, [r7, #0]
 8001256:	f004 f881 	bl	800535c <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800125a:	bf00      	nop
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4618      	mov	r0, r3
 8001262:	f004 fb3d 	bl	80058e0 <HAL_SPI_GetState>
 8001266:	4603      	mov	r3, r0
 8001268:	2b01      	cmp	r3, #1
 800126a:	d1f7      	bne.n	800125c <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6818      	ldr	r0, [r3, #0]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	889b      	ldrh	r3, [r3, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	4619      	mov	r1, r3
 8001278:	f002 fab1 	bl	80037de <HAL_GPIO_WritePin>
}
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	4613      	mov	r3, r2
 8001292:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	889b      	ldrh	r3, [r3, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	4619      	mov	r1, r3
 80012a0:	f002 fa9d 	bl	80037de <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6998      	ldr	r0, [r3, #24]
 80012a8:	88fa      	ldrh	r2, [r7, #6]
 80012aa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012ae:	68b9      	ldr	r1, [r7, #8]
 80012b0:	f003 ff10 	bl	80050d4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80012b4:	bf00      	nop
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 fb10 	bl	80058e0 <HAL_SPI_GetState>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d1f7      	bne.n	80012b6 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6998      	ldr	r0, [r3, #24]
 80012ca:	8b3a      	ldrh	r2, [r7, #24]
 80012cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012d0:	6839      	ldr	r1, [r7, #0]
 80012d2:	f003 feff 	bl	80050d4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80012d6:	bf00      	nop
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4618      	mov	r0, r3
 80012de:	f004 faff 	bl	80058e0 <HAL_SPI_GetState>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d1f7      	bne.n	80012d8 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	889b      	ldrh	r3, [r3, #4]
 80012f0:	2201      	movs	r2, #1
 80012f2:	4619      	mov	r1, r3
 80012f4:	f002 fa73 	bl	80037de <HAL_GPIO_WritePin>
}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 800130c:	2126      	movs	r1, #38	; 0x26
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f921 	bl	8001556 <LoRa_read>
 8001314:	4603      	mov	r3, r0
 8001316:	73bb      	strb	r3, [r7, #14]

	if(value)
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d004      	beq.n	8001328 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 800131e:	7bbb      	ldrb	r3, [r7, #14]
 8001320:	f043 0308 	orr.w	r3, r3, #8
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	e003      	b.n	8001330 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8001328:	7bbb      	ldrb	r3, [r7, #14]
 800132a:	f023 0308 	bic.w	r3, r3, #8
 800132e:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	461a      	mov	r2, r3
 8001334:	2126      	movs	r1, #38	; 0x26
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 f927 	bl	800158a <LoRa_write>
	HAL_Delay(10);
 800133c:	200a      	movs	r0, #10
 800133e:	f001 f8f1 	bl	8002524 <HAL_Delay>
}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 800134c:	b580      	push	{r7, lr}
 800134e:	b096      	sub	sp, #88	; 0x58
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8001354:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <LoRa_setAutoLDO+0x68>)
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	4611      	mov	r1, r2
 800135c:	2250      	movs	r2, #80	; 0x50
 800135e:	4618      	mov	r0, r3
 8001360:	f004 fec6 	bl	80060f0 <memcpy>

	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800136a:	461a      	mov	r2, r3
 800136c:	2301      	movs	r3, #1
 800136e:	4093      	lsls	r3, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f83d 	bl	80003f0 <__aeabi_i2d>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	3358      	adds	r3, #88	; 0x58
 8001380:	443b      	add	r3, r7
 8001382:	3b50      	subs	r3, #80	; 0x50
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f7ff f9c6 	bl	8000718 <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff faa8 	bl	80008e8 <__aeabi_d2iz>
 8001398:	4603      	mov	r3, r0
 800139a:	2b10      	cmp	r3, #16
 800139c:	bfcc      	ite	gt
 800139e:	2301      	movgt	r3, #1
 80013a0:	2300      	movle	r3, #0
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ffaa 	bl	8001300 <LoRa_setLowDaraRateOptimization>
}
 80013ac:	bf00      	nop
 80013ae:	3758      	adds	r7, #88	; 0x58
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	08006128 	.word	0x08006128

080013b8 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	04db      	lsls	r3, r3, #19
 80013c6:	115b      	asrs	r3, r3, #5
 80013c8:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	0c1b      	lsrs	r3, r3, #16
 80013ce:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80013d0:	7afb      	ldrb	r3, [r7, #11]
 80013d2:	461a      	mov	r2, r3
 80013d4:	2106      	movs	r1, #6
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f8d7 	bl	800158a <LoRa_write>
	HAL_Delay(5);
 80013dc:	2005      	movs	r0, #5
 80013de:	f001 f8a1 	bl	8002524 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80013e8:	7afb      	ldrb	r3, [r7, #11]
 80013ea:	461a      	mov	r2, r3
 80013ec:	2107      	movs	r1, #7
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f8cb 	bl	800158a <LoRa_write>
	HAL_Delay(5);
 80013f4:	2005      	movs	r0, #5
 80013f6:	f001 f895 	bl	8002524 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80013fe:	7afb      	ldrb	r3, [r7, #11]
 8001400:	461a      	mov	r2, r3
 8001402:	2108      	movs	r1, #8
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f8c0 	bl	800158a <LoRa_write>
	HAL_Delay(5);
 800140a:	2005      	movs	r0, #5
 800140c:	f001 f88a 	bl	8002524 <HAL_Delay>
}
 8001410:	bf00      	nop
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	2b0c      	cmp	r3, #12
 8001426:	dd01      	ble.n	800142c <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001428:	230c      	movs	r3, #12
 800142a:	603b      	str	r3, [r7, #0]
	if(SF<7)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	2b06      	cmp	r3, #6
 8001430:	dc01      	bgt.n	8001436 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001432:	2307      	movs	r3, #7
 8001434:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001436:	211e      	movs	r1, #30
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 f88c 	bl	8001556 <LoRa_read>
 800143e:	4603      	mov	r3, r0
 8001440:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001442:	200a      	movs	r0, #10
 8001444:	f001 f86e 	bl	8002524 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	b2da      	uxtb	r2, r3
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4413      	add	r3, r2
 800145a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 800145c:	7bbb      	ldrb	r3, [r7, #14]
 800145e:	461a      	mov	r2, r3
 8001460:	211e      	movs	r1, #30
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f891 	bl	800158a <LoRa_write>
	HAL_Delay(10);
 8001468:	200a      	movs	r0, #10
 800146a:	f001 f85b 	bl	8002524 <HAL_Delay>

	LoRa_setAutoLDO(_LoRa);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ff6c 	bl	800134c <LoRa_setAutoLDO>
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	461a      	mov	r2, r3
 800148c:	2109      	movs	r1, #9
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f87b 	bl	800158a <LoRa_write>
	HAL_Delay(10);
 8001494:	200a      	movs	r0, #10
 8001496:	f001 f845 	bl	8002524 <HAL_Delay>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	2b2c      	cmp	r3, #44	; 0x2c
 80014b8:	d801      	bhi.n	80014be <LoRa_setOCP+0x1a>
		current = 45;
 80014ba:	232d      	movs	r3, #45	; 0x2d
 80014bc:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	2bf0      	cmp	r3, #240	; 0xf0
 80014c2:	d901      	bls.n	80014c8 <LoRa_setOCP+0x24>
		current = 240;
 80014c4:	23f0      	movs	r3, #240	; 0xf0
 80014c6:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	2b78      	cmp	r3, #120	; 0x78
 80014cc:	d809      	bhi.n	80014e2 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	3b2d      	subs	r3, #45	; 0x2d
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <LoRa_setOCP+0x78>)
 80014d4:	fb82 1203 	smull	r1, r2, r2, r3
 80014d8:	1052      	asrs	r2, r2, #1
 80014da:	17db      	asrs	r3, r3, #31
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	73fb      	strb	r3, [r7, #15]
 80014e0:	e00b      	b.n	80014fa <LoRa_setOCP+0x56>
	else if(current <= 240)
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	2bf0      	cmp	r3, #240	; 0xf0
 80014e6:	d808      	bhi.n	80014fa <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80014e8:	78fb      	ldrb	r3, [r7, #3]
 80014ea:	331e      	adds	r3, #30
 80014ec:	4a0b      	ldr	r2, [pc, #44]	; (800151c <LoRa_setOCP+0x78>)
 80014ee:	fb82 1203 	smull	r1, r2, r2, r3
 80014f2:	1092      	asrs	r2, r2, #2
 80014f4:	17db      	asrs	r3, r3, #31
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	3320      	adds	r3, #32
 80014fe:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	461a      	mov	r2, r3
 8001504:	210b      	movs	r1, #11
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 f83f 	bl	800158a <LoRa_write>
	HAL_Delay(10);
 800150c:	200a      	movs	r0, #10
 800150e:	f001 f809 	bl	8002524 <HAL_Delay>
}
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	66666667 	.word	0x66666667

08001520 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001528:	211e      	movs	r1, #30
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f813 	bl	8001556 <LoRa_read>
 8001530:	4603      	mov	r3, r0
 8001532:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	f043 0307 	orr.w	r3, r3, #7
 800153a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 800153c:	7bbb      	ldrb	r3, [r7, #14]
 800153e:	461a      	mov	r2, r3
 8001540:	211e      	movs	r1, #30
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f821 	bl	800158a <LoRa_write>
	HAL_Delay(10);
 8001548:	200a      	movs	r0, #10
 800154a:	f000 ffeb 	bl	8002524 <HAL_Delay>
}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af02      	add	r7, sp, #8
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	460b      	mov	r3, r1
 8001560:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001568:	b2db      	uxtb	r3, r3
 800156a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800156c:	f107 030f 	add.w	r3, r7, #15
 8001570:	f107 010e 	add.w	r1, r7, #14
 8001574:	2201      	movs	r2, #1
 8001576:	9200      	str	r2, [sp, #0]
 8001578:	2201      	movs	r2, #1
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff fe44 	bl	8001208 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001580:	7bfb      	ldrb	r3, [r7, #15]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af02      	add	r7, sp, #8
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	460b      	mov	r3, r1
 8001594:	70fb      	strb	r3, [r7, #3]
 8001596:	4613      	mov	r3, r2
 8001598:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	73bb      	strb	r3, [r7, #14]
	data = value;
 80015a4:	78bb      	ldrb	r3, [r7, #2]
 80015a6:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80015a8:	f107 030f 	add.w	r3, r7, #15
 80015ac:	f107 010e 	add.w	r1, r7, #14
 80015b0:	2201      	movs	r2, #1
 80015b2:	9200      	str	r2, [sp, #0]
 80015b4:	2201      	movs	r2, #1
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff fe64 	bl	8001284 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80015bc:	bf00      	nop
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	461a      	mov	r2, r3
 80015d0:	460b      	mov	r3, r1
 80015d2:	72fb      	strb	r3, [r7, #11]
 80015d4:	4613      	mov	r3, r2
 80015d6:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80015d8:	7afb      	ldrb	r3, [r7, #11]
 80015da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6818      	ldr	r0, [r3, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	889b      	ldrh	r3, [r3, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	4619      	mov	r1, r3
 80015ee:	f002 f8f6 	bl	80037de <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6998      	ldr	r0, [r3, #24]
 80015f6:	f107 0117 	add.w	r1, r7, #23
 80015fa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80015fe:	2201      	movs	r2, #1
 8001600:	f003 fd68 	bl	80050d4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001604:	bf00      	nop
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	4618      	mov	r0, r3
 800160c:	f004 f968 	bl	80058e0 <HAL_SPI_GetState>
 8001610:	4603      	mov	r3, r0
 8001612:	2b01      	cmp	r3, #1
 8001614:	d1f7      	bne.n	8001606 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6998      	ldr	r0, [r3, #24]
 800161a:	7abb      	ldrb	r3, [r7, #10]
 800161c:	b29a      	uxth	r2, r3
 800161e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	f003 fd56 	bl	80050d4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001628:	bf00      	nop
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	4618      	mov	r0, r3
 8001630:	f004 f956 	bl	80058e0 <HAL_SPI_GetState>
 8001634:	4603      	mov	r3, r0
 8001636:	2b01      	cmp	r3, #1
 8001638:	d1f7      	bne.n	800162a <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	889b      	ldrh	r3, [r3, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	4619      	mov	r1, r3
 8001646:	f002 f8ca 	bl	80037de <HAL_GPIO_WritePin>
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]

	return 1;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr

08001666 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	4611      	mov	r1, r2
 8001672:	461a      	mov	r2, r3
 8001674:	460b      	mov	r3, r1
 8001676:	71fb      	strb	r3, [r7, #7]
 8001678:	4613      	mov	r3, r2
 800167a:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001682:	2101      	movs	r1, #1
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f7ff fd5e 	bl	8001146 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 800168a:	210e      	movs	r1, #14
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f7ff ff62 	bl	8001556 <LoRa_read>
 8001692:	4603      	mov	r3, r0
 8001694:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001696:	7cfb      	ldrb	r3, [r7, #19]
 8001698:	461a      	mov	r2, r3
 800169a:	210d      	movs	r1, #13
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f7ff ff74 	bl	800158a <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	461a      	mov	r2, r3
 80016a6:	2122      	movs	r1, #34	; 0x22
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f7ff ff6e 	bl	800158a <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	2100      	movs	r1, #0
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f7ff ff85 	bl	80015c4 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80016ba:	2103      	movs	r1, #3
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f7ff fd42 	bl	8001146 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80016c2:	2112      	movs	r1, #18
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f7ff ff46 	bl	8001556 <LoRa_read>
 80016ca:	4603      	mov	r3, r0
 80016cc:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80016ce:	7cfb      	ldrb	r3, [r7, #19]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00a      	beq.n	80016ee <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80016d8:	22ff      	movs	r2, #255	; 0xff
 80016da:	2112      	movs	r1, #18
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f7ff ff54 	bl	800158a <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 80016e2:	6979      	ldr	r1, [r7, #20]
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f7ff fd2e 	bl	8001146 <LoRa_gotoMode>
			return 1;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00f      	b.n	800170e <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 80016ee:	88bb      	ldrh	r3, [r7, #4]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	80bb      	strh	r3, [r7, #4]
 80016f4:	88bb      	ldrh	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d105      	bne.n	8001706 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 80016fa:	6979      	ldr	r1, [r7, #20]
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7ff fd22 	bl	8001146 <LoRa_gotoMode>
				return 0;
 8001702:	2300      	movs	r3, #0
 8001704:	e003      	b.n	800170e <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8001706:	2001      	movs	r0, #1
 8001708:	f000 ff0c 	bl	8002524 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 800170c:	e7d9      	b.n	80016c2 <LoRa_transmit+0x5c>
	}
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800171e:	2105      	movs	r1, #5
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff fd10 	bl	8001146 <LoRa_gotoMode>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 800172e:	b590      	push	{r4, r7, lr}
 8001730:	b089      	sub	sp, #36	; 0x24
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	4613      	mov	r3, r2
 800173a:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8001740:	2300      	movs	r3, #0
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	e007      	b.n	8001756 <LoRa_receive+0x28>
		data[i]=0;
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	4413      	add	r3, r2
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	3301      	adds	r3, #1
 8001754:	61bb      	str	r3, [r7, #24]
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	429a      	cmp	r2, r3
 800175c:	dbf3      	blt.n	8001746 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800175e:	2101      	movs	r1, #1
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f7ff fcf0 	bl	8001146 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8001766:	2112      	movs	r1, #18
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f7ff fef4 	bl	8001556 <LoRa_read>
 800176e:	4603      	mov	r3, r0
 8001770:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8001772:	7cfb      	ldrb	r3, [r7, #19]
 8001774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001778:	2b00      	cmp	r3, #0
 800177a:	d02f      	beq.n	80017dc <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800177c:	22ff      	movs	r2, #255	; 0xff
 800177e:	2112      	movs	r1, #18
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f7ff ff02 	bl	800158a <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8001786:	2113      	movs	r1, #19
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f7ff fee4 	bl	8001556 <LoRa_read>
 800178e:	4603      	mov	r3, r0
 8001790:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001792:	2110      	movs	r1, #16
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f7ff fede 	bl	8001556 <LoRa_read>
 800179a:	4603      	mov	r3, r0
 800179c:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800179e:	7cfb      	ldrb	r3, [r7, #19]
 80017a0:	461a      	mov	r2, r3
 80017a2:	210d      	movs	r1, #13
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f7ff fef0 	bl	800158a <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80017aa:	7cba      	ldrb	r2, [r7, #18]
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	4293      	cmp	r3, r2
 80017b0:	bf28      	it	cs
 80017b2:	4613      	movcs	r3, r2
 80017b4:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	e00b      	b.n	80017d4 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	18d4      	adds	r4, r2, r3
 80017c2:	2100      	movs	r1, #0
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f7ff fec6 	bl	8001556 <LoRa_read>
 80017ca:	4603      	mov	r3, r0
 80017cc:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	3301      	adds	r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	7ffb      	ldrb	r3, [r7, #31]
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	429a      	cmp	r2, r3
 80017da:	dbef      	blt.n	80017bc <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80017dc:	2105      	movs	r1, #5
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f7ff fcb1 	bl	8001146 <LoRa_gotoMode>
    return min;
 80017e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3724      	adds	r7, #36	; 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd90      	pop	{r4, r7, pc}

080017ee <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ff2b 	bl	8001652 <LoRa_isvalid>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 8096 	beq.w	8001930 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001804:	2100      	movs	r1, #0
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fc9d 	bl	8001146 <LoRa_gotoMode>
			HAL_Delay(10);
 800180c:	200a      	movs	r0, #10
 800180e:	f000 fe89 	bl	8002524 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001812:	2101      	movs	r1, #1
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff fe9e 	bl	8001556 <LoRa_read>
 800181a:	4603      	mov	r3, r0
 800181c:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 800181e:	200a      	movs	r0, #10
 8001820:	f000 fe80 	bl	8002524 <HAL_Delay>
			data = read | 0x80;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800182a:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 800182c:	7bbb      	ldrb	r3, [r7, #14]
 800182e:	461a      	mov	r2, r3
 8001830:	2101      	movs	r1, #1
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fea9 	bl	800158a <LoRa_write>
			HAL_Delay(100);
 8001838:	2064      	movs	r0, #100	; 0x64
 800183a:	f000 fe73 	bl	8002524 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	4619      	mov	r1, r3
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff fdb7 	bl	80013b8 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001850:	4619      	mov	r1, r3
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff fe12 	bl	800147c <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800185e:	4619      	mov	r1, r3
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff fe1f 	bl	80014a4 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001866:	2223      	movs	r2, #35	; 0x23
 8001868:	210c      	movs	r1, #12
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fe8d 	bl	800158a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff fe55 	bl	8001520 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800187c:	4619      	mov	r1, r3
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fdca 	bl	8001418 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001884:	22ff      	movs	r2, #255	; 0xff
 8001886:	211f      	movs	r1, #31
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff fe7e 	bl	800158a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	b2da      	uxtb	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	4413      	add	r3, r2
 80018a8:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80018aa:	7bbb      	ldrb	r3, [r7, #14]
 80018ac:	461a      	mov	r2, r3
 80018ae:	211d      	movs	r1, #29
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff fe6a 	bl	800158a <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff fd48 	bl	800134c <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	461a      	mov	r2, r3
 80018c8:	2120      	movs	r1, #32
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff fe5d 	bl	800158a <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	2121      	movs	r1, #33	; 0x21
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fe55 	bl	800158a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80018e0:	2140      	movs	r1, #64	; 0x40
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff fe37 	bl	8001556 <LoRa_read>
 80018e8:	4603      	mov	r3, r0
 80018ea:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80018f2:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80018f4:	7bbb      	ldrb	r3, [r7, #14]
 80018f6:	461a      	mov	r2, r3
 80018f8:	2140      	movs	r1, #64	; 0x40
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff fe45 	bl	800158a <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001900:	2101      	movs	r1, #1
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff fc1f 	bl	8001146 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 800190e:	200a      	movs	r0, #10
 8001910:	f000 fe08 	bl	8002524 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001914:	2142      	movs	r1, #66	; 0x42
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff fe1d 	bl	8001556 <LoRa_read>
 800191c:	4603      	mov	r3, r0
 800191e:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	2b12      	cmp	r3, #18
 8001924:	d101      	bne.n	800192a <LoRa_init+0x13c>
				return LORA_OK;
 8001926:	23c8      	movs	r3, #200	; 0xc8
 8001928:	e004      	b.n	8001934 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 800192a:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800192e:	e001      	b.n	8001934 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8001930:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800193c:	b5b0      	push	{r4, r5, r7, lr}
 800193e:	b08e      	sub	sp, #56	; 0x38
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001942:	f000 fd8d 	bl	8002460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001946:	f000 f933 	bl	8001bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800194a:	f000 fad7 	bl	8001efc <MX_GPIO_Init>
  MX_DMA_Init();
 800194e:	f000 fab7 	bl	8001ec0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001952:	f000 f98d 	bl	8001c70 <MX_ADC1_Init>
  MX_RTC_Init();
 8001956:	f000 f9c9 	bl	8001cec <MX_RTC_Init>
  MX_SPI1_Init();
 800195a:	f000 fa2b 	bl	8001db4 <MX_SPI1_Init>
  MX_TIM1_Init();
 800195e:	f000 fa5f 	bl	8001e20 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001962:	4883      	ldr	r0, [pc, #524]	; (8001b70 <main+0x234>)
 8001964:	f004 f924 	bl	8005bb0 <HAL_TIM_Base_Start>
  myLoRa = newLoRa();
 8001968:	4c82      	ldr	r4, [pc, #520]	; (8001b74 <main+0x238>)
 800196a:	463b      	mov	r3, r7
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fbc1 	bl	80010f4 <newLoRa>
 8001972:	4625      	mov	r5, r4
 8001974:	463c      	mov	r4, r7
 8001976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800197a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800197c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800197e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001982:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = NSS_GPIO_Port;
 8001986:	4b7b      	ldr	r3, [pc, #492]	; (8001b74 <main+0x238>)
 8001988:	4a7b      	ldr	r2, [pc, #492]	; (8001b78 <main+0x23c>)
 800198a:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 800198c:	4b79      	ldr	r3, [pc, #484]	; (8001b74 <main+0x238>)
 800198e:	2201      	movs	r2, #1
 8001990:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 8001992:	4b78      	ldr	r3, [pc, #480]	; (8001b74 <main+0x238>)
 8001994:	4a78      	ldr	r2, [pc, #480]	; (8001b78 <main+0x23c>)
 8001996:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 8001998:	4b76      	ldr	r3, [pc, #472]	; (8001b74 <main+0x238>)
 800199a:	2202      	movs	r2, #2
 800199c:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 800199e:	4b75      	ldr	r3, [pc, #468]	; (8001b74 <main+0x238>)
 80019a0:	4a75      	ldr	r2, [pc, #468]	; (8001b78 <main+0x23c>)
 80019a2:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 80019a4:	4b73      	ldr	r3, [pc, #460]	; (8001b74 <main+0x238>)
 80019a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019aa:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 80019ac:	4b71      	ldr	r3, [pc, #452]	; (8001b74 <main+0x238>)
 80019ae:	4a73      	ldr	r2, [pc, #460]	; (8001b7c <main+0x240>)
 80019b0:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 440;             // default = 433 MHz
 80019b2:	4b70      	ldr	r3, [pc, #448]	; (8001b74 <main+0x238>)
 80019b4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80019b8:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 80019ba:	4b6e      	ldr	r3, [pc, #440]	; (8001b74 <main+0x238>)
 80019bc:	2207      	movs	r2, #7
 80019be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  myLoRa.bandWidth             = BW_31_25KHz;       // default = BW_125KHz
 80019c2:	4b6c      	ldr	r3, [pc, #432]	; (8001b74 <main+0x238>)
 80019c4:	2204      	movs	r2, #4
 80019c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 80019ca:	4b6a      	ldr	r3, [pc, #424]	; (8001b74 <main+0x238>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 80019d2:	4b68      	ldr	r3, [pc, #416]	; (8001b74 <main+0x238>)
 80019d4:	22ff      	movs	r2, #255	; 0xff
 80019d6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  myLoRa.overCurrentProtection = 130;             // default = 100 mA
 80019da:	4b66      	ldr	r3, [pc, #408]	; (8001b74 <main+0x238>)
 80019dc:	2282      	movs	r2, #130	; 0x82
 80019de:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  myLoRa.preamble              = 9;              // default = 8;
 80019e2:	4b64      	ldr	r3, [pc, #400]	; (8001b74 <main+0x238>)
 80019e4:	2209      	movs	r2, #9
 80019e6:	851a      	strh	r2, [r3, #40]	; 0x28

  if (LoRa_init(&myLoRa) == LORA_OK){
 80019e8:	4862      	ldr	r0, [pc, #392]	; (8001b74 <main+0x238>)
 80019ea:	f7ff ff00 	bl	80017ee <LoRa_init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2bc8      	cmp	r3, #200	; 0xc8
 80019f2:	d102      	bne.n	80019fa <main+0xbe>
	  LoRa_Status = 1;
 80019f4:	4b62      	ldr	r3, [pc, #392]	; (8001b80 <main+0x244>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	801a      	strh	r2, [r3, #0]
  }
  LoRa_startReceiving(&myLoRa);
 80019fa:	485e      	ldr	r0, [pc, #376]	; (8001b74 <main+0x238>)
 80019fc:	f7ff fe8b 	bl	8001716 <LoRa_startReceiving>
  HAL_Delay(2000); //STABLE THE POWER AND MCU
 8001a00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a04:	f000 fd8e 	bl	8002524 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //	TURN OFF THE INTERRUPT FROM SX1278 LORA MODULE TO AVOILD UNWANTED WAKEUP STM32
	  	  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001a08:	2028      	movs	r0, #40	; 0x28
 8001a0a:	f001 fb08 	bl	800301e <HAL_NVIC_DisableIRQ>
	  //	ENTER SLEEPMODE AND NOW THE SYSTEM WAIT FOR INTERRUPT FROM RTC TO WAKEUP
	  	  HAL_SuspendTick();
 8001a0e:	f000 fdad 	bl	800256c <HAL_SuspendTick>
	  	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001a12:	2101      	movs	r1, #1
 8001a14:	2000      	movs	r0, #0
 8001a16:	f001 ff1f 	bl	8003858 <HAL_PWR_EnterSLEEPMode>
	  //	RESUME TICK AFTER WAKING UP AND ENABLE THE INTERRUPT ON GPIO PB10 OF SX1278 TO INDICATE WHEN THE DATA IS RECEIVED
	  	  HAL_ResumeTick();
 8001a1a:	f000 fdb5 	bl	8002588 <HAL_ResumeTick>
	  	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a1e:	2028      	movs	r0, #40	; 0x28
 8001a20:	f001 faef 	bl	8003002 <HAL_NVIC_EnableIRQ>
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); // Set the pin out put high to turn on the power Mosfet
 8001a24:	2201      	movs	r2, #1
 8001a26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a2a:	4856      	ldr	r0, [pc, #344]	; (8001b84 <main+0x248>)
 8001a2c:	f001 fed7 	bl	80037de <HAL_GPIO_WritePin>
	  	  HAL_Delay(100); //Delay couple ms to stable the sensor's power
 8001a30:	2064      	movs	r0, #100	; 0x64
 8001a32:	f000 fd77 	bl	8002524 <HAL_Delay>

	//READ DS18B20
      soil_TEMP = Check_Temp();
 8001a36:	f7ff fb15 	bl	8001064 <Check_Temp>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4a52      	ldr	r2, [pc, #328]	; (8001b88 <main+0x24c>)
 8001a3e:	6013      	str	r3, [r2, #0]

	//READ ADC Moisture
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&Data_Moisture, 1);
 8001a40:	2201      	movs	r2, #1
 8001a42:	4952      	ldr	r1, [pc, #328]	; (8001b8c <main+0x250>)
 8001a44:	4852      	ldr	r0, [pc, #328]	; (8001b90 <main+0x254>)
 8001a46:	f000 fe85 	bl	8002754 <HAL_ADC_Start_DMA>
	  HAL_Delay(10);
 8001a4a:	200a      	movs	r0, #10
 8001a4c:	f000 fd6a 	bl	8002524 <HAL_Delay>
	  HAL_ADC_Stop_DMA(&hadc1);
 8001a50:	484f      	ldr	r0, [pc, #316]	; (8001b90 <main+0x254>)
 8001a52:	f000 ff5d 	bl	8002910 <HAL_ADC_Stop_DMA>

	  if (Data_Moisture > ADC_MAX) Data_Moisture = ADC_MAX;
 8001a56:	4b4d      	ldr	r3, [pc, #308]	; (8001b8c <main+0x250>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d903      	bls.n	8001a6a <main+0x12e>
 8001a62:	4b4a      	ldr	r3, [pc, #296]	; (8001b8c <main+0x250>)
 8001a64:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a68:	801a      	strh	r2, [r3, #0]
	  if (Data_Moisture < ADC_MIN) Data_Moisture = ADC_MIN;
 8001a6a:	4b48      	ldr	r3, [pc, #288]	; (8001b8c <main+0x250>)
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a72:	d203      	bcs.n	8001a7c <main+0x140>
 8001a74:	4b45      	ldr	r3, [pc, #276]	; (8001b8c <main+0x250>)
 8001a76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a7a:	801a      	strh	r2, [r3, #0]
	  moisture_percentage = ((float)(ADC_MAX - Data_Moisture) / (ADC_MAX - ADC_MIN)) * 100;
 8001a7c:	4b43      	ldr	r3, [pc, #268]	; (8001b8c <main+0x250>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8001a84:	3308      	adds	r3, #8
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff f810 	bl	8000aac <__aeabi_i2f>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4941      	ldr	r1, [pc, #260]	; (8001b94 <main+0x258>)
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff f913 	bl	8000cbc <__aeabi_fdiv>
 8001a96:	4603      	mov	r3, r0
 8001a98:	493f      	ldr	r1, [pc, #252]	; (8001b98 <main+0x25c>)
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff f85a 	bl	8000b54 <__aeabi_fmul>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4b3d      	ldr	r3, [pc, #244]	; (8001b9c <main+0x260>)
 8001aa6:	601a      	str	r2, [r3, #0]

//SEND LORA DATA
	  uint16_t SOIL_TEMP    = (uint16_t)(soil_TEMP * 10);
 8001aa8:	4b37      	ldr	r3, [pc, #220]	; (8001b88 <main+0x24c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	493c      	ldr	r1, [pc, #240]	; (8001ba0 <main+0x264>)
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff f850 	bl	8000b54 <__aeabi_fmul>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f99c 	bl	8000df4 <__aeabi_f2uiz>
 8001abc:	4603      	mov	r3, r0
 8001abe:	86fb      	strh	r3, [r7, #54]	; 0x36
	  uint16_t DATA_Moisture = (uint16_t)(moisture_percentage * 10);
 8001ac0:	4b36      	ldr	r3, [pc, #216]	; (8001b9c <main+0x260>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4936      	ldr	r1, [pc, #216]	; (8001ba0 <main+0x264>)
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f844 	bl	8000b54 <__aeabi_fmul>
 8001acc:	4603      	mov	r3, r0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f990 	bl	8000df4 <__aeabi_f2uiz>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	86bb      	strh	r3, [r7, #52]	; 0x34

	  packet[0] = 0xA2;  // Check ID
 8001ad8:	4b32      	ldr	r3, [pc, #200]	; (8001ba4 <main+0x268>)
 8001ada:	22a2      	movs	r2, #162	; 0xa2
 8001adc:	701a      	strb	r2, [r3, #0]
	  packet[1] = (uint8_t)(SOIL_TEMP >> 8);
 8001ade:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4b2f      	ldr	r3, [pc, #188]	; (8001ba4 <main+0x268>)
 8001ae8:	705a      	strb	r2, [r3, #1]
	  packet[2] = (uint8_t)(SOIL_TEMP & 0xFF);
 8001aea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <main+0x268>)
 8001af0:	709a      	strb	r2, [r3, #2]
	  packet[3] = (uint8_t)(DATA_Moisture >> 8);
 8001af2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <main+0x268>)
 8001afc:	70da      	strb	r2, [r3, #3]
	  packet[4] = (uint8_t)(DATA_Moisture & 0xFF);
 8001afe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <main+0x268>)
 8001b04:	711a      	strb	r2, [r3, #4]

	  LoRa_transmit(&myLoRa, (uint8_t*)packet, sizeof(packet), 500);
 8001b06:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b0a:	2205      	movs	r2, #5
 8001b0c:	4925      	ldr	r1, [pc, #148]	; (8001ba4 <main+0x268>)
 8001b0e:	4819      	ldr	r0, [pc, #100]	; (8001b74 <main+0x238>)
 8001b10:	f7ff fda9 	bl	8001666 <LoRa_transmit>
	  LoRa_startReceiving(&myLoRa);
 8001b14:	4817      	ldr	r0, [pc, #92]	; (8001b74 <main+0x238>)
 8001b16:	f7ff fdfe 	bl	8001716 <LoRa_startReceiving>
	  HAL_Delay(1000);
 8001b1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b1e:	f000 fd01 	bl	8002524 <HAL_Delay>

	  while (RxBuffer[0] != 0x02 && retry < 2) //Gửi lại data nếu không có phản hồi ACK
 8001b22:	e013      	b.n	8001b4c <main+0x210>
	  {
	      LoRa_transmit(&myLoRa, (uint8_t*)packet, sizeof(packet), 500);
 8001b24:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b28:	2205      	movs	r2, #5
 8001b2a:	491e      	ldr	r1, [pc, #120]	; (8001ba4 <main+0x268>)
 8001b2c:	4811      	ldr	r0, [pc, #68]	; (8001b74 <main+0x238>)
 8001b2e:	f7ff fd9a 	bl	8001666 <LoRa_transmit>
	      LoRa_startReceiving(&myLoRa);
 8001b32:	4810      	ldr	r0, [pc, #64]	; (8001b74 <main+0x238>)
 8001b34:	f7ff fdef 	bl	8001716 <LoRa_startReceiving>
	      HAL_Delay(500);
 8001b38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b3c:	f000 fcf2 	bl	8002524 <HAL_Delay>
	      retry++;
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <main+0x26c>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	3301      	adds	r3, #1
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <main+0x26c>)
 8001b4a:	701a      	strb	r2, [r3, #0]
	  while (RxBuffer[0] != 0x02 && retry < 2) //Gửi lại data nếu không có phản hồi ACK
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <main+0x270>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d003      	beq.n	8001b5c <main+0x220>
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <main+0x26c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d9e3      	bls.n	8001b24 <main+0x1e8>
	  }
	  retry = 0;
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <main+0x26c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b68:	4806      	ldr	r0, [pc, #24]	; (8001b84 <main+0x248>)
 8001b6a:	f001 fe38 	bl	80037de <HAL_GPIO_WritePin>
  {
 8001b6e:	e74b      	b.n	8001a08 <main+0xcc>
 8001b70:	2000014c 	.word	0x2000014c
 8001b74:	20000028 	.word	0x20000028
 8001b78:	40010c00 	.word	0x40010c00
 8001b7c:	200000f4 	.word	0x200000f4
 8001b80:	20000054 	.word	0x20000054
 8001b84:	40010800 	.word	0x40010800
 8001b88:	20000064 	.word	0x20000064
 8001b8c:	2000005a 	.word	0x2000005a
 8001b90:	2000006c 	.word	0x2000006c
 8001b94:	44fa0000 	.word	0x44fa0000
 8001b98:	42c80000 	.word	0x42c80000
 8001b9c:	20000068 	.word	0x20000068
 8001ba0:	41200000 	.word	0x41200000
 8001ba4:	2000005c 	.word	0x2000005c
 8001ba8:	20000061 	.word	0x20000061
 8001bac:	20000058 	.word	0x20000058

08001bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b094      	sub	sp, #80	; 0x50
 8001bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bba:	2228      	movs	r2, #40	; 0x28
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f004 fa6a 	bl	8006098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001be0:	2309      	movs	r3, #9
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001be4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bea:	2300      	movs	r3, #0
 8001bec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c00:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f001 fe40 	bl	8003890 <HAL_RCC_OscConfig>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001c16:	f000 fa7f 	bl	8002118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c1a:	230f      	movs	r3, #15
 8001c1c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c2a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2102      	movs	r1, #2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f002 f8ac 	bl	8003d94 <HAL_RCC_ClockConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001c42:	f000 fa69 	bl	8002118 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001c46:	2303      	movs	r3, #3
 8001c48:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c4e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c54:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f002 fa15 	bl	8004088 <HAL_RCCEx_PeriphCLKConfig>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001c64:	f000 fa58 	bl	8002118 <Error_Handler>
  }
}
 8001c68:	bf00      	nop
 8001c6a:	3750      	adds	r7, #80	; 0x50
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c80:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <MX_ADC1_Init+0x74>)
 8001c82:	4a19      	ldr	r2, [pc, #100]	; (8001ce8 <MX_ADC1_Init+0x78>)
 8001c84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <MX_ADC1_Init+0x74>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c8c:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <MX_ADC1_Init+0x74>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c92:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <MX_ADC1_Init+0x74>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <MX_ADC1_Init+0x74>)
 8001c9a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ca0:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <MX_ADC1_Init+0x74>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <MX_ADC1_Init+0x74>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cac:	480d      	ldr	r0, [pc, #52]	; (8001ce4 <MX_ADC1_Init+0x74>)
 8001cae:	f000 fc79 	bl	80025a4 <HAL_ADC_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001cb8:	f000 fa2e 	bl	8002118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_ADC1_Init+0x74>)
 8001cce:	f000 fe87 	bl	80029e0 <HAL_ADC_ConfigChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001cd8:	f000 fa1e 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	2000006c 	.word	0x2000006c
 8001ce8:	40012400 	.word	0x40012400

08001cec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001cf2:	f107 030c 	add.w	r3, r7, #12
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	460a      	mov	r2, r1
 8001cfa:	801a      	strh	r2, [r3, #0]
 8001cfc:	460a      	mov	r2, r1
 8001cfe:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001d00:	2300      	movs	r3, #0
 8001d02:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8001d04:	463b      	mov	r3, r7
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d0c:	4b27      	ldr	r3, [pc, #156]	; (8001dac <MX_RTC_Init+0xc0>)
 8001d0e:	4a28      	ldr	r2, [pc, #160]	; (8001db0 <MX_RTC_Init+0xc4>)
 8001d10:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001d12:	4b26      	ldr	r3, [pc, #152]	; (8001dac <MX_RTC_Init+0xc0>)
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001d1a:	4b24      	ldr	r3, [pc, #144]	; (8001dac <MX_RTC_Init+0xc0>)
 8001d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d20:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d22:	4822      	ldr	r0, [pc, #136]	; (8001dac <MX_RTC_Init+0xc0>)
 8001d24:	f002 fb1c 	bl	8004360 <HAL_RTC_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001d2e:	f000 f9f3 	bl	8002118 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d3e:	f107 030c 	add.w	r3, r7, #12
 8001d42:	2201      	movs	r2, #1
 8001d44:	4619      	mov	r1, r3
 8001d46:	4819      	ldr	r0, [pc, #100]	; (8001dac <MX_RTC_Init+0xc0>)
 8001d48:	f002 fb96 	bl	8004478 <HAL_RTC_SetTime>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8001d52:	f000 f9e1 	bl	8002118 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d56:	2301      	movs	r3, #1
 8001d58:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001d66:	f107 0308 	add.w	r3, r7, #8
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	480f      	ldr	r0, [pc, #60]	; (8001dac <MX_RTC_Init+0xc0>)
 8001d70:	f002 fcf2 	bl	8004758 <HAL_RTC_SetDate>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001d7a:	f000 f9cd 	bl	8002118 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x5;
 8001d86:	2305      	movs	r3, #5
 8001d88:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d8e:	463b      	mov	r3, r7
 8001d90:	2201      	movs	r2, #1
 8001d92:	4619      	mov	r1, r3
 8001d94:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_RTC_Init+0xc0>)
 8001d96:	f002 fd95 	bl	80048c4 <HAL_RTC_SetAlarm_IT>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8001da0:	f000 f9ba 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	200000e0 	.word	0x200000e0
 8001db0:	40002800 	.word	0x40002800

08001db4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001db8:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001dba:	4a18      	ldr	r2, [pc, #96]	; (8001e1c <MX_SPI1_Init+0x68>)
 8001dbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dbe:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001dc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dc6:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001de4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001de8:	2210      	movs	r2, #16
 8001dea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001df8:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001e00:	220a      	movs	r2, #10
 8001e02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e04:	4804      	ldr	r0, [pc, #16]	; (8001e18 <MX_SPI1_Init+0x64>)
 8001e06:	f003 f8e1 	bl	8004fcc <HAL_SPI_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e10:	f000 f982 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	200000f4 	.word	0x200000f4
 8001e1c:	40013000 	.word	0x40013000

08001e20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e34:	463b      	mov	r3, r7
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e3c:	4b1e      	ldr	r3, [pc, #120]	; (8001eb8 <MX_TIM1_Init+0x98>)
 8001e3e:	4a1f      	ldr	r2, [pc, #124]	; (8001ebc <MX_TIM1_Init+0x9c>)
 8001e40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001e42:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <MX_TIM1_Init+0x98>)
 8001e44:	2247      	movs	r2, #71	; 0x47
 8001e46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e48:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <MX_TIM1_Init+0x98>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e4e:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <MX_TIM1_Init+0x98>)
 8001e50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e56:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <MX_TIM1_Init+0x98>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e5c:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <MX_TIM1_Init+0x98>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <MX_TIM1_Init+0x98>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e68:	4813      	ldr	r0, [pc, #76]	; (8001eb8 <MX_TIM1_Init+0x98>)
 8001e6a:	f003 fe52 	bl	8005b12 <HAL_TIM_Base_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001e74:	f000 f950 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e7e:	f107 0308 	add.w	r3, r7, #8
 8001e82:	4619      	mov	r1, r3
 8001e84:	480c      	ldr	r0, [pc, #48]	; (8001eb8 <MX_TIM1_Init+0x98>)
 8001e86:	f003 fedd 	bl	8005c44 <HAL_TIM_ConfigClockSource>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001e90:	f000 f942 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e94:	2300      	movs	r3, #0
 8001e96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <MX_TIM1_Init+0x98>)
 8001ea2:	f004 f89b 	bl	8005fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001eac:	f000 f934 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001eb0:	bf00      	nop
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	2000014c 	.word	0x2000014c
 8001ebc:	40012c00 	.word	0x40012c00

08001ec0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <MX_DMA_Init+0x38>)
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <MX_DMA_Init+0x38>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6153      	str	r3, [r2, #20]
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <MX_DMA_Init+0x38>)
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	200b      	movs	r0, #11
 8001ee4:	f001 f871 	bl	8002fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ee8:	200b      	movs	r0, #11
 8001eea:	f001 f88a 	bl	8003002 <HAL_NVIC_EnableIRQ>

}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000

08001efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f02:	f107 0310 	add.w	r3, r7, #16
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f10:	4b3e      	ldr	r3, [pc, #248]	; (800200c <MX_GPIO_Init+0x110>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a3d      	ldr	r2, [pc, #244]	; (800200c <MX_GPIO_Init+0x110>)
 8001f16:	f043 0310 	orr.w	r3, r3, #16
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b3b      	ldr	r3, [pc, #236]	; (800200c <MX_GPIO_Init+0x110>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f28:	4b38      	ldr	r3, [pc, #224]	; (800200c <MX_GPIO_Init+0x110>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a37      	ldr	r2, [pc, #220]	; (800200c <MX_GPIO_Init+0x110>)
 8001f2e:	f043 0320 	orr.w	r3, r3, #32
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b35      	ldr	r3, [pc, #212]	; (800200c <MX_GPIO_Init+0x110>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f40:	4b32      	ldr	r3, [pc, #200]	; (800200c <MX_GPIO_Init+0x110>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	4a31      	ldr	r2, [pc, #196]	; (800200c <MX_GPIO_Init+0x110>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	6193      	str	r3, [r2, #24]
 8001f4c:	4b2f      	ldr	r3, [pc, #188]	; (800200c <MX_GPIO_Init+0x110>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f58:	4b2c      	ldr	r3, [pc, #176]	; (800200c <MX_GPIO_Init+0x110>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	4a2b      	ldr	r2, [pc, #172]	; (800200c <MX_GPIO_Init+0x110>)
 8001f5e:	f043 0308 	orr.w	r3, r3, #8
 8001f62:	6193      	str	r3, [r2, #24]
 8001f64:	4b29      	ldr	r3, [pc, #164]	; (800200c <MX_GPIO_Init+0x110>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8001f70:	2201      	movs	r2, #1
 8001f72:	2103      	movs	r1, #3
 8001f74:	4826      	ldr	r0, [pc, #152]	; (8002010 <MX_GPIO_Init+0x114>)
 8001f76:	f001 fc32 	bl	80037de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f80:	4824      	ldr	r0, [pc, #144]	; (8002014 <MX_GPIO_Init+0x118>)
 8001f82:	f001 fc2c 	bl	80037de <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NSS_Pin RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 8001f86:	2303      	movs	r3, #3
 8001f88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2302      	movs	r3, #2
 8001f94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f96:	f107 0310 	add.w	r3, r7, #16
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	481c      	ldr	r0, [pc, #112]	; (8002010 <MX_GPIO_Init+0x114>)
 8001f9e:	f001 fa83 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <MX_GPIO_Init+0x11c>)
 8001faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4816      	ldr	r0, [pc, #88]	; (8002010 <MX_GPIO_Init+0x114>)
 8001fb8:	f001 fa76 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fca:	f107 0310 	add.w	r3, r7, #16
 8001fce:	4619      	mov	r1, r3
 8001fd0:	480f      	ldr	r0, [pc, #60]	; (8002010 <MX_GPIO_Init+0x114>)
 8001fd2:	f001 fa69 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe8:	f107 0310 	add.w	r3, r7, #16
 8001fec:	4619      	mov	r1, r3
 8001fee:	4809      	ldr	r0, [pc, #36]	; (8002014 <MX_GPIO_Init+0x118>)
 8001ff0:	f001 fa5a 	bl	80034a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2028      	movs	r0, #40	; 0x28
 8001ffa:	f000 ffe6 	bl	8002fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ffe:	2028      	movs	r0, #40	; 0x28
 8002000:	f000 ffff 	bl	8003002 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002004:	bf00      	nop
 8002006:	3720      	adds	r7, #32
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000
 8002010:	40010c00 	.word	0x40010c00
 8002014:	40010800 	.word	0x40010800
 8002018:	10110000 	.word	0x10110000

0800201c <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef sTime = {0};
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	2100      	movs	r1, #0
 800202a:	460a      	mov	r2, r1
 800202c:	801a      	strh	r2, [r3, #0]
 800202e:	460a      	mov	r2, r1
 8002030:	709a      	strb	r2, [r3, #2]
    RTC_AlarmTypeDef sAlarm = {0};
 8002032:	f107 0308 	add.w	r3, r7, #8
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]


    // Lấy thời gian hiện tại
    HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);  // Chuyển sang RTC_FORMAT_BIN để dễ tính toán
 800203c:	f107 0310 	add.w	r3, r7, #16
 8002040:	2200      	movs	r2, #0
 8002042:	4619      	mov	r1, r3
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f002 faaf 	bl	80045a8 <HAL_RTC_GetTime>

    // Cộng thêm 10 giây, xử lý tràn giây/phút/giờ
    uint32_t total_seconds = sTime.Hours * 3600 + sTime.Minutes * 60 + sTime.Seconds + 10;
 800204a:	7c3b      	ldrb	r3, [r7, #16]
 800204c:	461a      	mov	r2, r3
 800204e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002052:	fb03 f202 	mul.w	r2, r3, r2
 8002056:	7c7b      	ldrb	r3, [r7, #17]
 8002058:	4619      	mov	r1, r3
 800205a:	460b      	mov	r3, r1
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	1a5b      	subs	r3, r3, r1
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	7cba      	ldrb	r2, [r7, #18]
 8002066:	4413      	add	r3, r2
 8002068:	330a      	adds	r3, #10
 800206a:	617b      	str	r3, [r7, #20]
    sAlarm.AlarmTime.Hours   = (total_seconds / 3600) % 24;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	4a1c      	ldr	r2, [pc, #112]	; (80020e0 <HAL_RTC_AlarmAEventCallback+0xc4>)
 8002070:	fba2 2303 	umull	r2, r3, r2, r3
 8002074:	0ad9      	lsrs	r1, r3, #11
 8002076:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_RTC_AlarmAEventCallback+0xc8>)
 8002078:	fba3 2301 	umull	r2, r3, r3, r1
 800207c:	091a      	lsrs	r2, r3, #4
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	1aca      	subs	r2, r1, r3
 8002088:	b2d3      	uxtb	r3, r2
 800208a:	723b      	strb	r3, [r7, #8]
    sAlarm.AlarmTime.Minutes = (total_seconds / 60) % 60;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	4a16      	ldr	r2, [pc, #88]	; (80020e8 <HAL_RTC_AlarmAEventCallback+0xcc>)
 8002090:	fba2 2303 	umull	r2, r3, r2, r3
 8002094:	0959      	lsrs	r1, r3, #5
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_RTC_AlarmAEventCallback+0xcc>)
 8002098:	fba3 2301 	umull	r2, r3, r3, r1
 800209c:	095a      	lsrs	r2, r3, #5
 800209e:	4613      	mov	r3, r2
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	1aca      	subs	r2, r1, r3
 80020a8:	b2d3      	uxtb	r3, r2
 80020aa:	727b      	strb	r3, [r7, #9]
    sAlarm.AlarmTime.Seconds = total_seconds % 60;
 80020ac:	6979      	ldr	r1, [r7, #20]
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_RTC_AlarmAEventCallback+0xcc>)
 80020b0:	fba3 2301 	umull	r2, r3, r3, r1
 80020b4:	095a      	lsrs	r2, r3, #5
 80020b6:	4613      	mov	r3, r2
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	1a9b      	subs	r3, r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	1aca      	subs	r2, r1, r3
 80020c0:	b2d3      	uxtb	r3, r2
 80020c2:	72bb      	strb	r3, [r7, #10]
    sAlarm.Alarm = RTC_ALARM_A;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]

    HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN);  // Sử dụng RTC_FORMAT_BIN
 80020c8:	f107 0308 	add.w	r3, r7, #8
 80020cc:	2200      	movs	r2, #0
 80020ce:	4619      	mov	r1, r3
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f002 fbf7 	bl	80048c4 <HAL_RTC_SetAlarm_IT>
}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	91a2b3c5 	.word	0x91a2b3c5
 80020e4:	aaaaaaab 	.word	0xaaaaaaab
 80020e8:	88888889 	.word	0x88888889

080020ec <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) //Sự kiện callback xảy ra khi có data đến
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == DIO0_Pin)  // Có data đến
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020fc:	d104      	bne.n	8002108 <HAL_GPIO_EXTI_Callback+0x1c>
    {
  	  LoRa_receive(&myLoRa, RxBuffer, 1);
 80020fe:	2201      	movs	r2, #1
 8002100:	4903      	ldr	r1, [pc, #12]	; (8002110 <HAL_GPIO_EXTI_Callback+0x24>)
 8002102:	4804      	ldr	r0, [pc, #16]	; (8002114 <HAL_GPIO_EXTI_Callback+0x28>)
 8002104:	f7ff fb13 	bl	800172e <LoRa_receive>
    }
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000058 	.word	0x20000058
 8002114:	20000028 	.word	0x20000028

08002118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800211c:	b672      	cpsid	i
}
 800211e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002120:	e7fe      	b.n	8002120 <Error_Handler+0x8>
	...

08002124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <HAL_MspInit+0x5c>)
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	4a14      	ldr	r2, [pc, #80]	; (8002180 <HAL_MspInit+0x5c>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6193      	str	r3, [r2, #24]
 8002136:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_MspInit+0x5c>)
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_MspInit+0x5c>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <HAL_MspInit+0x5c>)
 8002148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214c:	61d3      	str	r3, [r2, #28]
 800214e:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <HAL_MspInit+0x5c>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800215a:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <HAL_MspInit+0x60>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	4a04      	ldr	r2, [pc, #16]	; (8002184 <HAL_MspInit+0x60>)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	40021000 	.word	0x40021000
 8002184:	40010000 	.word	0x40010000

08002188 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 0310 	add.w	r3, r7, #16
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a28      	ldr	r2, [pc, #160]	; (8002244 <HAL_ADC_MspInit+0xbc>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d149      	bne.n	800223c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021a8:	4b27      	ldr	r3, [pc, #156]	; (8002248 <HAL_ADC_MspInit+0xc0>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	4a26      	ldr	r2, [pc, #152]	; (8002248 <HAL_ADC_MspInit+0xc0>)
 80021ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021b2:	6193      	str	r3, [r2, #24]
 80021b4:	4b24      	ldr	r3, [pc, #144]	; (8002248 <HAL_ADC_MspInit+0xc0>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c0:	4b21      	ldr	r3, [pc, #132]	; (8002248 <HAL_ADC_MspInit+0xc0>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	4a20      	ldr	r2, [pc, #128]	; (8002248 <HAL_ADC_MspInit+0xc0>)
 80021c6:	f043 0304 	orr.w	r3, r3, #4
 80021ca:	6193      	str	r3, [r2, #24]
 80021cc:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <HAL_ADC_MspInit+0xc0>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021d8:	2301      	movs	r3, #1
 80021da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021dc:	2303      	movs	r3, #3
 80021de:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	f107 0310 	add.w	r3, r7, #16
 80021e4:	4619      	mov	r1, r3
 80021e6:	4819      	ldr	r0, [pc, #100]	; (800224c <HAL_ADC_MspInit+0xc4>)
 80021e8:	f001 f95e 	bl	80034a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80021ec:	4b18      	ldr	r3, [pc, #96]	; (8002250 <HAL_ADC_MspInit+0xc8>)
 80021ee:	4a19      	ldr	r2, [pc, #100]	; (8002254 <HAL_ADC_MspInit+0xcc>)
 80021f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <HAL_ADC_MspInit+0xc8>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021f8:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_ADC_MspInit+0xc8>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021fe:	4b14      	ldr	r3, [pc, #80]	; (8002250 <HAL_ADC_MspInit+0xc8>)
 8002200:	2280      	movs	r2, #128	; 0x80
 8002202:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_ADC_MspInit+0xc8>)
 8002206:	f44f 7280 	mov.w	r2, #256	; 0x100
 800220a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800220c:	4b10      	ldr	r3, [pc, #64]	; (8002250 <HAL_ADC_MspInit+0xc8>)
 800220e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002212:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002214:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <HAL_ADC_MspInit+0xc8>)
 8002216:	2220      	movs	r2, #32
 8002218:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <HAL_ADC_MspInit+0xc8>)
 800221c:	2200      	movs	r2, #0
 800221e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002220:	480b      	ldr	r0, [pc, #44]	; (8002250 <HAL_ADC_MspInit+0xc8>)
 8002222:	f000 ff17 	bl	8003054 <HAL_DMA_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800222c:	f7ff ff74 	bl	8002118 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a07      	ldr	r2, [pc, #28]	; (8002250 <HAL_ADC_MspInit+0xc8>)
 8002234:	621a      	str	r2, [r3, #32]
 8002236:	4a06      	ldr	r2, [pc, #24]	; (8002250 <HAL_ADC_MspInit+0xc8>)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800223c:	bf00      	nop
 800223e:	3720      	adds	r7, #32
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40012400 	.word	0x40012400
 8002248:	40021000 	.word	0x40021000
 800224c:	40010800 	.word	0x40010800
 8002250:	2000009c 	.word	0x2000009c
 8002254:	40020008 	.word	0x40020008

08002258 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <HAL_RTC_MspInit+0x4c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d118      	bne.n	800229c <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800226a:	f001 fae9 	bl	8003840 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <HAL_RTC_MspInit+0x50>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <HAL_RTC_MspInit+0x50>)
 8002274:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002278:	61d3      	str	r3, [r2, #28]
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RTC_MspInit+0x50>)
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <HAL_RTC_MspInit+0x54>)
 8002288:	2201      	movs	r2, #1
 800228a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800228c:	2200      	movs	r2, #0
 800228e:	2100      	movs	r1, #0
 8002290:	2029      	movs	r0, #41	; 0x29
 8002292:	f000 fe9a 	bl	8002fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002296:	2029      	movs	r0, #41	; 0x29
 8002298:	f000 feb3 	bl	8003002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40002800 	.word	0x40002800
 80022a8:	40021000 	.word	0x40021000
 80022ac:	4242043c 	.word	0x4242043c

080022b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a1b      	ldr	r2, [pc, #108]	; (8002338 <HAL_SPI_MspInit+0x88>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d12f      	bne.n	8002330 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022d0:	4b1a      	ldr	r3, [pc, #104]	; (800233c <HAL_SPI_MspInit+0x8c>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	4a19      	ldr	r2, [pc, #100]	; (800233c <HAL_SPI_MspInit+0x8c>)
 80022d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022da:	6193      	str	r3, [r2, #24]
 80022dc:	4b17      	ldr	r3, [pc, #92]	; (800233c <HAL_SPI_MspInit+0x8c>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e8:	4b14      	ldr	r3, [pc, #80]	; (800233c <HAL_SPI_MspInit+0x8c>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4a13      	ldr	r2, [pc, #76]	; (800233c <HAL_SPI_MspInit+0x8c>)
 80022ee:	f043 0304 	orr.w	r3, r3, #4
 80022f2:	6193      	str	r3, [r2, #24]
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_SPI_MspInit+0x8c>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002300:	23a0      	movs	r3, #160	; 0xa0
 8002302:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002308:	2303      	movs	r3, #3
 800230a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230c:	f107 0310 	add.w	r3, r7, #16
 8002310:	4619      	mov	r1, r3
 8002312:	480b      	ldr	r0, [pc, #44]	; (8002340 <HAL_SPI_MspInit+0x90>)
 8002314:	f001 f8c8 	bl	80034a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002318:	2340      	movs	r3, #64	; 0x40
 800231a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002324:	f107 0310 	add.w	r3, r7, #16
 8002328:	4619      	mov	r1, r3
 800232a:	4805      	ldr	r0, [pc, #20]	; (8002340 <HAL_SPI_MspInit+0x90>)
 800232c:	f001 f8bc 	bl	80034a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002330:	bf00      	nop
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40013000 	.word	0x40013000
 800233c:	40021000 	.word	0x40021000
 8002340:	40010800 	.word	0x40010800

08002344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a09      	ldr	r2, [pc, #36]	; (8002378 <HAL_TIM_Base_MspInit+0x34>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d10b      	bne.n	800236e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_TIM_Base_MspInit+0x38>)
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	4a08      	ldr	r2, [pc, #32]	; (800237c <HAL_TIM_Base_MspInit+0x38>)
 800235c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002360:	6193      	str	r3, [r2, #24]
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_TIM_Base_MspInit+0x38>)
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800236e:	bf00      	nop
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	40012c00 	.word	0x40012c00
 800237c:	40021000 	.word	0x40021000

08002380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002384:	e7fe      	b.n	8002384 <NMI_Handler+0x4>

08002386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800238a:	e7fe      	b.n	800238a <HardFault_Handler+0x4>

0800238c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <MemManage_Handler+0x4>

08002392 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <BusFault_Handler+0x4>

08002398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <UsageFault_Handler+0x4>

0800239e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr

080023b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c6:	f000 f891 	bl	80024ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <DMA1_Channel1_IRQHandler+0x10>)
 80023d6:	f000 ff33 	bl	8003240 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	2000009c 	.word	0x2000009c

080023e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80023e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80023ec:	f001 fa10 	bl	8003810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80023f8:	4802      	ldr	r0, [pc, #8]	; (8002404 <RTC_Alarm_IRQHandler+0x10>)
 80023fa:	f002 fb1b 	bl	8004a34 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200000e0 	.word	0x200000e0

08002408 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002414:	f7ff fff8 	bl	8002408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002418:	480b      	ldr	r0, [pc, #44]	; (8002448 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800241a:	490c      	ldr	r1, [pc, #48]	; (800244c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800241c:	4a0c      	ldr	r2, [pc, #48]	; (8002450 <LoopFillZerobss+0x16>)
  movs r3, #0
 800241e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002420:	e002      	b.n	8002428 <LoopCopyDataInit>

08002422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002426:	3304      	adds	r3, #4

08002428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800242c:	d3f9      	bcc.n	8002422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242e:	4a09      	ldr	r2, [pc, #36]	; (8002454 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002430:	4c09      	ldr	r4, [pc, #36]	; (8002458 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002434:	e001      	b.n	800243a <LoopFillZerobss>

08002436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002438:	3204      	adds	r2, #4

0800243a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800243c:	d3fb      	bcc.n	8002436 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800243e:	f003 fe33 	bl	80060a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002442:	f7ff fa7b 	bl	800193c <main>
  bx lr
 8002446:	4770      	bx	lr
  ldr r0, =_sdata
 8002448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800244c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002450:	080061c0 	.word	0x080061c0
  ldr r2, =_sbss
 8002454:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002458:	20000198 	.word	0x20000198

0800245c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800245c:	e7fe      	b.n	800245c <ADC1_2_IRQHandler>
	...

08002460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002464:	4b08      	ldr	r3, [pc, #32]	; (8002488 <HAL_Init+0x28>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a07      	ldr	r2, [pc, #28]	; (8002488 <HAL_Init+0x28>)
 800246a:	f043 0310 	orr.w	r3, r3, #16
 800246e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002470:	2003      	movs	r0, #3
 8002472:	f000 fd9f 	bl	8002fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002476:	200f      	movs	r0, #15
 8002478:	f000 f808 	bl	800248c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800247c:	f7ff fe52 	bl	8002124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40022000 	.word	0x40022000

0800248c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <HAL_InitTick+0x54>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_InitTick+0x58>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fdc5 	bl	800303a <HAL_SYSTICK_Config>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00e      	b.n	80024d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b0f      	cmp	r3, #15
 80024be:	d80a      	bhi.n	80024d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c0:	2200      	movs	r2, #0
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f000 fd7f 	bl	8002fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024cc:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <HAL_InitTick+0x5c>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e000      	b.n	80024d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000000 	.word	0x20000000
 80024e4:	20000008 	.word	0x20000008
 80024e8:	20000004 	.word	0x20000004

080024ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_IncTick+0x1c>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_IncTick+0x20>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	4a03      	ldr	r2, [pc, #12]	; (800250c <HAL_IncTick+0x20>)
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr
 8002508:	20000008 	.word	0x20000008
 800250c:	20000194 	.word	0x20000194

08002510 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return uwTick;
 8002514:	4b02      	ldr	r3, [pc, #8]	; (8002520 <HAL_GetTick+0x10>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	20000194 	.word	0x20000194

08002524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800252c:	f7ff fff0 	bl	8002510 <HAL_GetTick>
 8002530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d005      	beq.n	800254a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_Delay+0x44>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4413      	add	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800254a:	bf00      	nop
 800254c:	f7ff ffe0 	bl	8002510 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	429a      	cmp	r2, r3
 800255a:	d8f7      	bhi.n	800254c <HAL_Delay+0x28>
  {
  }
}
 800255c:	bf00      	nop
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000008 	.word	0x20000008

0800256c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <HAL_SuspendTick+0x18>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a03      	ldr	r2, [pc, #12]	; (8002584 <HAL_SuspendTick+0x18>)
 8002576:	f023 0302 	bic.w	r3, r3, #2
 800257a:	6013      	str	r3, [r2, #0]
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	e000e010 	.word	0xe000e010

08002588 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <HAL_ResumeTick+0x18>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a03      	ldr	r2, [pc, #12]	; (80025a0 <HAL_ResumeTick+0x18>)
 8002592:	f043 0302 	orr.w	r3, r3, #2
 8002596:	6013      	str	r3, [r2, #0]
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	e000e010 	.word	0xe000e010

080025a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e0be      	b.n	8002744 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d109      	bne.n	80025e8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff fdd0 	bl	8002188 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fb4b 	bl	8002c84 <ADC_ConversionStop_Disable>
 80025ee:	4603      	mov	r3, r0
 80025f0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f6:	f003 0310 	and.w	r3, r3, #16
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 8099 	bne.w	8002732 <HAL_ADC_Init+0x18e>
 8002600:	7dfb      	ldrb	r3, [r7, #23]
 8002602:	2b00      	cmp	r3, #0
 8002604:	f040 8095 	bne.w	8002732 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002610:	f023 0302 	bic.w	r3, r3, #2
 8002614:	f043 0202 	orr.w	r2, r3, #2
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002624:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	7b1b      	ldrb	r3, [r3, #12]
 800262a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800262c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	4313      	orrs	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800263c:	d003      	beq.n	8002646 <HAL_ADC_Init+0xa2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d102      	bne.n	800264c <HAL_ADC_Init+0xa8>
 8002646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800264a:	e000      	b.n	800264e <HAL_ADC_Init+0xaa>
 800264c:	2300      	movs	r3, #0
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	7d1b      	ldrb	r3, [r3, #20]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d119      	bne.n	8002690 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	7b1b      	ldrb	r3, [r3, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d109      	bne.n	8002678 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	3b01      	subs	r3, #1
 800266a:	035a      	lsls	r2, r3, #13
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	e00b      	b.n	8002690 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	f043 0220 	orr.w	r2, r3, #32
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002688:	f043 0201 	orr.w	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	4b28      	ldr	r3, [pc, #160]	; (800274c <HAL_ADC_Init+0x1a8>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	68b9      	ldr	r1, [r7, #8]
 80026b4:	430b      	orrs	r3, r1
 80026b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c0:	d003      	beq.n	80026ca <HAL_ADC_Init+0x126>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d104      	bne.n	80026d4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	051b      	lsls	r3, r3, #20
 80026d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	4b18      	ldr	r3, [pc, #96]	; (8002750 <HAL_ADC_Init+0x1ac>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d10b      	bne.n	8002710 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002702:	f023 0303 	bic.w	r3, r3, #3
 8002706:	f043 0201 	orr.w	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800270e:	e018      	b.n	8002742 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	f023 0312 	bic.w	r3, r3, #18
 8002718:	f043 0210 	orr.w	r2, r3, #16
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	f043 0201 	orr.w	r2, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002730:	e007      	b.n	8002742 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002736:	f043 0210 	orr.w	r2, r3, #16
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002742:	7dfb      	ldrb	r3, [r7, #23]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	ffe1f7fd 	.word	0xffe1f7fd
 8002750:	ff1f0efe 	.word	0xff1f0efe

08002754 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a64      	ldr	r2, [pc, #400]	; (80028fc <HAL_ADC_Start_DMA+0x1a8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d004      	beq.n	8002778 <HAL_ADC_Start_DMA+0x24>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a63      	ldr	r2, [pc, #396]	; (8002900 <HAL_ADC_Start_DMA+0x1ac>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d106      	bne.n	8002786 <HAL_ADC_Start_DMA+0x32>
 8002778:	4b60      	ldr	r3, [pc, #384]	; (80028fc <HAL_ADC_Start_DMA+0x1a8>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002780:	2b00      	cmp	r3, #0
 8002782:	f040 80b3 	bne.w	80028ec <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_ADC_Start_DMA+0x40>
 8002790:	2302      	movs	r3, #2
 8002792:	e0ae      	b.n	80028f2 <HAL_ADC_Start_DMA+0x19e>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 fa17 	bl	8002bd0 <ADC_Enable>
 80027a2:	4603      	mov	r3, r0
 80027a4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f040 809a 	bne.w	80028e2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a4e      	ldr	r2, [pc, #312]	; (8002900 <HAL_ADC_Start_DMA+0x1ac>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d105      	bne.n	80027d8 <HAL_ADC_Start_DMA+0x84>
 80027cc:	4b4b      	ldr	r3, [pc, #300]	; (80028fc <HAL_ADC_Start_DMA+0x1a8>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d115      	bne.n	8002804 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d026      	beq.n	8002840 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002802:	e01d      	b.n	8002840 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a39      	ldr	r2, [pc, #228]	; (80028fc <HAL_ADC_Start_DMA+0x1a8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d004      	beq.n	8002824 <HAL_ADC_Start_DMA+0xd0>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a38      	ldr	r2, [pc, #224]	; (8002900 <HAL_ADC_Start_DMA+0x1ac>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d10d      	bne.n	8002840 <HAL_ADC_Start_DMA+0xec>
 8002824:	4b35      	ldr	r3, [pc, #212]	; (80028fc <HAL_ADC_Start_DMA+0x1a8>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282c:	2b00      	cmp	r3, #0
 800282e:	d007      	beq.n	8002840 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002838:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d006      	beq.n	800285a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	f023 0206 	bic.w	r2, r3, #6
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	62da      	str	r2, [r3, #44]	; 0x2c
 8002858:	e002      	b.n	8002860 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4a25      	ldr	r2, [pc, #148]	; (8002904 <HAL_ADC_Start_DMA+0x1b0>)
 800286e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	4a24      	ldr	r2, [pc, #144]	; (8002908 <HAL_ADC_Start_DMA+0x1b4>)
 8002876:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	4a23      	ldr	r2, [pc, #140]	; (800290c <HAL_ADC_Start_DMA+0x1b8>)
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0202 	mvn.w	r2, #2
 8002888:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002898:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a18      	ldr	r0, [r3, #32]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	334c      	adds	r3, #76	; 0x4c
 80028a4:	4619      	mov	r1, r3
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f000 fc2d 	bl	8003108 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80028b8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80028bc:	d108      	bne.n	80028d0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80028cc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80028ce:	e00f      	b.n	80028f0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80028de:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80028e0:	e006      	b.n	80028f0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80028ea:	e001      	b.n	80028f0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40012400 	.word	0x40012400
 8002900:	40012800 	.word	0x40012800
 8002904:	08002d07 	.word	0x08002d07
 8002908:	08002d83 	.word	0x08002d83
 800290c:	08002d9f 	.word	0x08002d9f

08002910 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_ADC_Stop_DMA+0x1a>
 8002926:	2302      	movs	r3, #2
 8002928:	e03a      	b.n	80029a0 <HAL_ADC_Stop_DMA+0x90>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f9a6 	bl	8002c84 <ADC_ConversionStop_Disable>
 8002938:	4603      	mov	r3, r0
 800293a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d129      	bne.n	8002996 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002950:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d11a      	bne.n	8002996 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4618      	mov	r0, r3
 8002966:	f000 fc2f 	bl	80031c8 <HAL_DMA_Abort>
 800296a:	4603      	mov	r3, r0
 800296c:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10a      	bne.n	800298a <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	f043 0201 	orr.w	r2, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	629a      	str	r2, [r3, #40]	; 0x28
 8002988:	e005      	b.n	8002996 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 800299e:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr

080029ba <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
	...

080029e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x20>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e0dc      	b.n	8002bba <HAL_ADC_ConfigChannel+0x1da>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b06      	cmp	r3, #6
 8002a0e:	d81c      	bhi.n	8002a4a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	3b05      	subs	r3, #5
 8002a22:	221f      	movs	r2, #31
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	4019      	ands	r1, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	6818      	ldr	r0, [r3, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	3b05      	subs	r3, #5
 8002a3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	635a      	str	r2, [r3, #52]	; 0x34
 8002a48:	e03c      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b0c      	cmp	r3, #12
 8002a50:	d81c      	bhi.n	8002a8c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	3b23      	subs	r3, #35	; 0x23
 8002a64:	221f      	movs	r2, #31
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	4019      	ands	r1, r3
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3b23      	subs	r3, #35	; 0x23
 8002a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
 8002a8a:	e01b      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3b41      	subs	r3, #65	; 0x41
 8002a9e:	221f      	movs	r2, #31
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	4019      	ands	r1, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3b41      	subs	r3, #65	; 0x41
 8002ab8:	fa00 f203 	lsl.w	r2, r0, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b09      	cmp	r3, #9
 8002aca:	d91c      	bls.n	8002b06 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68d9      	ldr	r1, [r3, #12]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	4413      	add	r3, r2
 8002adc:	3b1e      	subs	r3, #30
 8002ade:	2207      	movs	r2, #7
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	4019      	ands	r1, r3
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	6898      	ldr	r0, [r3, #8]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4613      	mov	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	4413      	add	r3, r2
 8002af6:	3b1e      	subs	r3, #30
 8002af8:	fa00 f203 	lsl.w	r2, r0, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	60da      	str	r2, [r3, #12]
 8002b04:	e019      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6919      	ldr	r1, [r3, #16]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4613      	mov	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	2207      	movs	r2, #7
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	4019      	ands	r1, r3
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	6898      	ldr	r0, [r3, #8]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b10      	cmp	r3, #16
 8002b40:	d003      	beq.n	8002b4a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b46:	2b11      	cmp	r3, #17
 8002b48:	d132      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1d      	ldr	r2, [pc, #116]	; (8002bc4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d125      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d126      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002b70:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b10      	cmp	r3, #16
 8002b78:	d11a      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b7a:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a13      	ldr	r2, [pc, #76]	; (8002bcc <HAL_ADC_ConfigChannel+0x1ec>)
 8002b80:	fba2 2303 	umull	r2, r3, r2, r3
 8002b84:	0c9a      	lsrs	r2, r3, #18
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b90:	e002      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f9      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x1b2>
 8002b9e:	e007      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba4:	f043 0220 	orr.w	r2, r3, #32
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	40012400 	.word	0x40012400
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	431bde83 	.word	0x431bde83

08002bd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d040      	beq.n	8002c70 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0201 	orr.w	r2, r2, #1
 8002bfc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bfe:	4b1f      	ldr	r3, [pc, #124]	; (8002c7c <ADC_Enable+0xac>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a1f      	ldr	r2, [pc, #124]	; (8002c80 <ADC_Enable+0xb0>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	0c9b      	lsrs	r3, r3, #18
 8002c0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c0c:	e002      	b.n	8002c14 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f9      	bne.n	8002c0e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c1a:	f7ff fc79 	bl	8002510 <HAL_GetTick>
 8002c1e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c20:	e01f      	b.n	8002c62 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c22:	f7ff fc75 	bl	8002510 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d918      	bls.n	8002c62 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d011      	beq.n	8002c62 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	f043 0210 	orr.w	r2, r3, #16
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	f043 0201 	orr.w	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e007      	b.n	8002c72 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d1d8      	bne.n	8002c22 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000000 	.word	0x20000000
 8002c80:	431bde83 	.word	0x431bde83

08002c84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d12e      	bne.n	8002cfc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cae:	f7ff fc2f 	bl	8002510 <HAL_GetTick>
 8002cb2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cb4:	e01b      	b.n	8002cee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cb6:	f7ff fc2b 	bl	8002510 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d914      	bls.n	8002cee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d10d      	bne.n	8002cee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	f043 0210 	orr.w	r2, r3, #16
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	f043 0201 	orr.w	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e007      	b.n	8002cfe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d0dc      	beq.n	8002cb6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b084      	sub	sp, #16
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d127      	bne.n	8002d70 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d36:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d3a:	d115      	bne.n	8002d68 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d111      	bne.n	8002d68 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d105      	bne.n	8002d68 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	f043 0201 	orr.w	r2, r3, #1
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f7ff fe1d 	bl	80029a8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002d6e:	e004      	b.n	8002d7a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	4798      	blx	r3
}
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7ff fe12 	bl	80029ba <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	f043 0204 	orr.w	r2, r3, #4
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f7ff fe01 	bl	80029cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <__NVIC_SetPriorityGrouping+0x44>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002df0:	4013      	ands	r3, r2
 8002df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e06:	4a04      	ldr	r2, [pc, #16]	; (8002e18 <__NVIC_SetPriorityGrouping+0x44>)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	60d3      	str	r3, [r2, #12]
}
 8002e0c:	bf00      	nop
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	e000ed00 	.word	0xe000ed00

08002e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e20:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <__NVIC_GetPriorityGrouping+0x18>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	0a1b      	lsrs	r3, r3, #8
 8002e26:	f003 0307 	and.w	r3, r3, #7
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	db0b      	blt.n	8002e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	f003 021f 	and.w	r2, r3, #31
 8002e50:	4906      	ldr	r1, [pc, #24]	; (8002e6c <__NVIC_EnableIRQ+0x34>)
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	2001      	movs	r0, #1
 8002e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr
 8002e6c:	e000e100 	.word	0xe000e100

08002e70 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	db12      	blt.n	8002ea8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	f003 021f 	and.w	r2, r3, #31
 8002e88:	490a      	ldr	r1, [pc, #40]	; (8002eb4 <__NVIC_DisableIRQ+0x44>)
 8002e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	2001      	movs	r0, #1
 8002e92:	fa00 f202 	lsl.w	r2, r0, r2
 8002e96:	3320      	adds	r3, #32
 8002e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e9c:	f3bf 8f4f 	dsb	sy
}
 8002ea0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002ea2:	f3bf 8f6f 	isb	sy
}
 8002ea6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000e100 	.word	0xe000e100

08002eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	6039      	str	r1, [r7, #0]
 8002ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	db0a      	blt.n	8002ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	490c      	ldr	r1, [pc, #48]	; (8002f04 <__NVIC_SetPriority+0x4c>)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	0112      	lsls	r2, r2, #4
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	440b      	add	r3, r1
 8002edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ee0:	e00a      	b.n	8002ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	4908      	ldr	r1, [pc, #32]	; (8002f08 <__NVIC_SetPriority+0x50>)
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	3b04      	subs	r3, #4
 8002ef0:	0112      	lsls	r2, r2, #4
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	761a      	strb	r2, [r3, #24]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	e000e100 	.word	0xe000e100
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	; 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f1c3 0307 	rsb	r3, r3, #7
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	bf28      	it	cs
 8002f2a:	2304      	movcs	r3, #4
 8002f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3304      	adds	r3, #4
 8002f32:	2b06      	cmp	r3, #6
 8002f34:	d902      	bls.n	8002f3c <NVIC_EncodePriority+0x30>
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3b03      	subs	r3, #3
 8002f3a:	e000      	b.n	8002f3e <NVIC_EncodePriority+0x32>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	f04f 32ff 	mov.w	r2, #4294967295
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43da      	mvns	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	401a      	ands	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f54:	f04f 31ff 	mov.w	r1, #4294967295
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	43d9      	mvns	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f64:	4313      	orrs	r3, r2
         );
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3724      	adds	r7, #36	; 0x24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f80:	d301      	bcc.n	8002f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f82:	2301      	movs	r3, #1
 8002f84:	e00f      	b.n	8002fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f86:	4a0a      	ldr	r2, [pc, #40]	; (8002fb0 <SysTick_Config+0x40>)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f8e:	210f      	movs	r1, #15
 8002f90:	f04f 30ff 	mov.w	r0, #4294967295
 8002f94:	f7ff ff90 	bl	8002eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <SysTick_Config+0x40>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f9e:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <SysTick_Config+0x40>)
 8002fa0:	2207      	movs	r2, #7
 8002fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	e000e010 	.word	0xe000e010

08002fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff ff09 	bl	8002dd4 <__NVIC_SetPriorityGrouping>
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b086      	sub	sp, #24
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fdc:	f7ff ff1e 	bl	8002e1c <__NVIC_GetPriorityGrouping>
 8002fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	6978      	ldr	r0, [r7, #20]
 8002fe8:	f7ff ff90 	bl	8002f0c <NVIC_EncodePriority>
 8002fec:	4602      	mov	r2, r0
 8002fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff ff5f 	bl	8002eb8 <__NVIC_SetPriority>
}
 8002ffa:	bf00      	nop
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	4603      	mov	r3, r0
 800300a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800300c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff ff11 	bl	8002e38 <__NVIC_EnableIRQ>
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	4603      	mov	r3, r0
 8003026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff1f 	bl	8002e70 <__NVIC_DisableIRQ>
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff ff94 	bl	8002f70 <SysTick_Config>
 8003048:	4603      	mov	r3, r0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e043      	b.n	80030f2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	4b22      	ldr	r3, [pc, #136]	; (80030fc <HAL_DMA_Init+0xa8>)
 8003072:	4413      	add	r3, r2
 8003074:	4a22      	ldr	r2, [pc, #136]	; (8003100 <HAL_DMA_Init+0xac>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	091b      	lsrs	r3, r3, #4
 800307c:	009a      	lsls	r2, r3, #2
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a1f      	ldr	r2, [pc, #124]	; (8003104 <HAL_DMA_Init+0xb0>)
 8003086:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800309e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80030a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80030ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr
 80030fc:	bffdfff8 	.word	0xbffdfff8
 8003100:	cccccccd 	.word	0xcccccccd
 8003104:	40020000 	.word	0x40020000

08003108 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_DMA_Start_IT+0x20>
 8003124:	2302      	movs	r3, #2
 8003126:	e04b      	b.n	80031c0 <HAL_DMA_Start_IT+0xb8>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b01      	cmp	r3, #1
 800313a:	d13a      	bne.n	80031b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f973 	bl	800344c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 020e 	orr.w	r2, r2, #14
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	e00f      	b.n	80031a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0204 	bic.w	r2, r2, #4
 800318e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 020a 	orr.w	r2, r2, #10
 800319e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	e005      	b.n	80031be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
 80031bc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80031be:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d008      	beq.n	80031f2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2204      	movs	r2, #4
 80031e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e020      	b.n	8003234 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 020e 	bic.w	r2, r2, #14
 8003200:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321a:	2101      	movs	r1, #1
 800321c:	fa01 f202 	lsl.w	r2, r1, r2
 8003220:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003232:	7bfb      	ldrb	r3, [r7, #15]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr
	...

08003240 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	2204      	movs	r2, #4
 800325e:	409a      	lsls	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4013      	ands	r3, r2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d04f      	beq.n	8003308 <HAL_DMA_IRQHandler+0xc8>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d04a      	beq.n	8003308 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b00      	cmp	r3, #0
 800327e:	d107      	bne.n	8003290 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0204 	bic.w	r2, r2, #4
 800328e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a66      	ldr	r2, [pc, #408]	; (8003430 <HAL_DMA_IRQHandler+0x1f0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d029      	beq.n	80032ee <HAL_DMA_IRQHandler+0xae>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a65      	ldr	r2, [pc, #404]	; (8003434 <HAL_DMA_IRQHandler+0x1f4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d022      	beq.n	80032ea <HAL_DMA_IRQHandler+0xaa>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a63      	ldr	r2, [pc, #396]	; (8003438 <HAL_DMA_IRQHandler+0x1f8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d01a      	beq.n	80032e4 <HAL_DMA_IRQHandler+0xa4>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a62      	ldr	r2, [pc, #392]	; (800343c <HAL_DMA_IRQHandler+0x1fc>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d012      	beq.n	80032de <HAL_DMA_IRQHandler+0x9e>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a60      	ldr	r2, [pc, #384]	; (8003440 <HAL_DMA_IRQHandler+0x200>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00a      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x98>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a5f      	ldr	r2, [pc, #380]	; (8003444 <HAL_DMA_IRQHandler+0x204>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d102      	bne.n	80032d2 <HAL_DMA_IRQHandler+0x92>
 80032cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032d0:	e00e      	b.n	80032f0 <HAL_DMA_IRQHandler+0xb0>
 80032d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80032d6:	e00b      	b.n	80032f0 <HAL_DMA_IRQHandler+0xb0>
 80032d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032dc:	e008      	b.n	80032f0 <HAL_DMA_IRQHandler+0xb0>
 80032de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032e2:	e005      	b.n	80032f0 <HAL_DMA_IRQHandler+0xb0>
 80032e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032e8:	e002      	b.n	80032f0 <HAL_DMA_IRQHandler+0xb0>
 80032ea:	2340      	movs	r3, #64	; 0x40
 80032ec:	e000      	b.n	80032f0 <HAL_DMA_IRQHandler+0xb0>
 80032ee:	2304      	movs	r3, #4
 80032f0:	4a55      	ldr	r2, [pc, #340]	; (8003448 <HAL_DMA_IRQHandler+0x208>)
 80032f2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 8094 	beq.w	8003426 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003306:	e08e      	b.n	8003426 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	2202      	movs	r2, #2
 800330e:	409a      	lsls	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d056      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x186>
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d051      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10b      	bne.n	8003348 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 020a 	bic.w	r2, r2, #10
 800333e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a38      	ldr	r2, [pc, #224]	; (8003430 <HAL_DMA_IRQHandler+0x1f0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d029      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x166>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a37      	ldr	r2, [pc, #220]	; (8003434 <HAL_DMA_IRQHandler+0x1f4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d022      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x162>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a35      	ldr	r2, [pc, #212]	; (8003438 <HAL_DMA_IRQHandler+0x1f8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d01a      	beq.n	800339c <HAL_DMA_IRQHandler+0x15c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a34      	ldr	r2, [pc, #208]	; (800343c <HAL_DMA_IRQHandler+0x1fc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d012      	beq.n	8003396 <HAL_DMA_IRQHandler+0x156>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a32      	ldr	r2, [pc, #200]	; (8003440 <HAL_DMA_IRQHandler+0x200>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00a      	beq.n	8003390 <HAL_DMA_IRQHandler+0x150>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a31      	ldr	r2, [pc, #196]	; (8003444 <HAL_DMA_IRQHandler+0x204>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d102      	bne.n	800338a <HAL_DMA_IRQHandler+0x14a>
 8003384:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003388:	e00e      	b.n	80033a8 <HAL_DMA_IRQHandler+0x168>
 800338a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800338e:	e00b      	b.n	80033a8 <HAL_DMA_IRQHandler+0x168>
 8003390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003394:	e008      	b.n	80033a8 <HAL_DMA_IRQHandler+0x168>
 8003396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800339a:	e005      	b.n	80033a8 <HAL_DMA_IRQHandler+0x168>
 800339c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033a0:	e002      	b.n	80033a8 <HAL_DMA_IRQHandler+0x168>
 80033a2:	2320      	movs	r3, #32
 80033a4:	e000      	b.n	80033a8 <HAL_DMA_IRQHandler+0x168>
 80033a6:	2302      	movs	r3, #2
 80033a8:	4a27      	ldr	r2, [pc, #156]	; (8003448 <HAL_DMA_IRQHandler+0x208>)
 80033aa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d034      	beq.n	8003426 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033c4:	e02f      	b.n	8003426 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2208      	movs	r2, #8
 80033cc:	409a      	lsls	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d028      	beq.n	8003428 <HAL_DMA_IRQHandler+0x1e8>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d023      	beq.n	8003428 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 020e 	bic.w	r2, r2, #14
 80033ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f8:	2101      	movs	r1, #1
 80033fa:	fa01 f202 	lsl.w	r2, r1, r2
 80033fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	2b00      	cmp	r3, #0
 800341c:	d004      	beq.n	8003428 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	4798      	blx	r3
    }
  }
  return;
 8003426:	bf00      	nop
 8003428:	bf00      	nop
}
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40020008 	.word	0x40020008
 8003434:	4002001c 	.word	0x4002001c
 8003438:	40020030 	.word	0x40020030
 800343c:	40020044 	.word	0x40020044
 8003440:	40020058 	.word	0x40020058
 8003444:	4002006c 	.word	0x4002006c
 8003448:	40020000 	.word	0x40020000

0800344c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003462:	2101      	movs	r1, #1
 8003464:	fa01 f202 	lsl.w	r2, r1, r2
 8003468:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b10      	cmp	r3, #16
 8003478:	d108      	bne.n	800348c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800348a:	e007      	b.n	800349c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	60da      	str	r2, [r3, #12]
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr
	...

080034a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b08b      	sub	sp, #44	; 0x2c
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034b2:	2300      	movs	r3, #0
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80034b6:	2300      	movs	r3, #0
 80034b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ba:	e169      	b.n	8003790 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80034bc:	2201      	movs	r2, #1
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	f040 8158 	bne.w	800378a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	4a9a      	ldr	r2, [pc, #616]	; (8003748 <HAL_GPIO_Init+0x2a0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d05e      	beq.n	80035a2 <HAL_GPIO_Init+0xfa>
 80034e4:	4a98      	ldr	r2, [pc, #608]	; (8003748 <HAL_GPIO_Init+0x2a0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d875      	bhi.n	80035d6 <HAL_GPIO_Init+0x12e>
 80034ea:	4a98      	ldr	r2, [pc, #608]	; (800374c <HAL_GPIO_Init+0x2a4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d058      	beq.n	80035a2 <HAL_GPIO_Init+0xfa>
 80034f0:	4a96      	ldr	r2, [pc, #600]	; (800374c <HAL_GPIO_Init+0x2a4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d86f      	bhi.n	80035d6 <HAL_GPIO_Init+0x12e>
 80034f6:	4a96      	ldr	r2, [pc, #600]	; (8003750 <HAL_GPIO_Init+0x2a8>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d052      	beq.n	80035a2 <HAL_GPIO_Init+0xfa>
 80034fc:	4a94      	ldr	r2, [pc, #592]	; (8003750 <HAL_GPIO_Init+0x2a8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d869      	bhi.n	80035d6 <HAL_GPIO_Init+0x12e>
 8003502:	4a94      	ldr	r2, [pc, #592]	; (8003754 <HAL_GPIO_Init+0x2ac>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d04c      	beq.n	80035a2 <HAL_GPIO_Init+0xfa>
 8003508:	4a92      	ldr	r2, [pc, #584]	; (8003754 <HAL_GPIO_Init+0x2ac>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d863      	bhi.n	80035d6 <HAL_GPIO_Init+0x12e>
 800350e:	4a92      	ldr	r2, [pc, #584]	; (8003758 <HAL_GPIO_Init+0x2b0>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d046      	beq.n	80035a2 <HAL_GPIO_Init+0xfa>
 8003514:	4a90      	ldr	r2, [pc, #576]	; (8003758 <HAL_GPIO_Init+0x2b0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d85d      	bhi.n	80035d6 <HAL_GPIO_Init+0x12e>
 800351a:	2b12      	cmp	r3, #18
 800351c:	d82a      	bhi.n	8003574 <HAL_GPIO_Init+0xcc>
 800351e:	2b12      	cmp	r3, #18
 8003520:	d859      	bhi.n	80035d6 <HAL_GPIO_Init+0x12e>
 8003522:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <HAL_GPIO_Init+0x80>)
 8003524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003528:	080035a3 	.word	0x080035a3
 800352c:	0800357d 	.word	0x0800357d
 8003530:	0800358f 	.word	0x0800358f
 8003534:	080035d1 	.word	0x080035d1
 8003538:	080035d7 	.word	0x080035d7
 800353c:	080035d7 	.word	0x080035d7
 8003540:	080035d7 	.word	0x080035d7
 8003544:	080035d7 	.word	0x080035d7
 8003548:	080035d7 	.word	0x080035d7
 800354c:	080035d7 	.word	0x080035d7
 8003550:	080035d7 	.word	0x080035d7
 8003554:	080035d7 	.word	0x080035d7
 8003558:	080035d7 	.word	0x080035d7
 800355c:	080035d7 	.word	0x080035d7
 8003560:	080035d7 	.word	0x080035d7
 8003564:	080035d7 	.word	0x080035d7
 8003568:	080035d7 	.word	0x080035d7
 800356c:	08003585 	.word	0x08003585
 8003570:	08003599 	.word	0x08003599
 8003574:	4a79      	ldr	r2, [pc, #484]	; (800375c <HAL_GPIO_Init+0x2b4>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800357a:	e02c      	b.n	80035d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	623b      	str	r3, [r7, #32]
          break;
 8003582:	e029      	b.n	80035d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	3304      	adds	r3, #4
 800358a:	623b      	str	r3, [r7, #32]
          break;
 800358c:	e024      	b.n	80035d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	3308      	adds	r3, #8
 8003594:	623b      	str	r3, [r7, #32]
          break;
 8003596:	e01f      	b.n	80035d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	330c      	adds	r3, #12
 800359e:	623b      	str	r3, [r7, #32]
          break;
 80035a0:	e01a      	b.n	80035d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035aa:	2304      	movs	r3, #4
 80035ac:	623b      	str	r3, [r7, #32]
          break;
 80035ae:	e013      	b.n	80035d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d105      	bne.n	80035c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035b8:	2308      	movs	r3, #8
 80035ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	69fa      	ldr	r2, [r7, #28]
 80035c0:	611a      	str	r2, [r3, #16]
          break;
 80035c2:	e009      	b.n	80035d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035c4:	2308      	movs	r3, #8
 80035c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	615a      	str	r2, [r3, #20]
          break;
 80035ce:	e003      	b.n	80035d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035d0:	2300      	movs	r3, #0
 80035d2:	623b      	str	r3, [r7, #32]
          break;
 80035d4:	e000      	b.n	80035d8 <HAL_GPIO_Init+0x130>
          break;
 80035d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2bff      	cmp	r3, #255	; 0xff
 80035dc:	d801      	bhi.n	80035e2 <HAL_GPIO_Init+0x13a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	e001      	b.n	80035e6 <HAL_GPIO_Init+0x13e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3304      	adds	r3, #4
 80035e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2bff      	cmp	r3, #255	; 0xff
 80035ec:	d802      	bhi.n	80035f4 <HAL_GPIO_Init+0x14c>
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	e002      	b.n	80035fa <HAL_GPIO_Init+0x152>
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	3b08      	subs	r3, #8
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	210f      	movs	r1, #15
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	fa01 f303 	lsl.w	r3, r1, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	401a      	ands	r2, r3
 800360c:	6a39      	ldr	r1, [r7, #32]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	fa01 f303 	lsl.w	r3, r1, r3
 8003614:	431a      	orrs	r2, r3
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 80b1 	beq.w	800378a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003628:	4b4d      	ldr	r3, [pc, #308]	; (8003760 <HAL_GPIO_Init+0x2b8>)
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	4a4c      	ldr	r2, [pc, #304]	; (8003760 <HAL_GPIO_Init+0x2b8>)
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	6193      	str	r3, [r2, #24]
 8003634:	4b4a      	ldr	r3, [pc, #296]	; (8003760 <HAL_GPIO_Init+0x2b8>)
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003640:	4a48      	ldr	r2, [pc, #288]	; (8003764 <HAL_GPIO_Init+0x2bc>)
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	089b      	lsrs	r3, r3, #2
 8003646:	3302      	adds	r3, #2
 8003648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800364c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	220f      	movs	r2, #15
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4013      	ands	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a40      	ldr	r2, [pc, #256]	; (8003768 <HAL_GPIO_Init+0x2c0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d013      	beq.n	8003694 <HAL_GPIO_Init+0x1ec>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a3f      	ldr	r2, [pc, #252]	; (800376c <HAL_GPIO_Init+0x2c4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00d      	beq.n	8003690 <HAL_GPIO_Init+0x1e8>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a3e      	ldr	r2, [pc, #248]	; (8003770 <HAL_GPIO_Init+0x2c8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d007      	beq.n	800368c <HAL_GPIO_Init+0x1e4>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a3d      	ldr	r2, [pc, #244]	; (8003774 <HAL_GPIO_Init+0x2cc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d101      	bne.n	8003688 <HAL_GPIO_Init+0x1e0>
 8003684:	2303      	movs	r3, #3
 8003686:	e006      	b.n	8003696 <HAL_GPIO_Init+0x1ee>
 8003688:	2304      	movs	r3, #4
 800368a:	e004      	b.n	8003696 <HAL_GPIO_Init+0x1ee>
 800368c:	2302      	movs	r3, #2
 800368e:	e002      	b.n	8003696 <HAL_GPIO_Init+0x1ee>
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <HAL_GPIO_Init+0x1ee>
 8003694:	2300      	movs	r3, #0
 8003696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003698:	f002 0203 	and.w	r2, r2, #3
 800369c:	0092      	lsls	r2, r2, #2
 800369e:	4093      	lsls	r3, r2
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036a6:	492f      	ldr	r1, [pc, #188]	; (8003764 <HAL_GPIO_Init+0x2bc>)
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	089b      	lsrs	r3, r3, #2
 80036ac:	3302      	adds	r3, #2
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d006      	beq.n	80036ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036c0:	4b2d      	ldr	r3, [pc, #180]	; (8003778 <HAL_GPIO_Init+0x2d0>)
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	492c      	ldr	r1, [pc, #176]	; (8003778 <HAL_GPIO_Init+0x2d0>)
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	608b      	str	r3, [r1, #8]
 80036cc:	e006      	b.n	80036dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036ce:	4b2a      	ldr	r3, [pc, #168]	; (8003778 <HAL_GPIO_Init+0x2d0>)
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	43db      	mvns	r3, r3
 80036d6:	4928      	ldr	r1, [pc, #160]	; (8003778 <HAL_GPIO_Init+0x2d0>)
 80036d8:	4013      	ands	r3, r2
 80036da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d006      	beq.n	80036f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036e8:	4b23      	ldr	r3, [pc, #140]	; (8003778 <HAL_GPIO_Init+0x2d0>)
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	4922      	ldr	r1, [pc, #136]	; (8003778 <HAL_GPIO_Init+0x2d0>)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60cb      	str	r3, [r1, #12]
 80036f4:	e006      	b.n	8003704 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036f6:	4b20      	ldr	r3, [pc, #128]	; (8003778 <HAL_GPIO_Init+0x2d0>)
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	43db      	mvns	r3, r3
 80036fe:	491e      	ldr	r1, [pc, #120]	; (8003778 <HAL_GPIO_Init+0x2d0>)
 8003700:	4013      	ands	r3, r2
 8003702:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d006      	beq.n	800371e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003710:	4b19      	ldr	r3, [pc, #100]	; (8003778 <HAL_GPIO_Init+0x2d0>)
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	4918      	ldr	r1, [pc, #96]	; (8003778 <HAL_GPIO_Init+0x2d0>)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	4313      	orrs	r3, r2
 800371a:	604b      	str	r3, [r1, #4]
 800371c:	e006      	b.n	800372c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800371e:	4b16      	ldr	r3, [pc, #88]	; (8003778 <HAL_GPIO_Init+0x2d0>)
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	43db      	mvns	r3, r3
 8003726:	4914      	ldr	r1, [pc, #80]	; (8003778 <HAL_GPIO_Init+0x2d0>)
 8003728:	4013      	ands	r3, r2
 800372a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d021      	beq.n	800377c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003738:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <HAL_GPIO_Init+0x2d0>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	490e      	ldr	r1, [pc, #56]	; (8003778 <HAL_GPIO_Init+0x2d0>)
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	4313      	orrs	r3, r2
 8003742:	600b      	str	r3, [r1, #0]
 8003744:	e021      	b.n	800378a <HAL_GPIO_Init+0x2e2>
 8003746:	bf00      	nop
 8003748:	10320000 	.word	0x10320000
 800374c:	10310000 	.word	0x10310000
 8003750:	10220000 	.word	0x10220000
 8003754:	10210000 	.word	0x10210000
 8003758:	10120000 	.word	0x10120000
 800375c:	10110000 	.word	0x10110000
 8003760:	40021000 	.word	0x40021000
 8003764:	40010000 	.word	0x40010000
 8003768:	40010800 	.word	0x40010800
 800376c:	40010c00 	.word	0x40010c00
 8003770:	40011000 	.word	0x40011000
 8003774:	40011400 	.word	0x40011400
 8003778:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800377c:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <HAL_GPIO_Init+0x304>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	43db      	mvns	r3, r3
 8003784:	4909      	ldr	r1, [pc, #36]	; (80037ac <HAL_GPIO_Init+0x304>)
 8003786:	4013      	ands	r3, r2
 8003788:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	3301      	adds	r3, #1
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	fa22 f303 	lsr.w	r3, r2, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	f47f ae8e 	bne.w	80034bc <HAL_GPIO_Init+0x14>
  }
}
 80037a0:	bf00      	nop
 80037a2:	bf00      	nop
 80037a4:	372c      	adds	r7, #44	; 0x2c
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr
 80037ac:	40010400 	.word	0x40010400

080037b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	887b      	ldrh	r3, [r7, #2]
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
 80037cc:	e001      	b.n	80037d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037ce:	2300      	movs	r3, #0
 80037d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr

080037de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	807b      	strh	r3, [r7, #2]
 80037ea:	4613      	mov	r3, r2
 80037ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037ee:	787b      	ldrb	r3, [r7, #1]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037f4:	887a      	ldrh	r2, [r7, #2]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037fa:	e003      	b.n	8003804 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	041a      	lsls	r2, r3, #16
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	611a      	str	r2, [r3, #16]
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr
	...

08003810 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800381a:	4b08      	ldr	r3, [pc, #32]	; (800383c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	88fb      	ldrh	r3, [r7, #6]
 8003820:	4013      	ands	r3, r2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d006      	beq.n	8003834 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003826:	4a05      	ldr	r2, [pc, #20]	; (800383c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003828:	88fb      	ldrh	r3, [r7, #6]
 800382a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800382c:	88fb      	ldrh	r3, [r7, #6]
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe fc5c 	bl	80020ec <HAL_GPIO_EXTI_Callback>
  }
}
 8003834:	bf00      	nop
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40010400 	.word	0x40010400

08003840 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003846:	2201      	movs	r2, #1
 8003848:	601a      	str	r2, [r3, #0]
}
 800384a:	bf00      	nop
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	420e0020 	.word	0x420e0020

08003858 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003864:	4b09      	ldr	r3, [pc, #36]	; (800388c <HAL_PWR_EnterSLEEPMode+0x34>)
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	4a08      	ldr	r2, [pc, #32]	; (800388c <HAL_PWR_EnterSLEEPMode+0x34>)
 800386a:	f023 0304 	bic.w	r3, r3, #4
 800386e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003876:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8003878:	e002      	b.n	8003880 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800387a:	bf40      	sev
    __WFE();
 800387c:	bf20      	wfe
    __WFE();
 800387e:	bf20      	wfe
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	e000ed00 	.word	0xe000ed00

08003890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e272      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 8087 	beq.w	80039be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038b0:	4b92      	ldr	r3, [pc, #584]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 030c 	and.w	r3, r3, #12
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d00c      	beq.n	80038d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038bc:	4b8f      	ldr	r3, [pc, #572]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 030c 	and.w	r3, r3, #12
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d112      	bne.n	80038ee <HAL_RCC_OscConfig+0x5e>
 80038c8:	4b8c      	ldr	r3, [pc, #560]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d4:	d10b      	bne.n	80038ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d6:	4b89      	ldr	r3, [pc, #548]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d06c      	beq.n	80039bc <HAL_RCC_OscConfig+0x12c>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d168      	bne.n	80039bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e24c      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f6:	d106      	bne.n	8003906 <HAL_RCC_OscConfig+0x76>
 80038f8:	4b80      	ldr	r3, [pc, #512]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a7f      	ldr	r2, [pc, #508]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80038fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	e02e      	b.n	8003964 <HAL_RCC_OscConfig+0xd4>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10c      	bne.n	8003928 <HAL_RCC_OscConfig+0x98>
 800390e:	4b7b      	ldr	r3, [pc, #492]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a7a      	ldr	r2, [pc, #488]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	4b78      	ldr	r3, [pc, #480]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a77      	ldr	r2, [pc, #476]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	e01d      	b.n	8003964 <HAL_RCC_OscConfig+0xd4>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003930:	d10c      	bne.n	800394c <HAL_RCC_OscConfig+0xbc>
 8003932:	4b72      	ldr	r3, [pc, #456]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a71      	ldr	r2, [pc, #452]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	4b6f      	ldr	r3, [pc, #444]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a6e      	ldr	r2, [pc, #440]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	e00b      	b.n	8003964 <HAL_RCC_OscConfig+0xd4>
 800394c:	4b6b      	ldr	r3, [pc, #428]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a6a      	ldr	r2, [pc, #424]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	4b68      	ldr	r3, [pc, #416]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a67      	ldr	r2, [pc, #412]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 800395e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003962:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d013      	beq.n	8003994 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396c:	f7fe fdd0 	bl	8002510 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003974:	f7fe fdcc 	bl	8002510 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	; 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e200      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	4b5d      	ldr	r3, [pc, #372]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0xe4>
 8003992:	e014      	b.n	80039be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003994:	f7fe fdbc 	bl	8002510 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800399c:	f7fe fdb8 	bl	8002510 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	; 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e1ec      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ae:	4b53      	ldr	r3, [pc, #332]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x10c>
 80039ba:	e000      	b.n	80039be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d063      	beq.n	8003a92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ca:	4b4c      	ldr	r3, [pc, #304]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039d6:	4b49      	ldr	r3, [pc, #292]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d11c      	bne.n	8003a1c <HAL_RCC_OscConfig+0x18c>
 80039e2:	4b46      	ldr	r3, [pc, #280]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d116      	bne.n	8003a1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ee:	4b43      	ldr	r3, [pc, #268]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_RCC_OscConfig+0x176>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d001      	beq.n	8003a06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e1c0      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a06:	4b3d      	ldr	r3, [pc, #244]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4939      	ldr	r1, [pc, #228]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1a:	e03a      	b.n	8003a92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d020      	beq.n	8003a66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a24:	4b36      	ldr	r3, [pc, #216]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2a:	f7fe fd71 	bl	8002510 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a32:	f7fe fd6d 	bl	8002510 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e1a1      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a44:	4b2d      	ldr	r3, [pc, #180]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a50:	4b2a      	ldr	r3, [pc, #168]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4927      	ldr	r1, [pc, #156]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	600b      	str	r3, [r1, #0]
 8003a64:	e015      	b.n	8003a92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a66:	4b26      	ldr	r3, [pc, #152]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6c:	f7fe fd50 	bl	8002510 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a74:	f7fe fd4c 	bl	8002510 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e180      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a86:	4b1d      	ldr	r3, [pc, #116]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d03a      	beq.n	8003b14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d019      	beq.n	8003ada <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa6:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <HAL_RCC_OscConfig+0x274>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aac:	f7fe fd30 	bl	8002510 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab4:	f7fe fd2c 	bl	8002510 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e160      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac6:	4b0d      	ldr	r3, [pc, #52]	; (8003afc <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f000 faba 	bl	800404c <RCC_Delay>
 8003ad8:	e01c      	b.n	8003b14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ada:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <HAL_RCC_OscConfig+0x274>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae0:	f7fe fd16 	bl	8002510 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae6:	e00f      	b.n	8003b08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae8:	f7fe fd12 	bl	8002510 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d908      	bls.n	8003b08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e146      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
 8003b00:	42420000 	.word	0x42420000
 8003b04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b08:	4b92      	ldr	r3, [pc, #584]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e9      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 80a6 	beq.w	8003c6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b22:	2300      	movs	r3, #0
 8003b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b26:	4b8b      	ldr	r3, [pc, #556]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10d      	bne.n	8003b4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	4b88      	ldr	r3, [pc, #544]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	4a87      	ldr	r2, [pc, #540]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	61d3      	str	r3, [r2, #28]
 8003b3e:	4b85      	ldr	r3, [pc, #532]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4e:	4b82      	ldr	r3, [pc, #520]	; (8003d58 <HAL_RCC_OscConfig+0x4c8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d118      	bne.n	8003b8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b5a:	4b7f      	ldr	r3, [pc, #508]	; (8003d58 <HAL_RCC_OscConfig+0x4c8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a7e      	ldr	r2, [pc, #504]	; (8003d58 <HAL_RCC_OscConfig+0x4c8>)
 8003b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b66:	f7fe fcd3 	bl	8002510 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6e:	f7fe fccf 	bl	8002510 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b64      	cmp	r3, #100	; 0x64
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e103      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b80:	4b75      	ldr	r3, [pc, #468]	; (8003d58 <HAL_RCC_OscConfig+0x4c8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d106      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x312>
 8003b94:	4b6f      	ldr	r3, [pc, #444]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	4a6e      	ldr	r2, [pc, #440]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	6213      	str	r3, [r2, #32]
 8003ba0:	e02d      	b.n	8003bfe <HAL_RCC_OscConfig+0x36e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x334>
 8003baa:	4b6a      	ldr	r3, [pc, #424]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	4a69      	ldr	r2, [pc, #420]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bb0:	f023 0301 	bic.w	r3, r3, #1
 8003bb4:	6213      	str	r3, [r2, #32]
 8003bb6:	4b67      	ldr	r3, [pc, #412]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	4a66      	ldr	r2, [pc, #408]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bbc:	f023 0304 	bic.w	r3, r3, #4
 8003bc0:	6213      	str	r3, [r2, #32]
 8003bc2:	e01c      	b.n	8003bfe <HAL_RCC_OscConfig+0x36e>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	2b05      	cmp	r3, #5
 8003bca:	d10c      	bne.n	8003be6 <HAL_RCC_OscConfig+0x356>
 8003bcc:	4b61      	ldr	r3, [pc, #388]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	4a60      	ldr	r2, [pc, #384]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bd2:	f043 0304 	orr.w	r3, r3, #4
 8003bd6:	6213      	str	r3, [r2, #32]
 8003bd8:	4b5e      	ldr	r3, [pc, #376]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	4a5d      	ldr	r2, [pc, #372]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	6213      	str	r3, [r2, #32]
 8003be4:	e00b      	b.n	8003bfe <HAL_RCC_OscConfig+0x36e>
 8003be6:	4b5b      	ldr	r3, [pc, #364]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	4a5a      	ldr	r2, [pc, #360]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bec:	f023 0301 	bic.w	r3, r3, #1
 8003bf0:	6213      	str	r3, [r2, #32]
 8003bf2:	4b58      	ldr	r3, [pc, #352]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	4a57      	ldr	r2, [pc, #348]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003bf8:	f023 0304 	bic.w	r3, r3, #4
 8003bfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d015      	beq.n	8003c32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c06:	f7fe fc83 	bl	8002510 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0c:	e00a      	b.n	8003c24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0e:	f7fe fc7f 	bl	8002510 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e0b1      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c24:	4b4b      	ldr	r3, [pc, #300]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ee      	beq.n	8003c0e <HAL_RCC_OscConfig+0x37e>
 8003c30:	e014      	b.n	8003c5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c32:	f7fe fc6d 	bl	8002510 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c38:	e00a      	b.n	8003c50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fe fc69 	bl	8002510 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e09b      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c50:	4b40      	ldr	r3, [pc, #256]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1ee      	bne.n	8003c3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d105      	bne.n	8003c6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c62:	4b3c      	ldr	r3, [pc, #240]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	4a3b      	ldr	r2, [pc, #236]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 8087 	beq.w	8003d86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c78:	4b36      	ldr	r3, [pc, #216]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 030c 	and.w	r3, r3, #12
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d061      	beq.n	8003d48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d146      	bne.n	8003d1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8c:	4b33      	ldr	r3, [pc, #204]	; (8003d5c <HAL_RCC_OscConfig+0x4cc>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c92:	f7fe fc3d 	bl	8002510 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c9a:	f7fe fc39 	bl	8002510 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e06d      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cac:	4b29      	ldr	r3, [pc, #164]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1f0      	bne.n	8003c9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc0:	d108      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cc2:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	4921      	ldr	r1, [pc, #132]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cd4:	4b1f      	ldr	r3, [pc, #124]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a19      	ldr	r1, [r3, #32]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	491b      	ldr	r1, [pc, #108]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cec:	4b1b      	ldr	r3, [pc, #108]	; (8003d5c <HAL_RCC_OscConfig+0x4cc>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf2:	f7fe fc0d 	bl	8002510 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfa:	f7fe fc09 	bl	8002510 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e03d      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x46a>
 8003d18:	e035      	b.n	8003d86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1a:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <HAL_RCC_OscConfig+0x4cc>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d20:	f7fe fbf6 	bl	8002510 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d28:	f7fe fbf2 	bl	8002510 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e026      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d3a:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <HAL_RCC_OscConfig+0x4c4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0x498>
 8003d46:	e01e      	b.n	8003d86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d107      	bne.n	8003d60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e019      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
 8003d54:	40021000 	.word	0x40021000
 8003d58:	40007000 	.word	0x40007000
 8003d5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_RCC_OscConfig+0x500>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d106      	bne.n	8003d82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d001      	beq.n	8003d86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40021000 	.word	0x40021000

08003d94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0d0      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003da8:	4b6a      	ldr	r3, [pc, #424]	; (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d910      	bls.n	8003dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db6:	4b67      	ldr	r3, [pc, #412]	; (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 0207 	bic.w	r2, r3, #7
 8003dbe:	4965      	ldr	r1, [pc, #404]	; (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	4b63      	ldr	r3, [pc, #396]	; (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0b8      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d020      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003df0:	4b59      	ldr	r3, [pc, #356]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4a58      	ldr	r2, [pc, #352]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003df6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003dfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e08:	4b53      	ldr	r3, [pc, #332]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	4a52      	ldr	r2, [pc, #328]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e14:	4b50      	ldr	r3, [pc, #320]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	494d      	ldr	r1, [pc, #308]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d040      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d107      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3a:	4b47      	ldr	r3, [pc, #284]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d115      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e07f      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d107      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e52:	4b41      	ldr	r3, [pc, #260]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e073      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e62:	4b3d      	ldr	r3, [pc, #244]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e06b      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e72:	4b39      	ldr	r3, [pc, #228]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f023 0203 	bic.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	4936      	ldr	r1, [pc, #216]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e84:	f7fe fb44 	bl	8002510 <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e8c:	f7fe fb40 	bl	8002510 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e053      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	4b2d      	ldr	r3, [pc, #180]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f003 020c 	and.w	r2, r3, #12
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d1eb      	bne.n	8003e8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003eb4:	4b27      	ldr	r3, [pc, #156]	; (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d210      	bcs.n	8003ee4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec2:	4b24      	ldr	r3, [pc, #144]	; (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f023 0207 	bic.w	r2, r3, #7
 8003eca:	4922      	ldr	r1, [pc, #136]	; (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b20      	ldr	r3, [pc, #128]	; (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e032      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef0:	4b19      	ldr	r3, [pc, #100]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4916      	ldr	r1, [pc, #88]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f0e:	4b12      	ldr	r3, [pc, #72]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	490e      	ldr	r1, [pc, #56]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f22:	f000 f821 	bl	8003f68 <HAL_RCC_GetSysClockFreq>
 8003f26:	4602      	mov	r2, r0
 8003f28:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	490a      	ldr	r1, [pc, #40]	; (8003f5c <HAL_RCC_ClockConfig+0x1c8>)
 8003f34:	5ccb      	ldrb	r3, [r1, r3]
 8003f36:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3a:	4a09      	ldr	r2, [pc, #36]	; (8003f60 <HAL_RCC_ClockConfig+0x1cc>)
 8003f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f3e:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <HAL_RCC_ClockConfig+0x1d0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe faa2 	bl	800248c <HAL_InitTick>

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40022000 	.word	0x40022000
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	08006178 	.word	0x08006178
 8003f60:	20000000 	.word	0x20000000
 8003f64:	20000004 	.word	0x20000004

08003f68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	2300      	movs	r3, #0
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	2300      	movs	r3, #0
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f82:	4b1e      	ldr	r3, [pc, #120]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x94>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d002      	beq.n	8003f98 <HAL_RCC_GetSysClockFreq+0x30>
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d003      	beq.n	8003f9e <HAL_RCC_GetSysClockFreq+0x36>
 8003f96:	e027      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f98:	4b19      	ldr	r3, [pc, #100]	; (8004000 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f9a:	613b      	str	r3, [r7, #16]
      break;
 8003f9c:	e027      	b.n	8003fee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	0c9b      	lsrs	r3, r3, #18
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	4a17      	ldr	r2, [pc, #92]	; (8004004 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fa8:	5cd3      	ldrb	r3, [r2, r3]
 8003faa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d010      	beq.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fb6:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x94>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	0c5b      	lsrs	r3, r3, #17
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	4a11      	ldr	r2, [pc, #68]	; (8004008 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003fc2:	5cd3      	ldrb	r3, [r2, r3]
 8003fc4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a0d      	ldr	r2, [pc, #52]	; (8004000 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fca:	fb03 f202 	mul.w	r2, r3, r2
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	e004      	b.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a0c      	ldr	r2, [pc, #48]	; (800400c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fdc:	fb02 f303 	mul.w	r3, r2, r3
 8003fe0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	613b      	str	r3, [r7, #16]
      break;
 8003fe6:	e002      	b.n	8003fee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fe8:	4b05      	ldr	r3, [pc, #20]	; (8004000 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fea:	613b      	str	r3, [r7, #16]
      break;
 8003fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fee:	693b      	ldr	r3, [r7, #16]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40021000 	.word	0x40021000
 8004000:	007a1200 	.word	0x007a1200
 8004004:	08006190 	.word	0x08006190
 8004008:	080061a0 	.word	0x080061a0
 800400c:	003d0900 	.word	0x003d0900

08004010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004014:	4b02      	ldr	r3, [pc, #8]	; (8004020 <HAL_RCC_GetHCLKFreq+0x10>)
 8004016:	681b      	ldr	r3, [r3, #0]
}
 8004018:	4618      	mov	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr
 8004020:	20000000 	.word	0x20000000

08004024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004028:	f7ff fff2 	bl	8004010 <HAL_RCC_GetHCLKFreq>
 800402c:	4602      	mov	r2, r0
 800402e:	4b05      	ldr	r3, [pc, #20]	; (8004044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	0adb      	lsrs	r3, r3, #11
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	4903      	ldr	r1, [pc, #12]	; (8004048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800403a:	5ccb      	ldrb	r3, [r1, r3]
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004040:	4618      	mov	r0, r3
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40021000 	.word	0x40021000
 8004048:	08006188 	.word	0x08006188

0800404c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004054:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <RCC_Delay+0x34>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a0a      	ldr	r2, [pc, #40]	; (8004084 <RCC_Delay+0x38>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	0a5b      	lsrs	r3, r3, #9
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	fb02 f303 	mul.w	r3, r2, r3
 8004066:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004068:	bf00      	nop
  }
  while (Delay --);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1e5a      	subs	r2, r3, #1
 800406e:	60fa      	str	r2, [r7, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1f9      	bne.n	8004068 <RCC_Delay+0x1c>
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr
 8004080:	20000000 	.word	0x20000000
 8004084:	10624dd3 	.word	0x10624dd3

08004088 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d07d      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80040a4:	2300      	movs	r3, #0
 80040a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040a8:	4b4f      	ldr	r3, [pc, #316]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10d      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040b4:	4b4c      	ldr	r3, [pc, #304]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	4a4b      	ldr	r2, [pc, #300]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040be:	61d3      	str	r3, [r2, #28]
 80040c0:	4b49      	ldr	r3, [pc, #292]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040cc:	2301      	movs	r3, #1
 80040ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d0:	4b46      	ldr	r3, [pc, #280]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d118      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040dc:	4b43      	ldr	r3, [pc, #268]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a42      	ldr	r2, [pc, #264]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040e8:	f7fe fa12 	bl	8002510 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ee:	e008      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f0:	f7fe fa0e 	bl	8002510 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b64      	cmp	r3, #100	; 0x64
 80040fc:	d901      	bls.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e06d      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004102:	4b3a      	ldr	r3, [pc, #232]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800410e:	4b36      	ldr	r3, [pc, #216]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004116:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d02e      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	429a      	cmp	r2, r3
 800412a:	d027      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800412c:	4b2e      	ldr	r3, [pc, #184]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004134:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004136:	4b2e      	ldr	r3, [pc, #184]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004138:	2201      	movs	r2, #1
 800413a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800413c:	4b2c      	ldr	r3, [pc, #176]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004142:	4a29      	ldr	r2, [pc, #164]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d014      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004152:	f7fe f9dd 	bl	8002510 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004158:	e00a      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415a:	f7fe f9d9 	bl	8002510 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	f241 3288 	movw	r2, #5000	; 0x1388
 8004168:	4293      	cmp	r3, r2
 800416a:	d901      	bls.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e036      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004170:	4b1d      	ldr	r3, [pc, #116]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0ee      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800417c:	4b1a      	ldr	r3, [pc, #104]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	4917      	ldr	r1, [pc, #92]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418a:	4313      	orrs	r3, r2
 800418c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800418e:	7dfb      	ldrb	r3, [r7, #23]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d105      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004194:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	4a13      	ldr	r2, [pc, #76]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800419e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041ac:	4b0e      	ldr	r3, [pc, #56]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	490b      	ldr	r1, [pc, #44]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d008      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041ca:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	4904      	ldr	r1, [pc, #16]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40021000 	.word	0x40021000
 80041ec:	40007000 	.word	0x40007000
 80041f0:	42420440 	.word	0x42420440

080041f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	2300      	movs	r3, #0
 800420e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b10      	cmp	r3, #16
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b10      	cmp	r3, #16
 800421a:	f200 808a 	bhi.w	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d045      	beq.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d075      	beq.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800422a:	e082      	b.n	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800422c:	4b46      	ldr	r3, [pc, #280]	; (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004232:	4b45      	ldr	r3, [pc, #276]	; (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d07b      	beq.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	0c9b      	lsrs	r3, r3, #18
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	4a41      	ldr	r2, [pc, #260]	; (800434c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004248:	5cd3      	ldrb	r3, [r2, r3]
 800424a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d015      	beq.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004256:	4b3c      	ldr	r3, [pc, #240]	; (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	0c5b      	lsrs	r3, r3, #17
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	4a3b      	ldr	r2, [pc, #236]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004262:	5cd3      	ldrb	r3, [r2, r3]
 8004264:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00d      	beq.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004270:	4a38      	ldr	r2, [pc, #224]	; (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	fbb2 f2f3 	udiv	r2, r2, r3
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	fb02 f303 	mul.w	r3, r2, r3
 800427e:	61fb      	str	r3, [r7, #28]
 8004280:	e004      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4a34      	ldr	r2, [pc, #208]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004286:	fb02 f303 	mul.w	r3, r2, r3
 800428a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800428c:	4b2e      	ldr	r3, [pc, #184]	; (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004294:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004298:	d102      	bne.n	80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	61bb      	str	r3, [r7, #24]
      break;
 800429e:	e04a      	b.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	4a2d      	ldr	r2, [pc, #180]	; (800435c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80042a6:	fba2 2303 	umull	r2, r3, r2, r3
 80042aa:	085b      	lsrs	r3, r3, #1
 80042ac:	61bb      	str	r3, [r7, #24]
      break;
 80042ae:	e042      	b.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80042b0:	4b25      	ldr	r3, [pc, #148]	; (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c0:	d108      	bne.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80042cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042d0:	61bb      	str	r3, [r7, #24]
 80042d2:	e01f      	b.n	8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042de:	d109      	bne.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80042e0:	4b19      	ldr	r3, [pc, #100]	; (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80042ec:	f649 4340 	movw	r3, #40000	; 0x9c40
 80042f0:	61bb      	str	r3, [r7, #24]
 80042f2:	e00f      	b.n	8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042fe:	d11c      	bne.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004300:	4b11      	ldr	r3, [pc, #68]	; (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d016      	beq.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800430c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004310:	61bb      	str	r3, [r7, #24]
      break;
 8004312:	e012      	b.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004314:	e011      	b.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004316:	f7ff fe85 	bl	8004024 <HAL_RCC_GetPCLK2Freq>
 800431a:	4602      	mov	r2, r0
 800431c:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	0b9b      	lsrs	r3, r3, #14
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	3301      	adds	r3, #1
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	fbb2 f3f3 	udiv	r3, r2, r3
 800432e:	61bb      	str	r3, [r7, #24]
      break;
 8004330:	e004      	b.n	800433c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004332:	bf00      	nop
 8004334:	e002      	b.n	800433c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004336:	bf00      	nop
 8004338:	e000      	b.n	800433c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800433a:	bf00      	nop
    }
  }
  return (frequency);
 800433c:	69bb      	ldr	r3, [r7, #24]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40021000 	.word	0x40021000
 800434c:	080061a4 	.word	0x080061a4
 8004350:	080061b4 	.word	0x080061b4
 8004354:	007a1200 	.word	0x007a1200
 8004358:	003d0900 	.word	0x003d0900
 800435c:	aaaaaaab 	.word	0xaaaaaaab

08004360 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e07a      	b.n	800446c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	7c5b      	ldrb	r3, [r3, #17]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d105      	bne.n	800438c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fd ff66 	bl	8002258 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fb78 	bl	8004a88 <HAL_RTC_WaitForSynchro>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d004      	beq.n	80043a8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2204      	movs	r2, #4
 80043a2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e061      	b.n	800446c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fc31 	bl	8004c10 <RTC_EnterInitMode>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d004      	beq.n	80043be <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2204      	movs	r2, #4
 80043b8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e056      	b.n	800446c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0207 	bic.w	r2, r2, #7
 80043cc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80043d6:	4b27      	ldr	r3, [pc, #156]	; (8004474 <HAL_RTC_Init+0x114>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	4a26      	ldr	r2, [pc, #152]	; (8004474 <HAL_RTC_Init+0x114>)
 80043dc:	f023 0301 	bic.w	r3, r3, #1
 80043e0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80043e2:	4b24      	ldr	r3, [pc, #144]	; (8004474 <HAL_RTC_Init+0x114>)
 80043e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	4921      	ldr	r1, [pc, #132]	; (8004474 <HAL_RTC_Init+0x114>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fc:	d003      	beq.n	8004406 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	e00e      	b.n	8004424 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004406:	2001      	movs	r0, #1
 8004408:	f7ff fef4 	bl	80041f4 <HAL_RCCEx_GetPeriphCLKFreq>
 800440c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d104      	bne.n	800441e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2204      	movs	r2, #4
 8004418:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e026      	b.n	800446c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3b01      	subs	r3, #1
 8004422:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	0c1a      	lsrs	r2, r3, #16
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f002 020f 	and.w	r2, r2, #15
 8004430:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	b292      	uxth	r2, r2
 800443a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fc0f 	bl	8004c60 <RTC_ExitInitMode>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d004      	beq.n	8004452 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2204      	movs	r2, #4
 800444c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e00c      	b.n	800446c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800446a:	2300      	movs	r3, #0
  }
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40006c00 	.word	0x40006c00

08004478 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004478:	b590      	push	{r4, r7, lr}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	2300      	movs	r3, #0
 800448a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <HAL_RTC_SetTime+0x20>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e080      	b.n	800459e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	7c1b      	ldrb	r3, [r3, #16]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_RTC_SetTime+0x30>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e07a      	b.n	800459e <HAL_RTC_SetTime+0x126>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2201      	movs	r2, #1
 80044ac:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2202      	movs	r2, #2
 80044b2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d113      	bne.n	80044e2 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80044c4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	785b      	ldrb	r3, [r3, #1]
 80044cc:	4619      	mov	r1, r3
 80044ce:	460b      	mov	r3, r1
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	1a5b      	subs	r3, r3, r1
 80044d4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80044d6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80044dc:	4413      	add	r3, r2
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	e01e      	b.n	8004520 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fbff 	bl	8004cea <RTC_Bcd2ToByte>
 80044ec:	4603      	mov	r3, r0
 80044ee:	461a      	mov	r2, r3
 80044f0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80044f4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	785b      	ldrb	r3, [r3, #1]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fbf4 	bl	8004cea <RTC_Bcd2ToByte>
 8004502:	4603      	mov	r3, r0
 8004504:	461a      	mov	r2, r3
 8004506:	4613      	mov	r3, r2
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	1a9b      	subs	r3, r3, r2
 800450c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800450e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	789b      	ldrb	r3, [r3, #2]
 8004514:	4618      	mov	r0, r3
 8004516:	f000 fbe8 	bl	8004cea <RTC_Bcd2ToByte>
 800451a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800451c:	4423      	add	r3, r4
 800451e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004520:	6979      	ldr	r1, [r7, #20]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fb0d 	bl	8004b42 <RTC_WriteTimeCounter>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d007      	beq.n	800453e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2204      	movs	r2, #4
 8004532:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e02f      	b.n	800459e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0205 	bic.w	r2, r2, #5
 800454c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 fb1e 	bl	8004b90 <RTC_ReadAlarmCounter>
 8004554:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455c:	d018      	beq.n	8004590 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	429a      	cmp	r2, r3
 8004564:	d214      	bcs.n	8004590 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800456c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004570:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004572:	6939      	ldr	r1, [r7, #16]
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 fb24 	bl	8004bc2 <RTC_WriteAlarmCounter>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d007      	beq.n	8004590 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2204      	movs	r2, #4
 8004584:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e006      	b.n	800459e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800459c:	2300      	movs	r3, #0
  }
}
 800459e:	4618      	mov	r0, r3
 80045a0:	371c      	adds	r7, #28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd90      	pop	{r4, r7, pc}
	...

080045a8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	61bb      	str	r3, [r7, #24]
 80045b8:	2300      	movs	r3, #0
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	2300      	movs	r3, #0
 80045c2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <HAL_RTC_GetTime+0x28>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e0b5      	b.n	8004740 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e0ac      	b.n	8004740 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 fa7b 	bl	8004ae2 <RTC_ReadTimeCounter>
 80045ec:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	4a55      	ldr	r2, [pc, #340]	; (8004748 <HAL_RTC_GetTime+0x1a0>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	0adb      	lsrs	r3, r3, #11
 80045f8:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4b52      	ldr	r3, [pc, #328]	; (8004748 <HAL_RTC_GetTime+0x1a0>)
 80045fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004602:	0adb      	lsrs	r3, r3, #11
 8004604:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004608:	fb01 f303 	mul.w	r3, r1, r3
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	4a4f      	ldr	r2, [pc, #316]	; (800474c <HAL_RTC_GetTime+0x1a4>)
 8004610:	fba2 2303 	umull	r2, r3, r2, r3
 8004614:	095b      	lsrs	r3, r3, #5
 8004616:	b2da      	uxtb	r2, r3
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	4a4a      	ldr	r2, [pc, #296]	; (8004748 <HAL_RTC_GetTime+0x1a0>)
 8004620:	fba2 1203 	umull	r1, r2, r2, r3
 8004624:	0ad2      	lsrs	r2, r2, #11
 8004626:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800462a:	fb01 f202 	mul.w	r2, r1, r2
 800462e:	1a9a      	subs	r2, r3, r2
 8004630:	4b46      	ldr	r3, [pc, #280]	; (800474c <HAL_RTC_GetTime+0x1a4>)
 8004632:	fba3 1302 	umull	r1, r3, r3, r2
 8004636:	0959      	lsrs	r1, r3, #5
 8004638:	460b      	mov	r3, r1
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	1a5b      	subs	r3, r3, r1
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	1ad1      	subs	r1, r2, r3
 8004642:	b2ca      	uxtb	r2, r1
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b17      	cmp	r3, #23
 800464c:	d955      	bls.n	80046fa <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4a3f      	ldr	r2, [pc, #252]	; (8004750 <HAL_RTC_GetTime+0x1a8>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	091b      	lsrs	r3, r3, #4
 8004658:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800465a:	6939      	ldr	r1, [r7, #16]
 800465c:	4b3c      	ldr	r3, [pc, #240]	; (8004750 <HAL_RTC_GetTime+0x1a8>)
 800465e:	fba3 2301 	umull	r2, r3, r3, r1
 8004662:	091a      	lsrs	r2, r3, #4
 8004664:	4613      	mov	r3, r2
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	4413      	add	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	1aca      	subs	r2, r1, r3
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fa8b 	bl	8004b90 <RTC_ReadAlarmCounter>
 800467a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004682:	d008      	beq.n	8004696 <HAL_RTC_GetTime+0xee>
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	429a      	cmp	r2, r3
 800468a:	d904      	bls.n	8004696 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800468c:	69fa      	ldr	r2, [r7, #28]
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	61fb      	str	r3, [r7, #28]
 8004694:	e002      	b.n	800469c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004696:	f04f 33ff 	mov.w	r3, #4294967295
 800469a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	4a2d      	ldr	r2, [pc, #180]	; (8004754 <HAL_RTC_GetTime+0x1ac>)
 80046a0:	fb02 f303 	mul.w	r3, r2, r3
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80046aa:	69b9      	ldr	r1, [r7, #24]
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 fa48 	bl	8004b42 <RTC_WriteTimeCounter>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e041      	b.n	8004740 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c2:	d00c      	beq.n	80046de <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80046c4:	69fa      	ldr	r2, [r7, #28]
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	4413      	add	r3, r2
 80046ca:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80046cc:	69f9      	ldr	r1, [r7, #28]
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 fa77 	bl	8004bc2 <RTC_WriteAlarmCounter>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e030      	b.n	8004740 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80046de:	69f9      	ldr	r1, [r7, #28]
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 fa6e 	bl	8004bc2 <RTC_WriteAlarmCounter>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e027      	b.n	8004740 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80046f0:	6979      	ldr	r1, [r7, #20]
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 fb16 	bl	8004d24 <RTC_DateUpdate>
 80046f8:	e003      	b.n	8004702 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d01a      	beq.n	800473e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	4618      	mov	r0, r3
 800470e:	f000 facf 	bl	8004cb0 <RTC_ByteToBcd2>
 8004712:	4603      	mov	r3, r0
 8004714:	461a      	mov	r2, r3
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	785b      	ldrb	r3, [r3, #1]
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fac6 	bl	8004cb0 <RTC_ByteToBcd2>
 8004724:	4603      	mov	r3, r0
 8004726:	461a      	mov	r2, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	789b      	ldrb	r3, [r3, #2]
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fabd 	bl	8004cb0 <RTC_ByteToBcd2>
 8004736:	4603      	mov	r3, r0
 8004738:	461a      	mov	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3720      	adds	r7, #32
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	91a2b3c5 	.word	0x91a2b3c5
 800474c:	88888889 	.word	0x88888889
 8004750:	aaaaaaab 	.word	0xaaaaaaab
 8004754:	00015180 	.word	0x00015180

08004758 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	61fb      	str	r3, [r7, #28]
 8004768:	2300      	movs	r3, #0
 800476a:	61bb      	str	r3, [r7, #24]
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <HAL_RTC_SetDate+0x24>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e097      	b.n	80048b0 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	7c1b      	ldrb	r3, [r3, #16]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_RTC_SetDate+0x34>
 8004788:	2302      	movs	r3, #2
 800478a:	e091      	b.n	80048b0 <HAL_RTC_SetDate+0x158>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2201      	movs	r2, #1
 8004790:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2202      	movs	r2, #2
 8004796:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10c      	bne.n	80047b8 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	78da      	ldrb	r2, [r3, #3]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	785a      	ldrb	r2, [r3, #1]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	789a      	ldrb	r2, [r3, #2]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	739a      	strb	r2, [r3, #14]
 80047b6:	e01a      	b.n	80047ee <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	78db      	ldrb	r3, [r3, #3]
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fa94 	bl	8004cea <RTC_Bcd2ToByte>
 80047c2:	4603      	mov	r3, r0
 80047c4:	461a      	mov	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	785b      	ldrb	r3, [r3, #1]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fa8b 	bl	8004cea <RTC_Bcd2ToByte>
 80047d4:	4603      	mov	r3, r0
 80047d6:	461a      	mov	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	789b      	ldrb	r3, [r3, #2]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fa82 	bl	8004cea <RTC_Bcd2ToByte>
 80047e6:	4603      	mov	r3, r0
 80047e8:	461a      	mov	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	7bdb      	ldrb	r3, [r3, #15]
 80047f2:	4618      	mov	r0, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	7b59      	ldrb	r1, [r3, #13]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	7b9b      	ldrb	r3, [r3, #14]
 80047fc:	461a      	mov	r2, r3
 80047fe:	f000 fb6d 	bl	8004edc <RTC_WeekDayNum>
 8004802:	4603      	mov	r3, r0
 8004804:	461a      	mov	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	7b1a      	ldrb	r2, [r3, #12]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f965 	bl	8004ae2 <RTC_ReadTimeCounter>
 8004818:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	4a26      	ldr	r2, [pc, #152]	; (80048b8 <HAL_RTC_SetDate+0x160>)
 800481e:	fba2 2303 	umull	r2, r3, r2, r3
 8004822:	0adb      	lsrs	r3, r3, #11
 8004824:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b18      	cmp	r3, #24
 800482a:	d93a      	bls.n	80048a2 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	4a23      	ldr	r2, [pc, #140]	; (80048bc <HAL_RTC_SetDate+0x164>)
 8004830:	fba2 2303 	umull	r2, r3, r2, r3
 8004834:	091b      	lsrs	r3, r3, #4
 8004836:	4a22      	ldr	r2, [pc, #136]	; (80048c0 <HAL_RTC_SetDate+0x168>)
 8004838:	fb02 f303 	mul.w	r3, r2, r3
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004842:	69f9      	ldr	r1, [r7, #28]
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 f97c 	bl	8004b42 <RTC_WriteTimeCounter>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d007      	beq.n	8004860 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2204      	movs	r2, #4
 8004854:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e027      	b.n	80048b0 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f995 	bl	8004b90 <RTC_ReadAlarmCounter>
 8004866:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486e:	d018      	beq.n	80048a2 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	429a      	cmp	r2, r3
 8004876:	d214      	bcs.n	80048a2 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800487e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004882:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004884:	69b9      	ldr	r1, [r7, #24]
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f99b 	bl	8004bc2 <RTC_WriteAlarmCounter>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d007      	beq.n	80048a2 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2204      	movs	r2, #4
 8004896:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e006      	b.n	80048b0 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3720      	adds	r7, #32
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	91a2b3c5 	.word	0x91a2b3c5
 80048bc:	aaaaaaab 	.word	0xaaaaaaab
 80048c0:	00015180 	.word	0x00015180

080048c4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80048c4:	b590      	push	{r4, r7, lr}
 80048c6:	b089      	sub	sp, #36	; 0x24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 80048d0:	2300      	movs	r3, #0
 80048d2:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 80048d4:	f107 0314 	add.w	r3, r7, #20
 80048d8:	2100      	movs	r1, #0
 80048da:	460a      	mov	r2, r1
 80048dc:	801a      	strh	r2, [r3, #0]
 80048de:	460a      	mov	r2, r1
 80048e0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <HAL_RTC_SetAlarm_IT+0x2a>
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e099      	b.n	8004a26 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	7c1b      	ldrb	r3, [r3, #16]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_RTC_SetAlarm_IT+0x3a>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e093      	b.n	8004a26 <HAL_RTC_SetAlarm_IT+0x162>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2202      	movs	r2, #2
 8004908:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800490a:	f107 0314 	add.w	r3, r7, #20
 800490e:	2200      	movs	r2, #0
 8004910:	4619      	mov	r1, r3
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f7ff fe48 	bl	80045a8 <HAL_RTC_GetTime>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e081      	b.n	8004a26 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004922:	7d3b      	ldrb	r3, [r7, #20]
 8004924:	461a      	mov	r2, r3
 8004926:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800492a:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 800492e:	7d7b      	ldrb	r3, [r7, #21]
 8004930:	4619      	mov	r1, r3
 8004932:	460b      	mov	r3, r1
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	1a5b      	subs	r3, r3, r1
 8004938:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800493a:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 800493c:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800493e:	4413      	add	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d113      	bne.n	8004970 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004952:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	785b      	ldrb	r3, [r3, #1]
 800495a:	4619      	mov	r1, r3
 800495c:	460b      	mov	r3, r1
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	1a5b      	subs	r3, r3, r1
 8004962:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004964:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800496a:	4413      	add	r3, r2
 800496c:	61fb      	str	r3, [r7, #28]
 800496e:	e01e      	b.n	80049ae <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f000 f9b8 	bl	8004cea <RTC_Bcd2ToByte>
 800497a:	4603      	mov	r3, r0
 800497c:	461a      	mov	r2, r3
 800497e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004982:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	785b      	ldrb	r3, [r3, #1]
 800498a:	4618      	mov	r0, r3
 800498c:	f000 f9ad 	bl	8004cea <RTC_Bcd2ToByte>
 8004990:	4603      	mov	r3, r0
 8004992:	461a      	mov	r2, r3
 8004994:	4613      	mov	r3, r2
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800499c:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	789b      	ldrb	r3, [r3, #2]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 f9a1 	bl	8004cea <RTC_Bcd2ToByte>
 80049a8:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80049aa:	4423      	add	r3, r4
 80049ac:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 80049ae:	69fa      	ldr	r2, [r7, #28]
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d205      	bcs.n	80049c2 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80049bc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80049c0:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80049c2:	69f9      	ldr	r1, [r7, #28]
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f8fc 	bl	8004bc2 <RTC_WriteAlarmCounter>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d007      	beq.n	80049e0 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2204      	movs	r2, #4
 80049d4:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e022      	b.n	8004a26 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0202 	bic.w	r2, r2, #2
 80049ee:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0202 	orr.w	r2, r2, #2
 80049fe:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_RTC_SetAlarm_IT+0x16c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a0a      	ldr	r2, [pc, #40]	; (8004a30 <HAL_RTC_SetAlarm_IT+0x16c>)
 8004a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a0a:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004a0c:	4b08      	ldr	r3, [pc, #32]	; (8004a30 <HAL_RTC_SetAlarm_IT+0x16c>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	4a07      	ldr	r2, [pc, #28]	; (8004a30 <HAL_RTC_SetAlarm_IT+0x16c>)
 8004a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a16:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004a24:	2300      	movs	r3, #0
  }
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3724      	adds	r7, #36	; 0x24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd90      	pop	{r4, r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40010400 	.word	0x40010400

08004a34 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d011      	beq.n	8004a6e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00a      	beq.n	8004a6e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7fd fadf 	bl	800201c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0202 	bic.w	r2, r2, #2
 8004a6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004a6e:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004a70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a74:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	745a      	strb	r2, [r3, #17]
}
 8004a7c:	bf00      	nop
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40010400 	.word	0x40010400

08004a88 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e01d      	b.n	8004ada <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0208 	bic.w	r2, r2, #8
 8004aac:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004aae:	f7fd fd2f 	bl	8002510 <HAL_GetTick>
 8004ab2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004ab4:	e009      	b.n	8004aca <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004ab6:	f7fd fd2b 	bl	8002510 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ac4:	d901      	bls.n	8004aca <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e007      	b.n	8004ada <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0ee      	beq.n	8004ab6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b087      	sub	sp, #28
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	827b      	strh	r3, [r7, #18]
 8004aee:	2300      	movs	r3, #0
 8004af0:	823b      	strh	r3, [r7, #16]
 8004af2:	2300      	movs	r3, #0
 8004af4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004b12:	8a7a      	ldrh	r2, [r7, #18]
 8004b14:	8a3b      	ldrh	r3, [r7, #16]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d008      	beq.n	8004b2c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004b1a:	8a3b      	ldrh	r3, [r7, #16]
 8004b1c:	041a      	lsls	r2, r3, #16
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	e004      	b.n	8004b36 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004b2c:	8a7b      	ldrh	r3, [r7, #18]
 8004b2e:	041a      	lsls	r2, r3, #16
 8004b30:	89fb      	ldrh	r3, [r7, #14]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004b36:	697b      	ldr	r3, [r7, #20]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr

08004b42 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f85d 	bl	8004c10 <RTC_EnterInitMode>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	73fb      	strb	r3, [r7, #15]
 8004b60:	e011      	b.n	8004b86 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	0c12      	lsrs	r2, r2, #16
 8004b6a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	b292      	uxth	r2, r2
 8004b74:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f872 	bl	8004c60 <RTC_ExitInitMode>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	81fb      	strh	r3, [r7, #14]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004bb0:	89fb      	ldrh	r3, [r7, #14]
 8004bb2:	041a      	lsls	r2, r3, #16
 8004bb4:	89bb      	ldrh	r3, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	4770      	bx	lr

08004bc2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f81d 	bl	8004c10 <RTC_EnterInitMode>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	73fb      	strb	r3, [r7, #15]
 8004be0:	e011      	b.n	8004c06 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	0c12      	lsrs	r2, r2, #16
 8004bea:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	b292      	uxth	r2, r2
 8004bf4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f832 	bl	8004c60 <RTC_ExitInitMode>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004c1c:	f7fd fc78 	bl	8002510 <HAL_GetTick>
 8004c20:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004c22:	e009      	b.n	8004c38 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004c24:	f7fd fc74 	bl	8002510 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c32:	d901      	bls.n	8004c38 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e00f      	b.n	8004c58 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f003 0320 	and.w	r3, r3, #32
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0ee      	beq.n	8004c24 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f042 0210 	orr.w	r2, r2, #16
 8004c54:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0210 	bic.w	r2, r2, #16
 8004c7a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004c7c:	f7fd fc48 	bl	8002510 <HAL_GetTick>
 8004c80:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004c82:	e009      	b.n	8004c98 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004c84:	f7fd fc44 	bl	8002510 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c92:	d901      	bls.n	8004c98 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e007      	b.n	8004ca8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0ee      	beq.n	8004c84 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004cbe:	e005      	b.n	8004ccc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	3b0a      	subs	r3, #10
 8004cca:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
 8004cce:	2b09      	cmp	r3, #9
 8004cd0:	d8f6      	bhi.n	8004cc0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	b2db      	uxtb	r3, r3
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bc80      	pop	{r7}
 8004ce8:	4770      	bx	lr

08004cea <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b085      	sub	sp, #20
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004cf8:	79fb      	ldrb	r3, [r7, #7]
 8004cfa:	091b      	lsrs	r3, r3, #4
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	461a      	mov	r2, r3
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	f003 030f 	and.w	r3, r3, #15
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	4413      	add	r3, r2
 8004d18:	b2db      	uxtb	r3, r3
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bc80      	pop	{r7}
 8004d22:	4770      	bx	lr

08004d24 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	617b      	str	r3, [r7, #20]
 8004d32:	2300      	movs	r3, #0
 8004d34:	613b      	str	r3, [r7, #16]
 8004d36:	2300      	movs	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	7bdb      	ldrb	r3, [r3, #15]
 8004d42:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	7b5b      	ldrb	r3, [r3, #13]
 8004d48:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	7b9b      	ldrb	r3, [r3, #14]
 8004d4e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004d50:	2300      	movs	r3, #0
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	e06f      	b.n	8004e36 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d011      	beq.n	8004d80 <RTC_DateUpdate+0x5c>
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d00e      	beq.n	8004d80 <RTC_DateUpdate+0x5c>
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b05      	cmp	r3, #5
 8004d66:	d00b      	beq.n	8004d80 <RTC_DateUpdate+0x5c>
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	2b07      	cmp	r3, #7
 8004d6c:	d008      	beq.n	8004d80 <RTC_DateUpdate+0x5c>
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d005      	beq.n	8004d80 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b0a      	cmp	r3, #10
 8004d78:	d002      	beq.n	8004d80 <RTC_DateUpdate+0x5c>
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	2b0c      	cmp	r3, #12
 8004d7e:	d117      	bne.n	8004db0 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b1e      	cmp	r3, #30
 8004d84:	d803      	bhi.n	8004d8e <RTC_DateUpdate+0x6a>
      {
        day++;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004d8c:	e050      	b.n	8004e30 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	2b0c      	cmp	r3, #12
 8004d92:	d005      	beq.n	8004da0 <RTC_DateUpdate+0x7c>
        {
          month++;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	3301      	adds	r3, #1
 8004d98:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004d9e:	e047      	b.n	8004e30 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004da0:	2301      	movs	r3, #1
 8004da2:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004da4:	2301      	movs	r3, #1
 8004da6:	60fb      	str	r3, [r7, #12]
          year++;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	3301      	adds	r3, #1
 8004dac:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004dae:	e03f      	b.n	8004e30 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d008      	beq.n	8004dc8 <RTC_DateUpdate+0xa4>
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	2b06      	cmp	r3, #6
 8004dba:	d005      	beq.n	8004dc8 <RTC_DateUpdate+0xa4>
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	2b09      	cmp	r3, #9
 8004dc0:	d002      	beq.n	8004dc8 <RTC_DateUpdate+0xa4>
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b0b      	cmp	r3, #11
 8004dc6:	d10c      	bne.n	8004de2 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b1d      	cmp	r3, #29
 8004dcc:	d803      	bhi.n	8004dd6 <RTC_DateUpdate+0xb2>
      {
        day++;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004dd4:	e02c      	b.n	8004e30 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004de0:	e026      	b.n	8004e30 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d123      	bne.n	8004e30 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b1b      	cmp	r3, #27
 8004dec:	d803      	bhi.n	8004df6 <RTC_DateUpdate+0xd2>
      {
        day++;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3301      	adds	r3, #1
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	e01c      	b.n	8004e30 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b1c      	cmp	r3, #28
 8004dfa:	d111      	bne.n	8004e20 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 f839 	bl	8004e78 <RTC_IsLeapYear>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <RTC_DateUpdate+0xf0>
        {
          day++;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	e00d      	b.n	8004e30 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	3301      	adds	r3, #1
 8004e18:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	e007      	b.n	8004e30 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b1d      	cmp	r3, #29
 8004e24:	d104      	bne.n	8004e30 <RTC_DateUpdate+0x10c>
      {
        month++;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	3301      	adds	r3, #1
 8004e34:	60bb      	str	r3, [r7, #8]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d38b      	bcc.n	8004d56 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6978      	ldr	r0, [r7, #20]
 8004e62:	f000 f83b 	bl	8004edc <RTC_WeekDayNum>
 8004e66:	4603      	mov	r3, r0
 8004e68:	461a      	mov	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	731a      	strb	r2, [r3, #12]
}
 8004e6e:	bf00      	nop
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	e01d      	b.n	8004ece <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004e92:	88fb      	ldrh	r3, [r7, #6]
 8004e94:	4a10      	ldr	r2, [pc, #64]	; (8004ed8 <RTC_IsLeapYear+0x60>)
 8004e96:	fba2 1203 	umull	r1, r2, r2, r3
 8004e9a:	0952      	lsrs	r2, r2, #5
 8004e9c:	2164      	movs	r1, #100	; 0x64
 8004e9e:	fb01 f202 	mul.w	r2, r1, r2
 8004ea2:	1a9b      	subs	r3, r3, r2
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e00f      	b.n	8004ece <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004eae:	88fb      	ldrh	r3, [r7, #6]
 8004eb0:	4a09      	ldr	r2, [pc, #36]	; (8004ed8 <RTC_IsLeapYear+0x60>)
 8004eb2:	fba2 1203 	umull	r1, r2, r2, r3
 8004eb6:	09d2      	lsrs	r2, r2, #7
 8004eb8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004ebc:	fb01 f202 	mul.w	r2, r1, r2
 8004ec0:	1a9b      	subs	r3, r3, r2
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004ecc:	2300      	movs	r3, #0
  }
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bc80      	pop	{r7}
 8004ed6:	4770      	bx	lr
 8004ed8:	51eb851f 	.word	0x51eb851f

08004edc <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	70fb      	strb	r3, [r7, #3]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60bb      	str	r3, [r7, #8]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004efa:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d82d      	bhi.n	8004f5e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004f02:	78fa      	ldrb	r2, [r7, #3]
 8004f04:	4613      	mov	r3, r2
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	4413      	add	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	1a9b      	subs	r3, r3, r2
 8004f0e:	4a2c      	ldr	r2, [pc, #176]	; (8004fc0 <RTC_WeekDayNum+0xe4>)
 8004f10:	fba2 2303 	umull	r2, r3, r2, r3
 8004f14:	085a      	lsrs	r2, r3, #1
 8004f16:	78bb      	ldrb	r3, [r7, #2]
 8004f18:	441a      	add	r2, r3
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	441a      	add	r2, r3
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	089b      	lsrs	r3, r3, #2
 8004f24:	441a      	add	r2, r3
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	4926      	ldr	r1, [pc, #152]	; (8004fc4 <RTC_WeekDayNum+0xe8>)
 8004f2c:	fba1 1303 	umull	r1, r3, r1, r3
 8004f30:	095b      	lsrs	r3, r3, #5
 8004f32:	1ad2      	subs	r2, r2, r3
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	4922      	ldr	r1, [pc, #136]	; (8004fc4 <RTC_WeekDayNum+0xe8>)
 8004f3a:	fba1 1303 	umull	r1, r3, r1, r3
 8004f3e:	09db      	lsrs	r3, r3, #7
 8004f40:	4413      	add	r3, r2
 8004f42:	1d1a      	adds	r2, r3, #4
 8004f44:	4b20      	ldr	r3, [pc, #128]	; (8004fc8 <RTC_WeekDayNum+0xec>)
 8004f46:	fba3 1302 	umull	r1, r3, r3, r2
 8004f4a:	1ad1      	subs	r1, r2, r3
 8004f4c:	0849      	lsrs	r1, r1, #1
 8004f4e:	440b      	add	r3, r1
 8004f50:	0899      	lsrs	r1, r3, #2
 8004f52:	460b      	mov	r3, r1
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	1a5b      	subs	r3, r3, r1
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	e029      	b.n	8004fb2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004f5e:	78fa      	ldrb	r2, [r7, #3]
 8004f60:	4613      	mov	r3, r2
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	4413      	add	r3, r2
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	1a9b      	subs	r3, r3, r2
 8004f6a:	4a15      	ldr	r2, [pc, #84]	; (8004fc0 <RTC_WeekDayNum+0xe4>)
 8004f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f70:	085a      	lsrs	r2, r3, #1
 8004f72:	78bb      	ldrb	r3, [r7, #2]
 8004f74:	441a      	add	r2, r3
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	441a      	add	r2, r3
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	089b      	lsrs	r3, r3, #2
 8004f7e:	441a      	add	r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4910      	ldr	r1, [pc, #64]	; (8004fc4 <RTC_WeekDayNum+0xe8>)
 8004f84:	fba1 1303 	umull	r1, r3, r1, r3
 8004f88:	095b      	lsrs	r3, r3, #5
 8004f8a:	1ad2      	subs	r2, r2, r3
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	490d      	ldr	r1, [pc, #52]	; (8004fc4 <RTC_WeekDayNum+0xe8>)
 8004f90:	fba1 1303 	umull	r1, r3, r1, r3
 8004f94:	09db      	lsrs	r3, r3, #7
 8004f96:	4413      	add	r3, r2
 8004f98:	1c9a      	adds	r2, r3, #2
 8004f9a:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <RTC_WeekDayNum+0xec>)
 8004f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004fa0:	1ad1      	subs	r1, r2, r3
 8004fa2:	0849      	lsrs	r1, r1, #1
 8004fa4:	440b      	add	r3, r1
 8004fa6:	0899      	lsrs	r1, r3, #2
 8004fa8:	460b      	mov	r3, r1
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	1a5b      	subs	r3, r3, r1
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	b2db      	uxtb	r3, r3
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr
 8004fc0:	38e38e39 	.word	0x38e38e39
 8004fc4:	51eb851f 	.word	0x51eb851f
 8004fc8:	24924925 	.word	0x24924925

08004fcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e076      	b.n	80050cc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d108      	bne.n	8004ff8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fee:	d009      	beq.n	8005004 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	61da      	str	r2, [r3, #28]
 8004ff6:	e005      	b.n	8005004 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fd f946 	bl	80022b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800503a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800504c:	431a      	orrs	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005088:	ea42 0103 	orr.w	r1, r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	0c1a      	lsrs	r2, r3, #16
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f002 0204 	and.w	r2, r2, #4
 80050aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	69da      	ldr	r2, [r3, #28]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	4613      	mov	r3, r2
 80050e2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050e4:	f7fd fa14 	bl	8002510 <HAL_GetTick>
 80050e8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80050ea:	88fb      	ldrh	r3, [r7, #6]
 80050ec:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d001      	beq.n	80050fe <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80050fa:	2302      	movs	r3, #2
 80050fc:	e12a      	b.n	8005354 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <HAL_SPI_Transmit+0x36>
 8005104:	88fb      	ldrh	r3, [r7, #6]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e122      	b.n	8005354 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_SPI_Transmit+0x48>
 8005118:	2302      	movs	r3, #2
 800511a:	e11b      	b.n	8005354 <HAL_SPI_Transmit+0x280>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2203      	movs	r2, #3
 8005128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	88fa      	ldrh	r2, [r7, #6]
 800513c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	88fa      	ldrh	r2, [r7, #6]
 8005142:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800516a:	d10f      	bne.n	800518c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800517a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800518a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005196:	2b40      	cmp	r3, #64	; 0x40
 8005198:	d007      	beq.n	80051aa <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051b2:	d152      	bne.n	800525a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <HAL_SPI_Transmit+0xee>
 80051bc:	8b7b      	ldrh	r3, [r7, #26]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d145      	bne.n	800524e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c6:	881a      	ldrh	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	1c9a      	adds	r2, r3, #2
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051e6:	e032      	b.n	800524e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d112      	bne.n	800521c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fa:	881a      	ldrh	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005206:	1c9a      	adds	r2, r3, #2
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	86da      	strh	r2, [r3, #54]	; 0x36
 800521a:	e018      	b.n	800524e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800521c:	f7fd f978 	bl	8002510 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d803      	bhi.n	8005234 <HAL_SPI_Transmit+0x160>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005232:	d102      	bne.n	800523a <HAL_SPI_Transmit+0x166>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e082      	b.n	8005354 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005252:	b29b      	uxth	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1c7      	bne.n	80051e8 <HAL_SPI_Transmit+0x114>
 8005258:	e053      	b.n	8005302 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <HAL_SPI_Transmit+0x194>
 8005262:	8b7b      	ldrh	r3, [r7, #26]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d147      	bne.n	80052f8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	330c      	adds	r3, #12
 8005272:	7812      	ldrb	r2, [r2, #0]
 8005274:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005284:	b29b      	uxth	r3, r3
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800528e:	e033      	b.n	80052f8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b02      	cmp	r3, #2
 800529c:	d113      	bne.n	80052c6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	330c      	adds	r3, #12
 80052a8:	7812      	ldrb	r2, [r2, #0]
 80052aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80052c4:	e018      	b.n	80052f8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052c6:	f7fd f923 	bl	8002510 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d803      	bhi.n	80052de <HAL_SPI_Transmit+0x20a>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052dc:	d102      	bne.n	80052e4 <HAL_SPI_Transmit+0x210>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d109      	bne.n	80052f8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e02d      	b.n	8005354 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1c6      	bne.n	8005290 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005302:	69fa      	ldr	r2, [r7, #28]
 8005304:	6839      	ldr	r1, [r7, #0]
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f000 fbd2 	bl	8005ab0 <SPI_EndRxTxTransaction>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2220      	movs	r2, #32
 8005316:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10a      	bne.n	8005336 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005320:	2300      	movs	r3, #0
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005352:	2300      	movs	r3, #0
  }
}
 8005354:	4618      	mov	r0, r3
 8005356:	3720      	adds	r7, #32
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af02      	add	r7, sp, #8
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	603b      	str	r3, [r7, #0]
 8005368:	4613      	mov	r3, r2
 800536a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b01      	cmp	r3, #1
 8005376:	d001      	beq.n	800537c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005378:	2302      	movs	r3, #2
 800537a:	e104      	b.n	8005586 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005384:	d112      	bne.n	80053ac <HAL_SPI_Receive+0x50>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10e      	bne.n	80053ac <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2204      	movs	r2, #4
 8005392:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005396:	88fa      	ldrh	r2, [r7, #6]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	4613      	mov	r3, r2
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	68b9      	ldr	r1, [r7, #8]
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f000 f8f3 	bl	800558e <HAL_SPI_TransmitReceive>
 80053a8:	4603      	mov	r3, r0
 80053aa:	e0ec      	b.n	8005586 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053ac:	f7fd f8b0 	bl	8002510 <HAL_GetTick>
 80053b0:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <HAL_SPI_Receive+0x62>
 80053b8:	88fb      	ldrh	r3, [r7, #6]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e0e1      	b.n	8005586 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_SPI_Receive+0x74>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e0da      	b.n	8005586 <HAL_SPI_Receive+0x22a>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2204      	movs	r2, #4
 80053dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	88fa      	ldrh	r2, [r7, #6]
 80053f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	88fa      	ldrh	r2, [r7, #6]
 80053f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800541e:	d10f      	bne.n	8005440 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800542e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800543e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544a:	2b40      	cmp	r3, #64	; 0x40
 800544c:	d007      	beq.n	800545e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800545c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d170      	bne.n	8005548 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005466:	e035      	b.n	80054d4 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b01      	cmp	r3, #1
 8005474:	d115      	bne.n	80054a2 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f103 020c 	add.w	r2, r3, #12
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005482:	7812      	ldrb	r2, [r2, #0]
 8005484:	b2d2      	uxtb	r2, r2
 8005486:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054a0:	e018      	b.n	80054d4 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054a2:	f7fd f835 	bl	8002510 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d803      	bhi.n	80054ba <HAL_SPI_Receive+0x15e>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d102      	bne.n	80054c0 <HAL_SPI_Receive+0x164>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d109      	bne.n	80054d4 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e058      	b.n	8005586 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1c4      	bne.n	8005468 <HAL_SPI_Receive+0x10c>
 80054de:	e038      	b.n	8005552 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d113      	bne.n	8005516 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f8:	b292      	uxth	r2, r2
 80054fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005500:	1c9a      	adds	r2, r3, #2
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800550a:	b29b      	uxth	r3, r3
 800550c:	3b01      	subs	r3, #1
 800550e:	b29a      	uxth	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005514:	e018      	b.n	8005548 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005516:	f7fc fffb 	bl	8002510 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d803      	bhi.n	800552e <HAL_SPI_Receive+0x1d2>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552c:	d102      	bne.n	8005534 <HAL_SPI_Receive+0x1d8>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d109      	bne.n	8005548 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e01e      	b.n	8005586 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1c6      	bne.n	80054e0 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	6839      	ldr	r1, [r7, #0]
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f000 fa58 	bl	8005a0c <SPI_EndRxTransaction>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2220      	movs	r2, #32
 8005566:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e000      	b.n	8005586 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005584:	2300      	movs	r3, #0
  }
}
 8005586:	4618      	mov	r0, r3
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b08a      	sub	sp, #40	; 0x28
 8005592:	af00      	add	r7, sp, #0
 8005594:	60f8      	str	r0, [r7, #12]
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	607a      	str	r2, [r7, #4]
 800559a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800559c:	2301      	movs	r3, #1
 800559e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055a0:	f7fc ffb6 	bl	8002510 <HAL_GetTick>
 80055a4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055ac:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80055b4:	887b      	ldrh	r3, [r7, #2]
 80055b6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055b8:	7ffb      	ldrb	r3, [r7, #31]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d00c      	beq.n	80055d8 <HAL_SPI_TransmitReceive+0x4a>
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055c4:	d106      	bne.n	80055d4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d102      	bne.n	80055d4 <HAL_SPI_TransmitReceive+0x46>
 80055ce:	7ffb      	ldrb	r3, [r7, #31]
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d001      	beq.n	80055d8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80055d4:	2302      	movs	r3, #2
 80055d6:	e17f      	b.n	80058d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d005      	beq.n	80055ea <HAL_SPI_TransmitReceive+0x5c>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <HAL_SPI_TransmitReceive+0x5c>
 80055e4:	887b      	ldrh	r3, [r7, #2]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e174      	b.n	80058d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d101      	bne.n	80055fc <HAL_SPI_TransmitReceive+0x6e>
 80055f8:	2302      	movs	r3, #2
 80055fa:	e16d      	b.n	80058d8 <HAL_SPI_TransmitReceive+0x34a>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b04      	cmp	r3, #4
 800560e:	d003      	beq.n	8005618 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2205      	movs	r2, #5
 8005614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	887a      	ldrh	r2, [r7, #2]
 8005628:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	887a      	ldrh	r2, [r7, #2]
 800562e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	887a      	ldrh	r2, [r7, #2]
 800563a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	887a      	ldrh	r2, [r7, #2]
 8005640:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005658:	2b40      	cmp	r3, #64	; 0x40
 800565a:	d007      	beq.n	800566c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800566a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005674:	d17e      	bne.n	8005774 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <HAL_SPI_TransmitReceive+0xf6>
 800567e:	8afb      	ldrh	r3, [r7, #22]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d16c      	bne.n	800575e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005688:	881a      	ldrh	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	1c9a      	adds	r2, r3, #2
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800569e:	b29b      	uxth	r3, r3
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056a8:	e059      	b.n	800575e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d11b      	bne.n	80056f0 <HAL_SPI_TransmitReceive+0x162>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056bc:	b29b      	uxth	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d016      	beq.n	80056f0 <HAL_SPI_TransmitReceive+0x162>
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d113      	bne.n	80056f0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056cc:	881a      	ldrh	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	1c9a      	adds	r2, r3, #2
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d119      	bne.n	8005732 <HAL_SPI_TransmitReceive+0x1a4>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d014      	beq.n	8005732 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	b292      	uxth	r2, r2
 8005714:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	1c9a      	adds	r2, r3, #2
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005724:	b29b      	uxth	r3, r3
 8005726:	3b01      	subs	r3, #1
 8005728:	b29a      	uxth	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800572e:	2301      	movs	r3, #1
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005732:	f7fc feed 	bl	8002510 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800573e:	429a      	cmp	r2, r3
 8005740:	d80d      	bhi.n	800575e <HAL_SPI_TransmitReceive+0x1d0>
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005748:	d009      	beq.n	800575e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e0bc      	b.n	80058d8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005762:	b29b      	uxth	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1a0      	bne.n	80056aa <HAL_SPI_TransmitReceive+0x11c>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d19b      	bne.n	80056aa <HAL_SPI_TransmitReceive+0x11c>
 8005772:	e082      	b.n	800587a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <HAL_SPI_TransmitReceive+0x1f4>
 800577c:	8afb      	ldrh	r3, [r7, #22]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d171      	bne.n	8005866 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	330c      	adds	r3, #12
 800578c:	7812      	ldrb	r2, [r2, #0]
 800578e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057a8:	e05d      	b.n	8005866 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d11c      	bne.n	80057f2 <HAL_SPI_TransmitReceive+0x264>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d017      	beq.n	80057f2 <HAL_SPI_TransmitReceive+0x264>
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d114      	bne.n	80057f2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	330c      	adds	r3, #12
 80057d2:	7812      	ldrb	r2, [r2, #0]
 80057d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d119      	bne.n	8005834 <HAL_SPI_TransmitReceive+0x2a6>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005804:	b29b      	uxth	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d014      	beq.n	8005834 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005830:	2301      	movs	r3, #1
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005834:	f7fc fe6c 	bl	8002510 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005840:	429a      	cmp	r2, r3
 8005842:	d803      	bhi.n	800584c <HAL_SPI_TransmitReceive+0x2be>
 8005844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	d102      	bne.n	8005852 <HAL_SPI_TransmitReceive+0x2c4>
 800584c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584e:	2b00      	cmp	r3, #0
 8005850:	d109      	bne.n	8005866 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e038      	b.n	80058d8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800586a:	b29b      	uxth	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d19c      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x21c>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d197      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800587a:	6a3a      	ldr	r2, [r7, #32]
 800587c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f000 f916 	bl	8005ab0 <SPI_EndRxTxTransaction>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d008      	beq.n	800589c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2220      	movs	r2, #32
 800588e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e01d      	b.n	80058d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10a      	bne.n	80058ba <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058a4:	2300      	movs	r3, #0
 80058a6:	613b      	str	r3, [r7, #16]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	613b      	str	r3, [r7, #16]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80058d6:	2300      	movs	r3, #0
  }
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3728      	adds	r7, #40	; 0x28
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058ee:	b2db      	uxtb	r3, r3
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr
	...

080058fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	603b      	str	r3, [r7, #0]
 8005908:	4613      	mov	r3, r2
 800590a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800590c:	f7fc fe00 	bl	8002510 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005914:	1a9b      	subs	r3, r3, r2
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	4413      	add	r3, r2
 800591a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800591c:	f7fc fdf8 	bl	8002510 <HAL_GetTick>
 8005920:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005922:	4b39      	ldr	r3, [pc, #228]	; (8005a08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	015b      	lsls	r3, r3, #5
 8005928:	0d1b      	lsrs	r3, r3, #20
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	fb02 f303 	mul.w	r3, r2, r3
 8005930:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005932:	e054      	b.n	80059de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593a:	d050      	beq.n	80059de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800593c:	f7fc fde8 	bl	8002510 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	69fa      	ldr	r2, [r7, #28]
 8005948:	429a      	cmp	r2, r3
 800594a:	d902      	bls.n	8005952 <SPI_WaitFlagStateUntilTimeout+0x56>
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d13d      	bne.n	80059ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005960:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800596a:	d111      	bne.n	8005990 <SPI_WaitFlagStateUntilTimeout+0x94>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005974:	d004      	beq.n	8005980 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800597e:	d107      	bne.n	8005990 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800598e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005998:	d10f      	bne.n	80059ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e017      	b.n	80059fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	3b01      	subs	r3, #1
 80059dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4013      	ands	r3, r2
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	bf0c      	ite	eq
 80059ee:	2301      	moveq	r3, #1
 80059f0:	2300      	movne	r3, #0
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	461a      	mov	r2, r3
 80059f6:	79fb      	ldrb	r3, [r7, #7]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d19b      	bne.n	8005934 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3720      	adds	r7, #32
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20000000 	.word	0x20000000

08005a0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af02      	add	r7, sp, #8
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a20:	d111      	bne.n	8005a46 <SPI_EndRxTransaction+0x3a>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a2a:	d004      	beq.n	8005a36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a34:	d107      	bne.n	8005a46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a44:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a4e:	d117      	bne.n	8005a80 <SPI_EndRxTransaction+0x74>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a58:	d112      	bne.n	8005a80 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2200      	movs	r2, #0
 8005a62:	2101      	movs	r1, #1
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f7ff ff49 	bl	80058fc <SPI_WaitFlagStateUntilTimeout>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01a      	beq.n	8005aa6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a74:	f043 0220 	orr.w	r2, r3, #32
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e013      	b.n	8005aa8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2200      	movs	r2, #0
 8005a88:	2180      	movs	r1, #128	; 0x80
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f7ff ff36 	bl	80058fc <SPI_WaitFlagStateUntilTimeout>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d007      	beq.n	8005aa6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9a:	f043 0220 	orr.w	r2, r3, #32
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e000      	b.n	8005aa8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	2102      	movs	r1, #2
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f7ff ff18 	bl	80058fc <SPI_WaitFlagStateUntilTimeout>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d007      	beq.n	8005ae2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad6:	f043 0220 	orr.w	r2, r3, #32
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e013      	b.n	8005b0a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2180      	movs	r1, #128	; 0x80
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f7ff ff05 	bl	80058fc <SPI_WaitFlagStateUntilTimeout>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d007      	beq.n	8005b08 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afc:	f043 0220 	orr.w	r2, r3, #32
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e000      	b.n	8005b0a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e041      	b.n	8005ba8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d106      	bne.n	8005b3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7fc fc03 	bl	8002344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2202      	movs	r2, #2
 8005b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4610      	mov	r0, r2
 8005b52:	f000 f93f 	bl	8005dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d001      	beq.n	8005bc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e032      	b.n	8005c2e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a18      	ldr	r2, [pc, #96]	; (8005c38 <HAL_TIM_Base_Start+0x88>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00e      	beq.n	8005bf8 <HAL_TIM_Base_Start+0x48>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be2:	d009      	beq.n	8005bf8 <HAL_TIM_Base_Start+0x48>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a14      	ldr	r2, [pc, #80]	; (8005c3c <HAL_TIM_Base_Start+0x8c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d004      	beq.n	8005bf8 <HAL_TIM_Base_Start+0x48>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a13      	ldr	r2, [pc, #76]	; (8005c40 <HAL_TIM_Base_Start+0x90>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d111      	bne.n	8005c1c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b06      	cmp	r3, #6
 8005c08:	d010      	beq.n	8005c2c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f042 0201 	orr.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1a:	e007      	b.n	8005c2c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0201 	orr.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bc80      	pop	{r7}
 8005c36:	4770      	bx	lr
 8005c38:	40012c00 	.word	0x40012c00
 8005c3c:	40000400 	.word	0x40000400
 8005c40:	40000800 	.word	0x40000800

08005c44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_TIM_ConfigClockSource+0x1c>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e0b4      	b.n	8005dca <HAL_TIM_ConfigClockSource+0x186>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c98:	d03e      	beq.n	8005d18 <HAL_TIM_ConfigClockSource+0xd4>
 8005c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c9e:	f200 8087 	bhi.w	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca6:	f000 8086 	beq.w	8005db6 <HAL_TIM_ConfigClockSource+0x172>
 8005caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cae:	d87f      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb0:	2b70      	cmp	r3, #112	; 0x70
 8005cb2:	d01a      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0xa6>
 8005cb4:	2b70      	cmp	r3, #112	; 0x70
 8005cb6:	d87b      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb8:	2b60      	cmp	r3, #96	; 0x60
 8005cba:	d050      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0x11a>
 8005cbc:	2b60      	cmp	r3, #96	; 0x60
 8005cbe:	d877      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc0:	2b50      	cmp	r3, #80	; 0x50
 8005cc2:	d03c      	beq.n	8005d3e <HAL_TIM_ConfigClockSource+0xfa>
 8005cc4:	2b50      	cmp	r3, #80	; 0x50
 8005cc6:	d873      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc8:	2b40      	cmp	r3, #64	; 0x40
 8005cca:	d058      	beq.n	8005d7e <HAL_TIM_ConfigClockSource+0x13a>
 8005ccc:	2b40      	cmp	r3, #64	; 0x40
 8005cce:	d86f      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd0:	2b30      	cmp	r3, #48	; 0x30
 8005cd2:	d064      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x15a>
 8005cd4:	2b30      	cmp	r3, #48	; 0x30
 8005cd6:	d86b      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	d060      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x15a>
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d867      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d05c      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x15a>
 8005ce4:	2b10      	cmp	r3, #16
 8005ce6:	d05a      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x15a>
 8005ce8:	e062      	b.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cfa:	f000 f950 	bl	8005f9e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	609a      	str	r2, [r3, #8]
      break;
 8005d16:	e04f      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d28:	f000 f939 	bl	8005f9e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d3a:	609a      	str	r2, [r3, #8]
      break;
 8005d3c:	e03c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f000 f8b0 	bl	8005eb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2150      	movs	r1, #80	; 0x50
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 f907 	bl	8005f6a <TIM_ITRx_SetConfig>
      break;
 8005d5c:	e02c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f000 f8ce 	bl	8005f0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2160      	movs	r1, #96	; 0x60
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 f8f7 	bl	8005f6a <TIM_ITRx_SetConfig>
      break;
 8005d7c:	e01c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f000 f890 	bl	8005eb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2140      	movs	r1, #64	; 0x40
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 f8e7 	bl	8005f6a <TIM_ITRx_SetConfig>
      break;
 8005d9c:	e00c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4619      	mov	r1, r3
 8005da8:	4610      	mov	r0, r2
 8005daa:	f000 f8de 	bl	8005f6a <TIM_ITRx_SetConfig>
      break;
 8005dae:	e003      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
      break;
 8005db4:	e000      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005db6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a2f      	ldr	r2, [pc, #188]	; (8005ea4 <TIM_Base_SetConfig+0xd0>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00b      	beq.n	8005e04 <TIM_Base_SetConfig+0x30>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df2:	d007      	beq.n	8005e04 <TIM_Base_SetConfig+0x30>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a2c      	ldr	r2, [pc, #176]	; (8005ea8 <TIM_Base_SetConfig+0xd4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d003      	beq.n	8005e04 <TIM_Base_SetConfig+0x30>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a2b      	ldr	r2, [pc, #172]	; (8005eac <TIM_Base_SetConfig+0xd8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d108      	bne.n	8005e16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a22      	ldr	r2, [pc, #136]	; (8005ea4 <TIM_Base_SetConfig+0xd0>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00b      	beq.n	8005e36 <TIM_Base_SetConfig+0x62>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e24:	d007      	beq.n	8005e36 <TIM_Base_SetConfig+0x62>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a1f      	ldr	r2, [pc, #124]	; (8005ea8 <TIM_Base_SetConfig+0xd4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d003      	beq.n	8005e36 <TIM_Base_SetConfig+0x62>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a1e      	ldr	r2, [pc, #120]	; (8005eac <TIM_Base_SetConfig+0xd8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d108      	bne.n	8005e48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a0d      	ldr	r2, [pc, #52]	; (8005ea4 <TIM_Base_SetConfig+0xd0>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d103      	bne.n	8005e7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	691a      	ldr	r2, [r3, #16]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d005      	beq.n	8005e9a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	f023 0201 	bic.w	r2, r3, #1
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	611a      	str	r2, [r3, #16]
  }
}
 8005e9a:	bf00      	nop
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bc80      	pop	{r7}
 8005ea2:	4770      	bx	lr
 8005ea4:	40012c00 	.word	0x40012c00
 8005ea8:	40000400 	.word	0x40000400
 8005eac:	40000800 	.word	0x40000800

08005eb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	f023 0201 	bic.w	r2, r3, #1
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f023 030a 	bic.w	r3, r3, #10
 8005eec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	621a      	str	r2, [r3, #32]
}
 8005f02:	bf00      	nop
 8005f04:	371c      	adds	r7, #28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bc80      	pop	{r7}
 8005f0a:	4770      	bx	lr

08005f0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	f023 0210 	bic.w	r2, r3, #16
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	031b      	lsls	r3, r3, #12
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f48:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	621a      	str	r2, [r3, #32]
}
 8005f60:	bf00      	nop
 8005f62:	371c      	adds	r7, #28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bc80      	pop	{r7}
 8005f68:	4770      	bx	lr

08005f6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b085      	sub	sp, #20
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	f043 0307 	orr.w	r3, r3, #7
 8005f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	609a      	str	r2, [r3, #8]
}
 8005f94:	bf00      	nop
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bc80      	pop	{r7}
 8005f9c:	4770      	bx	lr

08005f9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b087      	sub	sp, #28
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
 8005faa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fb8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	021a      	lsls	r2, r3, #8
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	609a      	str	r2, [r3, #8]
}
 8005fd2:	bf00      	nop
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bc80      	pop	{r7}
 8005fda:	4770      	bx	lr

08005fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d101      	bne.n	8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	e046      	b.n	8006082 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a16      	ldr	r2, [pc, #88]	; (800608c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00e      	beq.n	8006056 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006040:	d009      	beq.n	8006056 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a12      	ldr	r2, [pc, #72]	; (8006090 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d004      	beq.n	8006056 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a10      	ldr	r2, [pc, #64]	; (8006094 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d10c      	bne.n	8006070 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800605c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	4313      	orrs	r3, r2
 8006066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	bc80      	pop	{r7}
 800608a:	4770      	bx	lr
 800608c:	40012c00 	.word	0x40012c00
 8006090:	40000400 	.word	0x40000400
 8006094:	40000800 	.word	0x40000800

08006098 <memset>:
 8006098:	4603      	mov	r3, r0
 800609a:	4402      	add	r2, r0
 800609c:	4293      	cmp	r3, r2
 800609e:	d100      	bne.n	80060a2 <memset+0xa>
 80060a0:	4770      	bx	lr
 80060a2:	f803 1b01 	strb.w	r1, [r3], #1
 80060a6:	e7f9      	b.n	800609c <memset+0x4>

080060a8 <__libc_init_array>:
 80060a8:	b570      	push	{r4, r5, r6, lr}
 80060aa:	2600      	movs	r6, #0
 80060ac:	4d0c      	ldr	r5, [pc, #48]	; (80060e0 <__libc_init_array+0x38>)
 80060ae:	4c0d      	ldr	r4, [pc, #52]	; (80060e4 <__libc_init_array+0x3c>)
 80060b0:	1b64      	subs	r4, r4, r5
 80060b2:	10a4      	asrs	r4, r4, #2
 80060b4:	42a6      	cmp	r6, r4
 80060b6:	d109      	bne.n	80060cc <__libc_init_array+0x24>
 80060b8:	f000 f828 	bl	800610c <_init>
 80060bc:	2600      	movs	r6, #0
 80060be:	4d0a      	ldr	r5, [pc, #40]	; (80060e8 <__libc_init_array+0x40>)
 80060c0:	4c0a      	ldr	r4, [pc, #40]	; (80060ec <__libc_init_array+0x44>)
 80060c2:	1b64      	subs	r4, r4, r5
 80060c4:	10a4      	asrs	r4, r4, #2
 80060c6:	42a6      	cmp	r6, r4
 80060c8:	d105      	bne.n	80060d6 <__libc_init_array+0x2e>
 80060ca:	bd70      	pop	{r4, r5, r6, pc}
 80060cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80060d0:	4798      	blx	r3
 80060d2:	3601      	adds	r6, #1
 80060d4:	e7ee      	b.n	80060b4 <__libc_init_array+0xc>
 80060d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060da:	4798      	blx	r3
 80060dc:	3601      	adds	r6, #1
 80060de:	e7f2      	b.n	80060c6 <__libc_init_array+0x1e>
 80060e0:	080061b8 	.word	0x080061b8
 80060e4:	080061b8 	.word	0x080061b8
 80060e8:	080061b8 	.word	0x080061b8
 80060ec:	080061bc 	.word	0x080061bc

080060f0 <memcpy>:
 80060f0:	440a      	add	r2, r1
 80060f2:	4291      	cmp	r1, r2
 80060f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80060f8:	d100      	bne.n	80060fc <memcpy+0xc>
 80060fa:	4770      	bx	lr
 80060fc:	b510      	push	{r4, lr}
 80060fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006102:	4291      	cmp	r1, r2
 8006104:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006108:	d1f9      	bne.n	80060fe <memcpy+0xe>
 800610a:	bd10      	pop	{r4, pc}

0800610c <_init>:
 800610c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610e:	bf00      	nop
 8006110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006112:	bc08      	pop	{r3}
 8006114:	469e      	mov	lr, r3
 8006116:	4770      	bx	lr

08006118 <_fini>:
 8006118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611a:	bf00      	nop
 800611c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800611e:	bc08      	pop	{r3}
 8006120:	469e      	mov	lr, r3
 8006122:	4770      	bx	lr
