
SensorNode01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007160  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08007270  08007270  00017270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007300  08007300  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007300  08007300  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007300  08007300  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007300  08007300  00017300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007304  08007304  00017304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000010  08007318  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08007318  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011821  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c76  00000000  00000000  0003189d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  00034518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ea2  00000000  00000000  000357e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019791  00000000  00000000  00036682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015e66  00000000  00000000  0004fe13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093975  00000000  00000000  00065c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005120  00000000  00000000  000f95f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000fe710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08007254 	.word	0x08007254

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08007254 	.word	0x08007254

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__aeabi_d2iz>:
 8000a50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a58:	d215      	bcs.n	8000a86 <__aeabi_d2iz+0x36>
 8000a5a:	d511      	bpl.n	8000a80 <__aeabi_d2iz+0x30>
 8000a5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a64:	d912      	bls.n	8000a8c <__aeabi_d2iz+0x3c>
 8000a66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a76:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7a:	bf18      	it	ne
 8000a7c:	4240      	negne	r0, r0
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8a:	d105      	bne.n	8000a98 <__aeabi_d2iz+0x48>
 8000a8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	bf08      	it	eq
 8000a92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_frsub>:
 8000b80:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b84:	e002      	b.n	8000b8c <__addsf3>
 8000b86:	bf00      	nop

08000b88 <__aeabi_fsub>:
 8000b88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b8c <__addsf3>:
 8000b8c:	0042      	lsls	r2, r0, #1
 8000b8e:	bf1f      	itttt	ne
 8000b90:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b94:	ea92 0f03 	teqne	r2, r3
 8000b98:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b9c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba0:	d06a      	beq.n	8000c78 <__addsf3+0xec>
 8000ba2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000baa:	bfc1      	itttt	gt
 8000bac:	18d2      	addgt	r2, r2, r3
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	4048      	eorgt	r0, r1
 8000bb2:	4041      	eorgt	r1, r0
 8000bb4:	bfb8      	it	lt
 8000bb6:	425b      	neglt	r3, r3
 8000bb8:	2b19      	cmp	r3, #25
 8000bba:	bf88      	it	hi
 8000bbc:	4770      	bxhi	lr
 8000bbe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4249      	negne	r1, r1
 8000bde:	ea92 0f03 	teq	r2, r3
 8000be2:	d03f      	beq.n	8000c64 <__addsf3+0xd8>
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bec:	eb10 000c 	adds.w	r0, r0, ip
 8000bf0:	f1c3 0320 	rsb	r3, r3, #32
 8000bf4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfc:	d502      	bpl.n	8000c04 <__addsf3+0x78>
 8000bfe:	4249      	negs	r1, r1
 8000c00:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c04:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c08:	d313      	bcc.n	8000c32 <__addsf3+0xa6>
 8000c0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0e:	d306      	bcc.n	8000c1e <__addsf3+0x92>
 8000c10:	0840      	lsrs	r0, r0, #1
 8000c12:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c16:	f102 0201 	add.w	r2, r2, #1
 8000c1a:	2afe      	cmp	r2, #254	; 0xfe
 8000c1c:	d251      	bcs.n	8000cc2 <__addsf3+0x136>
 8000c1e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c26:	bf08      	it	eq
 8000c28:	f020 0001 	biceq.w	r0, r0, #1
 8000c2c:	ea40 0003 	orr.w	r0, r0, r3
 8000c30:	4770      	bx	lr
 8000c32:	0049      	lsls	r1, r1, #1
 8000c34:	eb40 0000 	adc.w	r0, r0, r0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	bf28      	it	cs
 8000c3c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c40:	d2ed      	bcs.n	8000c1e <__addsf3+0x92>
 8000c42:	fab0 fc80 	clz	ip, r0
 8000c46:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c4a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c52:	bfaa      	itet	ge
 8000c54:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c58:	4252      	neglt	r2, r2
 8000c5a:	4318      	orrge	r0, r3
 8000c5c:	bfbc      	itt	lt
 8000c5e:	40d0      	lsrlt	r0, r2
 8000c60:	4318      	orrlt	r0, r3
 8000c62:	4770      	bx	lr
 8000c64:	f092 0f00 	teq	r2, #0
 8000c68:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c6c:	bf06      	itte	eq
 8000c6e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c72:	3201      	addeq	r2, #1
 8000c74:	3b01      	subne	r3, #1
 8000c76:	e7b5      	b.n	8000be4 <__addsf3+0x58>
 8000c78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c80:	bf18      	it	ne
 8000c82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c86:	d021      	beq.n	8000ccc <__addsf3+0x140>
 8000c88:	ea92 0f03 	teq	r2, r3
 8000c8c:	d004      	beq.n	8000c98 <__addsf3+0x10c>
 8000c8e:	f092 0f00 	teq	r2, #0
 8000c92:	bf08      	it	eq
 8000c94:	4608      	moveq	r0, r1
 8000c96:	4770      	bx	lr
 8000c98:	ea90 0f01 	teq	r0, r1
 8000c9c:	bf1c      	itt	ne
 8000c9e:	2000      	movne	r0, #0
 8000ca0:	4770      	bxne	lr
 8000ca2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca6:	d104      	bne.n	8000cb2 <__addsf3+0x126>
 8000ca8:	0040      	lsls	r0, r0, #1
 8000caa:	bf28      	it	cs
 8000cac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cb0:	4770      	bx	lr
 8000cb2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb6:	bf3c      	itt	cc
 8000cb8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cbc:	4770      	bxcc	lr
 8000cbe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cc2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cca:	4770      	bx	lr
 8000ccc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cd0:	bf16      	itet	ne
 8000cd2:	4608      	movne	r0, r1
 8000cd4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd8:	4601      	movne	r1, r0
 8000cda:	0242      	lsls	r2, r0, #9
 8000cdc:	bf06      	itte	eq
 8000cde:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ce2:	ea90 0f01 	teqeq	r0, r1
 8000ce6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cea:	4770      	bx	lr

08000cec <__aeabi_ui2f>:
 8000cec:	f04f 0300 	mov.w	r3, #0
 8000cf0:	e004      	b.n	8000cfc <__aeabi_i2f+0x8>
 8000cf2:	bf00      	nop

08000cf4 <__aeabi_i2f>:
 8000cf4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf8:	bf48      	it	mi
 8000cfa:	4240      	negmi	r0, r0
 8000cfc:	ea5f 0c00 	movs.w	ip, r0
 8000d00:	bf08      	it	eq
 8000d02:	4770      	bxeq	lr
 8000d04:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d08:	4601      	mov	r1, r0
 8000d0a:	f04f 0000 	mov.w	r0, #0
 8000d0e:	e01c      	b.n	8000d4a <__aeabi_l2f+0x2a>

08000d10 <__aeabi_ul2f>:
 8000d10:	ea50 0201 	orrs.w	r2, r0, r1
 8000d14:	bf08      	it	eq
 8000d16:	4770      	bxeq	lr
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e00a      	b.n	8000d34 <__aeabi_l2f+0x14>
 8000d1e:	bf00      	nop

08000d20 <__aeabi_l2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d2c:	d502      	bpl.n	8000d34 <__aeabi_l2f+0x14>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	ea5f 0c01 	movs.w	ip, r1
 8000d38:	bf02      	ittt	eq
 8000d3a:	4684      	moveq	ip, r0
 8000d3c:	4601      	moveq	r1, r0
 8000d3e:	2000      	moveq	r0, #0
 8000d40:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d44:	bf08      	it	eq
 8000d46:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4e:	fabc f28c 	clz	r2, ip
 8000d52:	3a08      	subs	r2, #8
 8000d54:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d58:	db10      	blt.n	8000d7c <__aeabi_l2f+0x5c>
 8000d5a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5e:	4463      	add	r3, ip
 8000d60:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	f020 0001 	biceq.w	r0, r0, #1
 8000d7a:	4770      	bx	lr
 8000d7c:	f102 0220 	add.w	r2, r2, #32
 8000d80:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d8c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_f2uiz>:
 8000d9c:	0042      	lsls	r2, r0, #1
 8000d9e:	d20e      	bcs.n	8000dbe <__aeabi_f2uiz+0x22>
 8000da0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000da4:	d30b      	bcc.n	8000dbe <__aeabi_f2uiz+0x22>
 8000da6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000daa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dae:	d409      	bmi.n	8000dc4 <__aeabi_f2uiz+0x28>
 8000db0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000db4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000db8:	fa23 f002 	lsr.w	r0, r3, r2
 8000dbc:	4770      	bx	lr
 8000dbe:	f04f 0000 	mov.w	r0, #0
 8000dc2:	4770      	bx	lr
 8000dc4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000dc8:	d101      	bne.n	8000dce <__aeabi_f2uiz+0x32>
 8000dca:	0242      	lsls	r2, r0, #9
 8000dcc:	d102      	bne.n	8000dd4 <__aeabi_f2uiz+0x38>
 8000dce:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd2:	4770      	bx	lr
 8000dd4:	f04f 0000 	mov.w	r0, #0
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <BH1750_Init>:


BH1750_DATA BH1750;

void BH1750_Init(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
//  hi2c1.Init.OwnAddress2 = 0;
//  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
//  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
//  HAL_I2C_Init(&hi2c1);

	BH1750.time = 120;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <BH1750_Init+0x20>)
 8000de2:	2278      	movs	r2, #120	; 0x78
 8000de4:	605a      	str	r2, [r3, #4]
	BH1750.mode	=	BH_CON_H_MODE;
 8000de6:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <BH1750_Init+0x20>)
 8000de8:	2210      	movs	r2, #16
 8000dea:	701a      	strb	r2, [r3, #0]
	BH1750.status	= GOOG;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <BH1750_Init+0x20>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	739a      	strb	r2, [r3, #14]
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	2000002c 	.word	0x2000002c

08000e00 <BH1750_Cmd_Write>:

void BH1750_Cmd_Write(uint8_t cmd)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
	uint8_t data[1];
	data[0] = cmd;
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	733b      	strb	r3, [r7, #12]
	while(HAL_I2C_Master_Transmit(&hi2c1,BH1750_Addr_L,data,1,BH1750.time)!=HAL_OK);
 8000e0e:	bf00      	nop
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <BH1750_Cmd_Write+0x44>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f107 020c 	add.w	r2, r7, #12
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	2146      	movs	r1, #70	; 0x46
 8000e1e:	480a      	ldr	r0, [pc, #40]	; (8000e48 <BH1750_Cmd_Write+0x48>)
 8000e20:	f002 fe90 	bl	8003b44 <HAL_I2C_Master_Transmit>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1f2      	bne.n	8000e10 <BH1750_Cmd_Write+0x10>
	__HAL_I2C_CLEAR_FLAG(&hi2c1,I2C_FLAG_STOPF);
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <BH1750_Cmd_Write+0x48>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f06f 0210 	mvn.w	r2, #16
 8000e32:	615a      	str	r2, [r3, #20]
	HAL_Delay(100);
 8000e34:	2064      	movs	r0, #100	; 0x64
 8000e36:	f001 fbe5 	bl	8002604 <HAL_Delay>
}
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	2000002c 	.word	0x2000002c
 8000e48:	20000100 	.word	0x20000100

08000e4c <BH1750_Start>:
void BH1750_Start(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	BH1750_Cmd_Write(BH1750_ON);	 //power on
 8000e50:	2001      	movs	r0, #1
 8000e52:	f7ff ffd5 	bl	8000e00 <BH1750_Cmd_Write>
	BH1750_Cmd_Write(BH1750_RESET);	//clear
 8000e56:	2007      	movs	r0, #7
 8000e58:	f7ff ffd2 	bl	8000e00 <BH1750_Cmd_Write>
	BH1750_Cmd_Write(BH1750.mode);  //mode
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <BH1750_Start+0x20>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ffcd 	bl	8000e00 <BH1750_Cmd_Write>
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2000002c 	.word	0x2000002c

08000e70 <BH1750_Read>:
uint16_t BH1750_Read(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af02      	add	r7, sp, #8
	uint8_t data_re[2] = {0,0};
 8000e76:	2300      	movs	r3, #0
 8000e78:	80bb      	strh	r3, [r7, #4]
	HAL_Delay(180); //Wait for measurement process
 8000e7a:	20b4      	movs	r0, #180	; 0xb4
 8000e7c:	f001 fbc2 	bl	8002604 <HAL_Delay>
	while(HAL_I2C_Master_Receive(&hi2c1,BH1750_Addr_L,data_re,2,BH1750.time*2)!=HAL_OK);
 8000e80:	bf00      	nop
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <BH1750_Read+0x84>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	1d3a      	adds	r2, r7, #4
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	2146      	movs	r1, #70	; 0x46
 8000e90:	4819      	ldr	r0, [pc, #100]	; (8000ef8 <BH1750_Read+0x88>)
 8000e92:	f002 ff55 	bl	8003d40 <HAL_I2C_Master_Receive>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1f2      	bne.n	8000e82 <BH1750_Read+0x12>
	//HAL_Delay(100);
	BH1750.result_lx=data_re[0];
 8000e9c:	793b      	ldrb	r3, [r7, #4]
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <BH1750_Read+0x84>)
 8000ea2:	819a      	strh	r2, [r3, #12]
	BH1750.result_lx=(data_re[0]<<8)+data_re[1];  //????,?????
 8000ea4:	793b      	ldrb	r3, [r7, #4]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	797b      	ldrb	r3, [r7, #5]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	4413      	add	r3, r2
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <BH1750_Read+0x84>)
 8000eb6:	819a      	strh	r2, [r3, #12]
	BH1750.result_lx= BH1750.result_lx/1.2;
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <BH1750_Read+0x84>)
 8000eba:	899b      	ldrh	r3, [r3, #12]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fb4b 	bl	8000558 <__aeabi_i2d>
 8000ec2:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <BH1750_Read+0x8c>)
 8000ec8:	f7ff fcda 	bl	8000880 <__aeabi_ddiv>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f7ff fde4 	bl	8000aa0 <__aeabi_d2uiz>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <BH1750_Read+0x84>)
 8000ede:	819a      	strh	r2, [r3, #12]
	HAL_Delay(100);
 8000ee0:	2064      	movs	r0, #100	; 0x64
 8000ee2:	f001 fb8f 	bl	8002604 <HAL_Delay>
	return BH1750.result_lx;
 8000ee6:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <BH1750_Read+0x84>)
 8000ee8:	899b      	ldrh	r3, [r3, #12]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000002c 	.word	0x2000002c
 8000ef8:	20000100 	.word	0x20000100
 8000efc:	3ff33333 	.word	0x3ff33333

08000f00 <DHT11_Start>:


extern TIM_HandleTypeDef htim1;

void DHT11_Start (void) // THIS FUNCTION WILL SEND THE HIGH START SIGNAL FORM MCU TO DHT11
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000f04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <DHT11_Start+0x30>)
 8000f0a:	f000 f8ab 	bl	8001064 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f14:	4806      	ldr	r0, [pc, #24]	; (8000f30 <DHT11_Start+0x30>)
 8000f16:	f002 fca0 	bl	800385a <HAL_GPIO_WritePin>
	delay (18000);   // wait 18ms FOR DHTT11 TO PREPAIR THE DATA
 8000f1a:	f244 6050 	movw	r0, #18000	; 0x4650
 8000f1e:	f000 f889 	bl	8001034 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8000f22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f26:	4802      	ldr	r0, [pc, #8]	; (8000f30 <DHT11_Start+0x30>)
 8000f28:	f000 f8b9 	bl	800109e <Set_Pin_Input>
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40010c00 	.word	0x40010c00

08000f34 <DHT11_Read>:


uint8_t DHT11_Read (void) // READ THE DATA; WAIT 40US IF THE STATE IS LOW THEN THE BIT IS "0" ELSE WILL "1". BECAUSE HIGH SIGNAL WITHIN 26-28US IS "0" AND 70US IS "1".
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71bb      	strb	r3, [r7, #6]
 8000f3e:	e03a      	b.n	8000fb6 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8000f40:	bf00      	nop
 8000f42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f46:	4820      	ldr	r0, [pc, #128]	; (8000fc8 <DHT11_Read+0x94>)
 8000f48:	f002 fc70 	bl	800382c <HAL_GPIO_ReadPin>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d0f7      	beq.n	8000f42 <DHT11_Read+0xe>
		delay (40);   // wait for 40 us
 8000f52:	2028      	movs	r0, #40	; 0x28
 8000f54:	f000 f86e 	bl	8001034 <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000f58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f5c:	481a      	ldr	r0, [pc, #104]	; (8000fc8 <DHT11_Read+0x94>)
 8000f5e:	f002 fc65 	bl	800382c <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d10e      	bne.n	8000f86 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8000f68:	79bb      	ldrb	r3, [r7, #6]
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2201      	movs	r2, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	b25b      	sxtb	r3, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	b25a      	sxtb	r2, r3
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	b25b      	sxtb	r3, r3
 8000f82:	71fb      	strb	r3, [r7, #7]
 8000f84:	e00b      	b.n	8000f9e <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000f86:	79bb      	ldrb	r3, [r7, #6]
 8000f88:	f1c3 0307 	rsb	r3, r3, #7
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	b25a      	sxtb	r2, r3
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8000f9e:	bf00      	nop
 8000fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa4:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <DHT11_Read+0x94>)
 8000fa6:	f002 fc41 	bl	800382c <HAL_GPIO_ReadPin>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1f7      	bne.n	8000fa0 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	71bb      	strb	r3, [r7, #6]
 8000fb6:	79bb      	ldrb	r3, [r7, #6]
 8000fb8:	2b07      	cmp	r3, #7
 8000fba:	d9c1      	bls.n	8000f40 <DHT11_Read+0xc>
	}
	return i;
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40010c00 	.word	0x40010c00

08000fcc <DHT11_Check_Response>:
uint8_t DHT11_Check_Response (void) // CHECK THE RESPOND ACK FROM THE DHT11: 40us pull up by MCU, 80us pull down and 80us pull up ACK signals by DHT11
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000fd6:	2028      	movs	r0, #40	; 0x28
 8000fd8:	f000 f82c 	bl	8001034 <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000fdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fe0:	4813      	ldr	r0, [pc, #76]	; (8001030 <DHT11_Check_Response+0x64>)
 8000fe2:	f002 fc23 	bl	800382c <HAL_GPIO_ReadPin>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d10f      	bne.n	800100c <DHT11_Check_Response+0x40>
	{
		delay (90);
 8000fec:	205a      	movs	r0, #90	; 0x5a
 8000fee:	f000 f821 	bl	8001034 <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000ff2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff6:	480e      	ldr	r0, [pc, #56]	; (8001030 <DHT11_Check_Response+0x64>)
 8000ff8:	f002 fc18 	bl	800382c <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <DHT11_Check_Response+0x3c>
 8001002:	2301      	movs	r3, #1
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	e001      	b.n	800100c <DHT11_Check_Response+0x40>
		else Response = -1;
 8001008:	23ff      	movs	r3, #255	; 0xff
 800100a:	71fb      	strb	r3, [r7, #7]
	}
	if (Response == 1) {
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d108      	bne.n	8001024 <DHT11_Check_Response+0x58>
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // if received the ACK, we wait for the DHT11 pull the pin to go low
 8001012:	bf00      	nop
 8001014:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <DHT11_Check_Response+0x64>)
 800101a:	f002 fc07 	bl	800382c <HAL_GPIO_ReadPin>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1f7      	bne.n	8001014 <DHT11_Check_Response+0x48>
	}

	return Response;
 8001024:	79fb      	ldrb	r3, [r7, #7]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40010c00 	.word	0x40010c00

08001034 <delay>:


void delay (uint16_t delay)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <delay+0x2c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2200      	movs	r2, #0
 8001044:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8001046:	bf00      	nop
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <delay+0x2c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	429a      	cmp	r2, r3
 8001052:	d3f9      	bcc.n	8001048 <delay+0x14>
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	200001c0 	.word	0x200001c0

08001064 <Set_Pin_Output>:



void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800107e:	887b      	ldrh	r3, [r7, #2]
 8001080:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	2301      	movs	r3, #1
 8001084:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2302      	movs	r3, #2
 8001088:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	4619      	mov	r1, r3
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f002 fa47 	bl	8003524 <HAL_GPIO_Init>
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	460b      	mov	r3, r1
 80010a8:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	f107 0308 	add.w	r3, r7, #8
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010b8:	887b      	ldrh	r3, [r7, #2]
 80010ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010c4:	f107 0308 	add.w	r3, r7, #8
 80010c8:	4619      	mov	r1, r3
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f002 fa2a 	bl	8003524 <HAL_GPIO_Init>
}
 80010d0:	bf00      	nop
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <Check_RH>:

float Check_RH(void)
{
 80010d8:	b5b0      	push	{r4, r5, r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
	  uint8_t Rh_byte1, Rh_byte2;
	  float Humidity;
	  Rh_byte1 = DHT11_Read();
 80010de:	f7ff ff29 	bl	8000f34 <DHT11_Read>
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
	  Rh_byte2 = DHT11_Read();
 80010e6:	f7ff ff25 	bl	8000f34 <DHT11_Read>
 80010ea:	4603      	mov	r3, r0
 80010ec:	71bb      	strb	r3, [r7, #6]
	  Humidity = (float)(Rh_byte1 + Rh_byte2 / 10.0);
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fa31 	bl	8000558 <__aeabi_i2d>
 80010f6:	4604      	mov	r4, r0
 80010f8:	460d      	mov	r5, r1
 80010fa:	79bb      	ldrb	r3, [r7, #6]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fa2b 	bl	8000558 <__aeabi_i2d>
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <Check_RH+0x5c>)
 8001108:	f7ff fbba 	bl	8000880 <__aeabi_ddiv>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4620      	mov	r0, r4
 8001112:	4629      	mov	r1, r5
 8001114:	f7ff f8d4 	bl	80002c0 <__adddf3>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4610      	mov	r0, r2
 800111e:	4619      	mov	r1, r3
 8001120:	f7ff fcde 	bl	8000ae0 <__aeabi_d2f>
 8001124:	4603      	mov	r3, r0
 8001126:	603b      	str	r3, [r7, #0]
	  return Humidity;
 8001128:	683b      	ldr	r3, [r7, #0]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bdb0      	pop	{r4, r5, r7, pc}
 8001132:	bf00      	nop
 8001134:	40240000 	.word	0x40240000

08001138 <Check_Temp>:

float Check_Temp(void)
{
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
	  uint8_t Temp_byte1, Temp_byte2;
	  float Temperature;
	  Temp_byte1 = DHT11_Read();
 800113e:	f7ff fef9 	bl	8000f34 <DHT11_Read>
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	  Temp_byte2 = DHT11_Read();
 8001146:	f7ff fef5 	bl	8000f34 <DHT11_Read>
 800114a:	4603      	mov	r3, r0
 800114c:	71bb      	strb	r3, [r7, #6]
	  Temperature = (float)(Temp_byte1 + Temp_byte2 / 10.0);
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fa01 	bl	8000558 <__aeabi_i2d>
 8001156:	4604      	mov	r4, r0
 8001158:	460d      	mov	r5, r1
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f9fb 	bl	8000558 <__aeabi_i2d>
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <Check_Temp+0x5c>)
 8001168:	f7ff fb8a 	bl	8000880 <__aeabi_ddiv>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4620      	mov	r0, r4
 8001172:	4629      	mov	r1, r5
 8001174:	f7ff f8a4 	bl	80002c0 <__adddf3>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	f7ff fcae 	bl	8000ae0 <__aeabi_d2f>
 8001184:	4603      	mov	r3, r0
 8001186:	603b      	str	r3, [r7, #0]
	  return Temperature;
 8001188:	683b      	ldr	r3, [r7, #0]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bdb0      	pop	{r4, r5, r7, pc}
 8001192:	bf00      	nop
 8001194:	40240000 	.word	0x40240000

08001198 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8001198:	b4b0      	push	{r4, r5, r7}
 800119a:	b08f      	sub	sp, #60	; 0x3c
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80011a0:	f240 13b1 	movw	r3, #433	; 0x1b1
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80011a6:	2307      	movs	r3, #7
 80011a8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80011ac:	2307      	movs	r3, #7
 80011ae:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80011b2:	2301      	movs	r3, #1
 80011b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80011b8:	23ff      	movs	r3, #255	; 0xff
 80011ba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 80011be:	2364      	movs	r3, #100	; 0x64
 80011c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 80011c4:	2308      	movs	r3, #8
 80011c6:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	461d      	mov	r5, r3
 80011cc:	f107 040c 	add.w	r4, r7, #12
 80011d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	373c      	adds	r7, #60	; 0x3c
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bcb0      	pop	{r4, r5, r7}
 80011e8:	4770      	bx	lr

080011ea <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b084      	sub	sp, #16
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 80011f4:	2101      	movs	r1, #1
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 f9ff 	bl	80015fa <LoRa_read>
 80011fc:	4603      	mov	r3, r0
 80011fe:	73bb      	strb	r3, [r7, #14]
	data = read;
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d107      	bne.n	800121a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800120a:	7bbb      	ldrb	r3, [r7, #14]
 800120c:	f023 0307 	bic.w	r3, r3, #7
 8001210:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	61da      	str	r2, [r3, #28]
 8001218:	e03e      	b.n	8001298 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d10c      	bne.n	800123a <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8001220:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001224:	f023 0307 	bic.w	r3, r3, #7
 8001228:	b25b      	sxtb	r3, r3
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	b25b      	sxtb	r3, r3
 8001230:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	61da      	str	r2, [r3, #28]
 8001238:	e02e      	b.n	8001298 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	2b03      	cmp	r3, #3
 800123e:	d10c      	bne.n	800125a <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8001240:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001244:	f023 0307 	bic.w	r3, r3, #7
 8001248:	b25b      	sxtb	r3, r3
 800124a:	f043 0303 	orr.w	r3, r3, #3
 800124e:	b25b      	sxtb	r3, r3
 8001250:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2203      	movs	r2, #3
 8001256:	61da      	str	r2, [r3, #28]
 8001258:	e01e      	b.n	8001298 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	2b05      	cmp	r3, #5
 800125e:	d10c      	bne.n	800127a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8001260:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001264:	f023 0307 	bic.w	r3, r3, #7
 8001268:	b25b      	sxtb	r3, r3
 800126a:	f043 0305 	orr.w	r3, r3, #5
 800126e:	b25b      	sxtb	r3, r3
 8001270:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2205      	movs	r2, #5
 8001276:	61da      	str	r2, [r3, #28]
 8001278:	e00e      	b.n	8001298 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	2b06      	cmp	r3, #6
 800127e:	d10b      	bne.n	8001298 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8001280:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001284:	f023 0307 	bic.w	r3, r3, #7
 8001288:	b25b      	sxtb	r3, r3
 800128a:	f043 0306 	orr.w	r3, r3, #6
 800128e:	b25b      	sxtb	r3, r3
 8001290:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2206      	movs	r2, #6
 8001296:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	461a      	mov	r2, r3
 800129c:	2101      	movs	r1, #1
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 f9c5 	bl	800162e <LoRa_write>
	//HAL_Delay(10);
}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	4613      	mov	r3, r2
 80012ba:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6818      	ldr	r0, [r3, #0]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	889b      	ldrh	r3, [r3, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	4619      	mov	r1, r3
 80012c8:	f002 fac7 	bl	800385a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6998      	ldr	r0, [r3, #24]
 80012d0:	88fa      	ldrh	r2, [r7, #6]
 80012d2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012d6:	68b9      	ldr	r1, [r7, #8]
 80012d8:	f004 ffa0 	bl	800621c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80012dc:	bf00      	nop
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f005 fba0 	bl	8006a28 <HAL_SPI_GetState>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d1f7      	bne.n	80012de <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6998      	ldr	r0, [r3, #24]
 80012f2:	8b3a      	ldrh	r2, [r7, #24]
 80012f4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012f8:	6839      	ldr	r1, [r7, #0]
 80012fa:	f005 f8d3 	bl	80064a4 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80012fe:	bf00      	nop
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4618      	mov	r0, r3
 8001306:	f005 fb8f 	bl	8006a28 <HAL_SPI_GetState>
 800130a:	4603      	mov	r3, r0
 800130c:	2b01      	cmp	r3, #1
 800130e:	d1f7      	bne.n	8001300 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	889b      	ldrh	r3, [r3, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	4619      	mov	r1, r3
 800131c:	f002 fa9d 	bl	800385a <HAL_GPIO_WritePin>
}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	4613      	mov	r3, r2
 8001336:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	889b      	ldrh	r3, [r3, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	4619      	mov	r1, r3
 8001344:	f002 fa89 	bl	800385a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6998      	ldr	r0, [r3, #24]
 800134c:	88fa      	ldrh	r2, [r7, #6]
 800134e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001352:	68b9      	ldr	r1, [r7, #8]
 8001354:	f004 ff62 	bl	800621c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001358:	bf00      	nop
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	4618      	mov	r0, r3
 8001360:	f005 fb62 	bl	8006a28 <HAL_SPI_GetState>
 8001364:	4603      	mov	r3, r0
 8001366:	2b01      	cmp	r3, #1
 8001368:	d1f7      	bne.n	800135a <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6998      	ldr	r0, [r3, #24]
 800136e:	8b3a      	ldrh	r2, [r7, #24]
 8001370:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001374:	6839      	ldr	r1, [r7, #0]
 8001376:	f004 ff51 	bl	800621c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800137a:	bf00      	nop
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4618      	mov	r0, r3
 8001382:	f005 fb51 	bl	8006a28 <HAL_SPI_GetState>
 8001386:	4603      	mov	r3, r0
 8001388:	2b01      	cmp	r3, #1
 800138a:	d1f7      	bne.n	800137c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	889b      	ldrh	r3, [r3, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	4619      	mov	r1, r3
 8001398:	f002 fa5f 	bl	800385a <HAL_GPIO_WritePin>
}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 80013b0:	2126      	movs	r1, #38	; 0x26
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 f921 	bl	80015fa <LoRa_read>
 80013b8:	4603      	mov	r3, r0
 80013ba:	73bb      	strb	r3, [r7, #14]

	if(value)
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d004      	beq.n	80013cc <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 80013c2:	7bbb      	ldrb	r3, [r7, #14]
 80013c4:	f043 0308 	orr.w	r3, r3, #8
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	e003      	b.n	80013d4 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	f023 0308 	bic.w	r3, r3, #8
 80013d2:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	461a      	mov	r2, r3
 80013d8:	2126      	movs	r1, #38	; 0x26
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f927 	bl	800162e <LoRa_write>
	HAL_Delay(10);
 80013e0:	200a      	movs	r0, #10
 80013e2:	f001 f90f 	bl	8002604 <HAL_Delay>
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b096      	sub	sp, #88	; 0x58
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 80013f8:	4a17      	ldr	r2, [pc, #92]	; (8001458 <LoRa_setAutoLDO+0x68>)
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	4611      	mov	r1, r2
 8001400:	2250      	movs	r2, #80	; 0x50
 8001402:	4618      	mov	r0, r3
 8001404:	f005 ff18 	bl	8007238 <memcpy>

	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800140e:	461a      	mov	r2, r3
 8001410:	2301      	movs	r3, #1
 8001412:	4093      	lsls	r3, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f89f 	bl	8000558 <__aeabi_i2d>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	3358      	adds	r3, #88	; 0x58
 8001424:	443b      	add	r3, r7
 8001426:	3b50      	subs	r3, #80	; 0x50
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7ff fa28 	bl	8000880 <__aeabi_ddiv>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fb0a 	bl	8000a50 <__aeabi_d2iz>
 800143c:	4603      	mov	r3, r0
 800143e:	2b10      	cmp	r3, #16
 8001440:	bfcc      	ite	gt
 8001442:	2301      	movgt	r3, #1
 8001444:	2300      	movle	r3, #0
 8001446:	b2db      	uxtb	r3, r3
 8001448:	4619      	mov	r1, r3
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ffaa 	bl	80013a4 <LoRa_setLowDaraRateOptimization>
}
 8001450:	bf00      	nop
 8001452:	3758      	adds	r7, #88	; 0x58
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	08007270 	.word	0x08007270

0800145c <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	04db      	lsls	r3, r3, #19
 800146a:	115b      	asrs	r3, r3, #5
 800146c:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	0c1b      	lsrs	r3, r3, #16
 8001472:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001474:	7afb      	ldrb	r3, [r7, #11]
 8001476:	461a      	mov	r2, r3
 8001478:	2106      	movs	r1, #6
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f8d7 	bl	800162e <LoRa_write>
	HAL_Delay(5);
 8001480:	2005      	movs	r0, #5
 8001482:	f001 f8bf 	bl	8002604 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 800148c:	7afb      	ldrb	r3, [r7, #11]
 800148e:	461a      	mov	r2, r3
 8001490:	2107      	movs	r1, #7
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 f8cb 	bl	800162e <LoRa_write>
	HAL_Delay(5);
 8001498:	2005      	movs	r0, #5
 800149a:	f001 f8b3 	bl	8002604 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80014a2:	7afb      	ldrb	r3, [r7, #11]
 80014a4:	461a      	mov	r2, r3
 80014a6:	2108      	movs	r1, #8
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f8c0 	bl	800162e <LoRa_write>
	HAL_Delay(5);
 80014ae:	2005      	movs	r0, #5
 80014b0:	f001 f8a8 	bl	8002604 <HAL_Delay>
}
 80014b4:	bf00      	nop
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	2b0c      	cmp	r3, #12
 80014ca:	dd01      	ble.n	80014d0 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80014cc:	230c      	movs	r3, #12
 80014ce:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	dc01      	bgt.n	80014da <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80014d6:	2307      	movs	r3, #7
 80014d8:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80014da:	211e      	movs	r1, #30
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f88c 	bl	80015fa <LoRa_read>
 80014e2:	4603      	mov	r3, r0
 80014e4:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80014e6:	200a      	movs	r0, #10
 80014e8:	f001 f88c 	bl	8002604 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	011b      	lsls	r3, r3, #4
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4413      	add	r3, r2
 80014fe:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001500:	7bbb      	ldrb	r3, [r7, #14]
 8001502:	461a      	mov	r2, r3
 8001504:	211e      	movs	r1, #30
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 f891 	bl	800162e <LoRa_write>
	HAL_Delay(10);
 800150c:	200a      	movs	r0, #10
 800150e:	f001 f879 	bl	8002604 <HAL_Delay>

	LoRa_setAutoLDO(_LoRa);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ff6c 	bl	80013f0 <LoRa_setAutoLDO>
}
 8001518:	bf00      	nop
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800152c:	78fb      	ldrb	r3, [r7, #3]
 800152e:	461a      	mov	r2, r3
 8001530:	2109      	movs	r1, #9
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f87b 	bl	800162e <LoRa_write>
	HAL_Delay(10);
 8001538:	200a      	movs	r0, #10
 800153a:	f001 f863 	bl	8002604 <HAL_Delay>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	2b2c      	cmp	r3, #44	; 0x2c
 800155c:	d801      	bhi.n	8001562 <LoRa_setOCP+0x1a>
		current = 45;
 800155e:	232d      	movs	r3, #45	; 0x2d
 8001560:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	2bf0      	cmp	r3, #240	; 0xf0
 8001566:	d901      	bls.n	800156c <LoRa_setOCP+0x24>
		current = 240;
 8001568:	23f0      	movs	r3, #240	; 0xf0
 800156a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 800156c:	78fb      	ldrb	r3, [r7, #3]
 800156e:	2b78      	cmp	r3, #120	; 0x78
 8001570:	d809      	bhi.n	8001586 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001572:	78fb      	ldrb	r3, [r7, #3]
 8001574:	3b2d      	subs	r3, #45	; 0x2d
 8001576:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <LoRa_setOCP+0x78>)
 8001578:	fb82 1203 	smull	r1, r2, r2, r3
 800157c:	1052      	asrs	r2, r2, #1
 800157e:	17db      	asrs	r3, r3, #31
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	e00b      	b.n	800159e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001586:	78fb      	ldrb	r3, [r7, #3]
 8001588:	2bf0      	cmp	r3, #240	; 0xf0
 800158a:	d808      	bhi.n	800159e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	331e      	adds	r3, #30
 8001590:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <LoRa_setOCP+0x78>)
 8001592:	fb82 1203 	smull	r1, r2, r2, r3
 8001596:	1092      	asrs	r2, r2, #2
 8001598:	17db      	asrs	r3, r3, #31
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	3320      	adds	r3, #32
 80015a2:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	461a      	mov	r2, r3
 80015a8:	210b      	movs	r1, #11
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f83f 	bl	800162e <LoRa_write>
	HAL_Delay(10);
 80015b0:	200a      	movs	r0, #10
 80015b2:	f001 f827 	bl	8002604 <HAL_Delay>
}
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	66666667 	.word	0x66666667

080015c4 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80015cc:	211e      	movs	r1, #30
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f813 	bl	80015fa <LoRa_read>
 80015d4:	4603      	mov	r3, r0
 80015d6:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	f043 0307 	orr.w	r3, r3, #7
 80015de:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80015e0:	7bbb      	ldrb	r3, [r7, #14]
 80015e2:	461a      	mov	r2, r3
 80015e4:	211e      	movs	r1, #30
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f821 	bl	800162e <LoRa_write>
	HAL_Delay(10);
 80015ec:	200a      	movs	r0, #10
 80015ee:	f001 f809 	bl	8002604 <HAL_Delay>
}
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af02      	add	r7, sp, #8
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001606:	78fb      	ldrb	r3, [r7, #3]
 8001608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800160c:	b2db      	uxtb	r3, r3
 800160e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001610:	f107 030f 	add.w	r3, r7, #15
 8001614:	f107 010e 	add.w	r1, r7, #14
 8001618:	2201      	movs	r2, #1
 800161a:	9200      	str	r2, [sp, #0]
 800161c:	2201      	movs	r2, #1
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fe44 	bl	80012ac <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001624:	7bfb      	ldrb	r3, [r7, #15]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af02      	add	r7, sp, #8
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	460b      	mov	r3, r1
 8001638:	70fb      	strb	r3, [r7, #3]
 800163a:	4613      	mov	r3, r2
 800163c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800163e:	78fb      	ldrb	r3, [r7, #3]
 8001640:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001644:	b2db      	uxtb	r3, r3
 8001646:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001648:	78bb      	ldrb	r3, [r7, #2]
 800164a:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800164c:	f107 030f 	add.w	r3, r7, #15
 8001650:	f107 010e 	add.w	r1, r7, #14
 8001654:	2201      	movs	r2, #1
 8001656:	9200      	str	r2, [sp, #0]
 8001658:	2201      	movs	r2, #1
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff fe64 	bl	8001328 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001660:	bf00      	nop
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	461a      	mov	r2, r3
 8001674:	460b      	mov	r3, r1
 8001676:	72fb      	strb	r3, [r7, #11]
 8001678:	4613      	mov	r3, r2
 800167a:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 800167c:	7afb      	ldrb	r3, [r7, #11]
 800167e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001682:	b2db      	uxtb	r3, r3
 8001684:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	889b      	ldrh	r3, [r3, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	4619      	mov	r1, r3
 8001692:	f002 f8e2 	bl	800385a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6998      	ldr	r0, [r3, #24]
 800169a:	f107 0117 	add.w	r1, r7, #23
 800169e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80016a2:	2201      	movs	r2, #1
 80016a4:	f004 fdba 	bl	800621c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80016a8:	bf00      	nop
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f005 f9ba 	bl	8006a28 <HAL_SPI_GetState>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d1f7      	bne.n	80016aa <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6998      	ldr	r0, [r3, #24]
 80016be:	7abb      	ldrb	r3, [r7, #10]
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	f004 fda8 	bl	800621c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80016cc:	bf00      	nop
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f005 f9a8 	bl	8006a28 <HAL_SPI_GetState>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d1f7      	bne.n	80016ce <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	889b      	ldrh	r3, [r3, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	4619      	mov	r1, r3
 80016ea:	f002 f8b6 	bl	800385a <HAL_GPIO_WritePin>
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]

	return 1;
 80016fe:	2301      	movs	r3, #1
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr

0800170a <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	4611      	mov	r1, r2
 8001716:	461a      	mov	r2, r3
 8001718:	460b      	mov	r3, r1
 800171a:	71fb      	strb	r3, [r7, #7]
 800171c:	4613      	mov	r3, r2
 800171e:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001726:	2101      	movs	r1, #1
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f7ff fd5e 	bl	80011ea <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 800172e:	210e      	movs	r1, #14
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f7ff ff62 	bl	80015fa <LoRa_read>
 8001736:	4603      	mov	r3, r0
 8001738:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800173a:	7cfb      	ldrb	r3, [r7, #19]
 800173c:	461a      	mov	r2, r3
 800173e:	210d      	movs	r1, #13
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f7ff ff74 	bl	800162e <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	461a      	mov	r2, r3
 800174a:	2122      	movs	r1, #34	; 0x22
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f7ff ff6e 	bl	800162e <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	2100      	movs	r1, #0
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f7ff ff85 	bl	8001668 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800175e:	2103      	movs	r1, #3
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f7ff fd42 	bl	80011ea <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001766:	2112      	movs	r1, #18
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f7ff ff46 	bl	80015fa <LoRa_read>
 800176e:	4603      	mov	r3, r0
 8001770:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001772:	7cfb      	ldrb	r3, [r7, #19]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00a      	beq.n	8001792 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800177c:	22ff      	movs	r2, #255	; 0xff
 800177e:	2112      	movs	r1, #18
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f7ff ff54 	bl	800162e <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001786:	6979      	ldr	r1, [r7, #20]
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f7ff fd2e 	bl	80011ea <LoRa_gotoMode>
			return 1;
 800178e:	2301      	movs	r3, #1
 8001790:	e00f      	b.n	80017b2 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001792:	88bb      	ldrh	r3, [r7, #4]
 8001794:	3b01      	subs	r3, #1
 8001796:	80bb      	strh	r3, [r7, #4]
 8001798:	88bb      	ldrh	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d105      	bne.n	80017aa <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 800179e:	6979      	ldr	r1, [r7, #20]
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f7ff fd22 	bl	80011ea <LoRa_gotoMode>
				return 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e003      	b.n	80017b2 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 80017aa:	2001      	movs	r0, #1
 80017ac:	f000 ff2a 	bl	8002604 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80017b0:	e7d9      	b.n	8001766 <LoRa_transmit+0x5c>
	}
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80017c2:	2105      	movs	r1, #5
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff fd10 	bl	80011ea <LoRa_gotoMode>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80017d2:	b590      	push	{r4, r7, lr}
 80017d4:	b089      	sub	sp, #36	; 0x24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	4613      	mov	r3, r2
 80017de:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
 80017e8:	e007      	b.n	80017fa <LoRa_receive+0x28>
		data[i]=0;
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	4413      	add	r3, r2
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	3301      	adds	r3, #1
 80017f8:	61bb      	str	r3, [r7, #24]
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	429a      	cmp	r2, r3
 8001800:	dbf3      	blt.n	80017ea <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001802:	2101      	movs	r1, #1
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f7ff fcf0 	bl	80011ea <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 800180a:	2112      	movs	r1, #18
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f7ff fef4 	bl	80015fa <LoRa_read>
 8001812:	4603      	mov	r3, r0
 8001814:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8001816:	7cfb      	ldrb	r3, [r7, #19]
 8001818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181c:	2b00      	cmp	r3, #0
 800181e:	d02f      	beq.n	8001880 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001820:	22ff      	movs	r2, #255	; 0xff
 8001822:	2112      	movs	r1, #18
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f7ff ff02 	bl	800162e <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 800182a:	2113      	movs	r1, #19
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f7ff fee4 	bl	80015fa <LoRa_read>
 8001832:	4603      	mov	r3, r0
 8001834:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001836:	2110      	movs	r1, #16
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f7ff fede 	bl	80015fa <LoRa_read>
 800183e:	4603      	mov	r3, r0
 8001840:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001842:	7cfb      	ldrb	r3, [r7, #19]
 8001844:	461a      	mov	r2, r3
 8001846:	210d      	movs	r1, #13
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f7ff fef0 	bl	800162e <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 800184e:	7cba      	ldrb	r2, [r7, #18]
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	4293      	cmp	r3, r2
 8001854:	bf28      	it	cs
 8001856:	4613      	movcs	r3, r2
 8001858:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	e00b      	b.n	8001878 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	18d4      	adds	r4, r2, r3
 8001866:	2100      	movs	r1, #0
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f7ff fec6 	bl	80015fa <LoRa_read>
 800186e:	4603      	mov	r3, r0
 8001870:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	3301      	adds	r3, #1
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	7ffb      	ldrb	r3, [r7, #31]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	429a      	cmp	r2, r3
 800187e:	dbef      	blt.n	8001860 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001880:	2105      	movs	r1, #5
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f7ff fcb1 	bl	80011ea <LoRa_gotoMode>
    return min;
 8001888:	7ffb      	ldrb	r3, [r7, #31]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3724      	adds	r7, #36	; 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd90      	pop	{r4, r7, pc}

08001892 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001892:	b580      	push	{r7, lr}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ff2b 	bl	80016f6 <LoRa_isvalid>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 8096 	beq.w	80019d4 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80018a8:	2100      	movs	r1, #0
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff fc9d 	bl	80011ea <LoRa_gotoMode>
			HAL_Delay(10);
 80018b0:	200a      	movs	r0, #10
 80018b2:	f000 fea7 	bl	8002604 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80018b6:	2101      	movs	r1, #1
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff fe9e 	bl	80015fa <LoRa_read>
 80018be:	4603      	mov	r3, r0
 80018c0:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80018c2:	200a      	movs	r0, #10
 80018c4:	f000 fe9e 	bl	8002604 <HAL_Delay>
			data = read | 0x80;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018ce:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80018d0:	7bbb      	ldrb	r3, [r7, #14]
 80018d2:	461a      	mov	r2, r3
 80018d4:	2101      	movs	r1, #1
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fea9 	bl	800162e <LoRa_write>
			HAL_Delay(100);
 80018dc:	2064      	movs	r0, #100	; 0x64
 80018de:	f000 fe91 	bl	8002604 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	4619      	mov	r1, r3
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff fdb7 	bl	800145c <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80018f4:	4619      	mov	r1, r3
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff fe12 	bl	8001520 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001902:	4619      	mov	r1, r3
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff fe1f 	bl	8001548 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 800190a:	2223      	movs	r2, #35	; 0x23
 800190c:	210c      	movs	r1, #12
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fe8d 	bl	800162e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff fe55 	bl	80015c4 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001920:	4619      	mov	r1, r3
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff fdca 	bl	80014bc <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001928:	22ff      	movs	r2, #255	; 0xff
 800192a:	211f      	movs	r1, #31
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff fe7e 	bl	800162e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	b2da      	uxtb	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	b2db      	uxtb	r3, r3
 800194a:	4413      	add	r3, r2
 800194c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 800194e:	7bbb      	ldrb	r3, [r7, #14]
 8001950:	461a      	mov	r2, r3
 8001952:	211d      	movs	r1, #29
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff fe6a 	bl	800162e <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff fd48 	bl	80013f0 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	b29b      	uxth	r3, r3
 8001968:	b2db      	uxtb	r3, r3
 800196a:	461a      	mov	r2, r3
 800196c:	2120      	movs	r1, #32
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff fe5d 	bl	800162e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001978:	b2db      	uxtb	r3, r3
 800197a:	461a      	mov	r2, r3
 800197c:	2121      	movs	r1, #33	; 0x21
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff fe55 	bl	800162e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001984:	2140      	movs	r1, #64	; 0x40
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff fe37 	bl	80015fa <LoRa_read>
 800198c:	4603      	mov	r3, r0
 800198e:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001996:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001998:	7bbb      	ldrb	r3, [r7, #14]
 800199a:	461a      	mov	r2, r3
 800199c:	2140      	movs	r1, #64	; 0x40
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff fe45 	bl	800162e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80019a4:	2101      	movs	r1, #1
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff fc1f 	bl	80011ea <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80019b2:	200a      	movs	r0, #10
 80019b4:	f000 fe26 	bl	8002604 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80019b8:	2142      	movs	r1, #66	; 0x42
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff fe1d 	bl	80015fa <LoRa_read>
 80019c0:	4603      	mov	r3, r0
 80019c2:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	2b12      	cmp	r3, #18
 80019c8:	d101      	bne.n	80019ce <LoRa_init+0x13c>
				return LORA_OK;
 80019ca:	23c8      	movs	r3, #200	; 0xc8
 80019cc:	e004      	b.n	80019d8 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 80019ce:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80019d2:	e001      	b.n	80019d8 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 80019d4:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e0:	b5b0      	push	{r4, r5, r7, lr}
 80019e2:	b08c      	sub	sp, #48	; 0x30
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019e6:	f000 fdab 	bl	8002540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ea:	f000 f8e1 	bl	8001bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ee:	f000 fab3 	bl	8001f58 <MX_GPIO_Init>
  MX_DMA_Init();
 80019f2:	f000 fa93 	bl	8001f1c <MX_DMA_Init>
  MX_RTC_Init();
 80019f6:	f000 f9a7 	bl	8001d48 <MX_RTC_Init>
  MX_SPI1_Init();
 80019fa:	f000 fa09 	bl	8001e10 <MX_SPI1_Init>
  MX_I2C1_Init();
 80019fe:	f000 f975 	bl	8001cec <MX_I2C1_Init>
  MX_ADC1_Init();
 8001a02:	f000 f935 	bl	8001c70 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001a06:	f000 fa39 	bl	8001e7c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  BH1750_Init();
 8001a0a:	f7ff f9e7 	bl	8000ddc <BH1750_Init>
  HAL_TIM_Base_Start(&htim1);
 8001a0e:	485d      	ldr	r0, [pc, #372]	; (8001b84 <main+0x1a4>)
 8001a10:	f005 f972 	bl	8006cf8 <HAL_TIM_Base_Start>

//LORA STATUS CONFIG
  myLoRa = newLoRa();
 8001a14:	4c5c      	ldr	r4, [pc, #368]	; (8001b88 <main+0x1a8>)
 8001a16:	463b      	mov	r3, r7
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fbbd 	bl	8001198 <newLoRa>
 8001a1e:	4625      	mov	r5, r4
 8001a20:	463c      	mov	r4, r7
 8001a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a2e:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = NSS_GPIO_Port;
 8001a32:	4b55      	ldr	r3, [pc, #340]	; (8001b88 <main+0x1a8>)
 8001a34:	4a55      	ldr	r2, [pc, #340]	; (8001b8c <main+0x1ac>)
 8001a36:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 8001a38:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <main+0x1a8>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 8001a3e:	4b52      	ldr	r3, [pc, #328]	; (8001b88 <main+0x1a8>)
 8001a40:	4a52      	ldr	r2, [pc, #328]	; (8001b8c <main+0x1ac>)
 8001a42:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 8001a44:	4b50      	ldr	r3, [pc, #320]	; (8001b88 <main+0x1a8>)
 8001a46:	2202      	movs	r2, #2
 8001a48:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 8001a4a:	4b4f      	ldr	r3, [pc, #316]	; (8001b88 <main+0x1a8>)
 8001a4c:	4a4f      	ldr	r2, [pc, #316]	; (8001b8c <main+0x1ac>)
 8001a4e:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 8001a50:	4b4d      	ldr	r3, [pc, #308]	; (8001b88 <main+0x1a8>)
 8001a52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a56:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8001a58:	4b4b      	ldr	r3, [pc, #300]	; (8001b88 <main+0x1a8>)
 8001a5a:	4a4d      	ldr	r2, [pc, #308]	; (8001b90 <main+0x1b0>)
 8001a5c:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 440;             // default = 433 MHz
 8001a5e:	4b4a      	ldr	r3, [pc, #296]	; (8001b88 <main+0x1a8>)
 8001a60:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8001a64:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 8001a66:	4b48      	ldr	r3, [pc, #288]	; (8001b88 <main+0x1a8>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  myLoRa.bandWidth             = BW_31_25KHz;       // default = BW_125KHz
 8001a6e:	4b46      	ldr	r3, [pc, #280]	; (8001b88 <main+0x1a8>)
 8001a70:	2204      	movs	r2, #4
 8001a72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 8001a76:	4b44      	ldr	r3, [pc, #272]	; (8001b88 <main+0x1a8>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 8001a7e:	4b42      	ldr	r3, [pc, #264]	; (8001b88 <main+0x1a8>)
 8001a80:	22ff      	movs	r2, #255	; 0xff
 8001a82:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  myLoRa.overCurrentProtection = 130;             // default = 100 mA
 8001a86:	4b40      	ldr	r3, [pc, #256]	; (8001b88 <main+0x1a8>)
 8001a88:	2282      	movs	r2, #130	; 0x82
 8001a8a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  myLoRa.preamble              = 9;              // default = 8;
 8001a8e:	4b3e      	ldr	r3, [pc, #248]	; (8001b88 <main+0x1a8>)
 8001a90:	2209      	movs	r2, #9
 8001a92:	851a      	strh	r2, [r3, #40]	; 0x28
  if (LoRa_init(&myLoRa) == LORA_OK){
 8001a94:	483c      	ldr	r0, [pc, #240]	; (8001b88 <main+0x1a8>)
 8001a96:	f7ff fefc 	bl	8001892 <LoRa_init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2bc8      	cmp	r3, #200	; 0xc8
 8001a9e:	d102      	bne.n	8001aa6 <main+0xc6>
	  LoRa_Status = 1;
 8001aa0:	4b3c      	ldr	r3, [pc, #240]	; (8001b94 <main+0x1b4>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	801a      	strh	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
////TURN OFF THE INTERRUPT FROM SX1278 LORA MODULE TO AVOILD UNWANTED WAKEUP STM32F1 BY SEND MODULE TO SLEEPMODE
	LoRa_gotoMode(&myLoRa, SLEEP_MODE);
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4837      	ldr	r0, [pc, #220]	; (8001b88 <main+0x1a8>)
 8001aaa:	f7ff fb9e 	bl	80011ea <LoRa_gotoMode>
////ENTER SLEEPMODE AND NOW THE SYSTEM WAIT FOR INTERRUPT FROM RTC TO WAKEUP
	HAL_SuspendTick();
 8001aae:	f000 fdcd 	bl	800264c <HAL_SuspendTick>
//	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f002 ff49 	bl	800494c <HAL_PWR_EnterSTOPMode>
////RESUME TICK AFTER WAKING UP AND TURNON THE POWER MOSFET FOR READING DATA PROCESS
	SystemClock_Config();
 8001aba:	f000 f879 	bl	8001bb0 <SystemClock_Config>
	HAL_ResumeTick();
 8001abe:	f000 fdd3 	bl	8002668 <HAL_ResumeTick>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ac8:	4833      	ldr	r0, [pc, #204]	; (8001b98 <main+0x1b8>)
 8001aca:	f001 fec6 	bl	800385a <HAL_GPIO_WritePin>
	HAL_Delay(500); //Delay couple ms to stable the sensors's power
 8001ace:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ad2:	f000 fd97 	bl	8002604 <HAL_Delay>
	LoRa_gotoMode(&myLoRa, STNBY_MODE);
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	482b      	ldr	r0, [pc, #172]	; (8001b88 <main+0x1a8>)
 8001ada:	f7ff fb86 	bl	80011ea <LoRa_gotoMode>
	LoRa_startReceiving(&myLoRa);
 8001ade:	482a      	ldr	r0, [pc, #168]	; (8001b88 <main+0x1a8>)
 8001ae0:	f7ff fe6b 	bl	80017ba <LoRa_startReceiving>
//READ MQ135 AND STORE INTO DATA STRUCT
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&Sensor_data.Data_MQ135, 1);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	492d      	ldr	r1, [pc, #180]	; (8001b9c <main+0x1bc>)
 8001ae8:	482d      	ldr	r0, [pc, #180]	; (8001ba0 <main+0x1c0>)
 8001aea:	f000 fea3 	bl	8002834 <HAL_ADC_Start_DMA>
	HAL_Delay(10);
 8001aee:	200a      	movs	r0, #10
 8001af0:	f000 fd88 	bl	8002604 <HAL_Delay>
	HAL_ADC_Stop_DMA(&hadc1);
 8001af4:	482a      	ldr	r0, [pc, #168]	; (8001ba0 <main+0x1c0>)
 8001af6:	f000 ff7b 	bl	80029f0 <HAL_ADC_Stop_DMA>
//	HAL_Delay(210);

//READ DHT11 AND STORE INTO DATA STRUCT
	DHT11_Start();
 8001afa:	f7ff fa01 	bl	8000f00 <DHT11_Start>
	if (DHT11_Check_Response())
 8001afe:	f7ff fa65 	bl	8000fcc <DHT11_Check_Response>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d009      	beq.n	8001b1c <main+0x13c>
		{
			  Sensor_data.Humidity = Check_RH();
 8001b08:	f7ff fae6 	bl	80010d8 <Check_RH>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4a25      	ldr	r2, [pc, #148]	; (8001ba4 <main+0x1c4>)
 8001b10:	6053      	str	r3, [r2, #4]
			  Sensor_data.Temperature = Check_Temp();
 8001b12:	f7ff fb11 	bl	8001138 <Check_Temp>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4a22      	ldr	r2, [pc, #136]	; (8001ba4 <main+0x1c4>)
 8001b1a:	6013      	str	r3, [r2, #0]
		}

//READ BH1750 AND STORE INTO DATA STRUCT
	MX_I2C1_Init();
 8001b1c:	f000 f8e6 	bl	8001cec <MX_I2C1_Init>
	BH1750_Init();
 8001b20:	f7ff f95c 	bl	8000ddc <BH1750_Init>
	BH1750_Start();
 8001b24:	f7ff f992 	bl	8000e4c <BH1750_Start>
	Sensor_data.LUX = BH1750_Read();
 8001b28:	f7ff f9a2 	bl	8000e70 <BH1750_Read>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff f8dc 	bl	8000cec <__aeabi_ui2f>
 8001b34:	4603      	mov	r3, r0
 8001b36:	4a1b      	ldr	r2, [pc, #108]	; (8001ba4 <main+0x1c4>)
 8001b38:	6093      	str	r3, [r2, #8]

//SEND LORA DATA
	Data_Sending(&Sensor_data);
 8001b3a:	481a      	ldr	r0, [pc, #104]	; (8001ba4 <main+0x1c4>)
 8001b3c:	f000 fab6 	bl	80020ac <Data_Sending>

//HANDLE START NETWORK CASE IF GATEWAY REQUIRE
		if (RxBuffer[0] == 0xFF)
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <main+0x1c8>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2bff      	cmp	r3, #255	; 0xff
 8001b46:	d115      	bne.n	8001b74 <main+0x194>
		{
			while (RxBuffer[0] != 0xC0) //0xEE
 8001b48:	bf00      	nop
 8001b4a:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <main+0x1c8>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2bc0      	cmp	r3, #192	; 0xc0
 8001b50:	d1fb      	bne.n	8001b4a <main+0x16a>
			{
				//Wait for 0xC0 indicate ACK
				//If received ACK --> break while and send back ACK to gateway to indicate that sensor node is ready to start network
			}
			  LoRa_transmit(&myLoRa, &Alarm_Set, sizeof(Alarm_Set), 500);
 8001b52:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b56:	2201      	movs	r2, #1
 8001b58:	4914      	ldr	r1, [pc, #80]	; (8001bac <main+0x1cc>)
 8001b5a:	480b      	ldr	r0, [pc, #44]	; (8001b88 <main+0x1a8>)
 8001b5c:	f7ff fdd5 	bl	800170a <LoRa_transmit>
			  //After sending ACK --> sensor node wait for gateway to received all ACK from all other sensor nodes. After that, Gateway send start signal 0xB0 to start network
			  LoRa_startReceiving(&myLoRa);
 8001b60:	4809      	ldr	r0, [pc, #36]	; (8001b88 <main+0x1a8>)
 8001b62:	f7ff fe2a 	bl	80017ba <LoRa_startReceiving>
//			  HAL_Delay(500);
			  while (RxBuffer[0] != 0xB0) //0xDD
 8001b66:	bf00      	nop
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <main+0x1c8>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2bb0      	cmp	r3, #176	; 0xb0
 8001b6e:	d1fb      	bne.n	8001b68 <main+0x188>
			  {
				 //wait for start signal 0xB0
			  }
			  //Finally, after received start signal from Gateway --> Reset wake up alarm to synchronize time slot between nodes
			  MX_RTC_Init();
 8001b70:	f000 f8ea 	bl	8001d48 <MX_RTC_Init>
		}

//AFTER SENDING SENSOR DATA, TURN OFF THE POWER MOSFET AND GO TO SLEEP AGAIN, WAITING FOR A NEW RTC WAKE UP...
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001b74:	2200      	movs	r2, #0
 8001b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b7a:	4807      	ldr	r0, [pc, #28]	; (8001b98 <main+0x1b8>)
 8001b7c:	f001 fe6d 	bl	800385a <HAL_GPIO_WritePin>
	LoRa_gotoMode(&myLoRa, SLEEP_MODE);
 8001b80:	e791      	b.n	8001aa6 <main+0xc6>
 8001b82:	bf00      	nop
 8001b84:	200001c0 	.word	0x200001c0
 8001b88:	2000003c 	.word	0x2000003c
 8001b8c:	40010c00 	.word	0x40010c00
 8001b90:	20000168 	.word	0x20000168
 8001b94:	20000068 	.word	0x20000068
 8001b98:	40010800 	.word	0x40010800
 8001b9c:	2000007c 	.word	0x2000007c
 8001ba0:	2000008c 	.word	0x2000008c
 8001ba4:	20000070 	.word	0x20000070
 8001ba8:	2000006c 	.word	0x2000006c
 8001bac:	20000000 	.word	0x20000000

08001bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b094      	sub	sp, #80	; 0x50
 8001bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bba:	2228      	movs	r2, #40	; 0x28
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f005 fb0e 	bl	80071e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001be0:	2309      	movs	r3, #9
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001be4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bea:	2300      	movs	r3, #0
 8001bec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c00:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f002 fed0 	bl	80049b0 <HAL_RCC_OscConfig>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001c16:	f000 fab1 	bl	800217c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c1a:	230f      	movs	r3, #15
 8001c1c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c2a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2102      	movs	r1, #2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 f93c 	bl	8004eb4 <HAL_RCC_ClockConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001c42:	f000 fa9b 	bl	800217c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001c46:	2303      	movs	r3, #3
 8001c48:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c4e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c54:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 fab9 	bl	80051d0 <HAL_RCCEx_PeriphCLKConfig>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001c64:	f000 fa8a 	bl	800217c <Error_Handler>
  }
}
 8001c68:	bf00      	nop
 8001c6a:	3750      	adds	r7, #80	; 0x50
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c80:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <MX_ADC1_Init+0x74>)
 8001c82:	4a19      	ldr	r2, [pc, #100]	; (8001ce8 <MX_ADC1_Init+0x78>)
 8001c84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <MX_ADC1_Init+0x74>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c8c:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <MX_ADC1_Init+0x74>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c92:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <MX_ADC1_Init+0x74>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <MX_ADC1_Init+0x74>)
 8001c9a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ca0:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <MX_ADC1_Init+0x74>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <MX_ADC1_Init+0x74>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cac:	480d      	ldr	r0, [pc, #52]	; (8001ce4 <MX_ADC1_Init+0x74>)
 8001cae:	f000 fce9 	bl	8002684 <HAL_ADC_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001cb8:	f000 fa60 	bl	800217c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_ADC1_Init+0x74>)
 8001cce:	f000 fef7 	bl	8002ac0 <HAL_ADC_ConfigChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001cd8:	f000 fa50 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	2000008c 	.word	0x2000008c
 8001ce8:	40012400 	.word	0x40012400

08001cec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001cf2:	4a13      	ldr	r2, [pc, #76]	; (8001d40 <MX_I2C1_Init+0x54>)
 8001cf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001cf8:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <MX_I2C1_Init+0x58>)
 8001cfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d10:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d1c:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d28:	4804      	ldr	r0, [pc, #16]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d2a:	f001 fdc7 	bl	80038bc <HAL_I2C_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d34:	f000 fa22 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000100 	.word	0x20000100
 8001d40:	40005400 	.word	0x40005400
 8001d44:	000186a0 	.word	0x000186a0

08001d48 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
//
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001d4e:	f107 030c 	add.w	r3, r7, #12
 8001d52:	2100      	movs	r1, #0
 8001d54:	460a      	mov	r2, r1
 8001d56:	801a      	strh	r2, [r3, #0]
 8001d58:	460a      	mov	r2, r1
 8001d5a:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8001d60:	463b      	mov	r3, r7
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
//
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <MX_RTC_Init+0xc0>)
 8001d6a:	4a28      	ldr	r2, [pc, #160]	; (8001e0c <MX_RTC_Init+0xc4>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001d6e:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <MX_RTC_Init+0xc0>)
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001d76:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <MX_RTC_Init+0xc0>)
 8001d78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d7c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d7e:	4822      	ldr	r0, [pc, #136]	; (8001e08 <MX_RTC_Init+0xc0>)
 8001d80:	f003 fb92 	bl	80054a8 <HAL_RTC_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001d8a:	f000 f9f7 	bl	800217c <Error_Handler>
//
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d9a:	f107 030c 	add.w	r3, r7, #12
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4619      	mov	r1, r3
 8001da2:	4819      	ldr	r0, [pc, #100]	; (8001e08 <MX_RTC_Init+0xc0>)
 8001da4:	f003 fc0c 	bl	80055c0 <HAL_RTC_SetTime>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8001dae:	f000 f9e5 	bl	800217c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001db2:	2301      	movs	r3, #1
 8001db4:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001db6:	2301      	movs	r3, #1
 8001db8:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001dc2:	f107 0308 	add.w	r3, r7, #8
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4619      	mov	r1, r3
 8001dca:	480f      	ldr	r0, [pc, #60]	; (8001e08 <MX_RTC_Init+0xc0>)
 8001dcc:	f003 fd68 	bl	80058a0 <HAL_RTC_SetDate>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001dd6:	f000 f9d1 	bl	800217c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 8001de2:	2310      	movs	r3, #16
 8001de4:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001dea:	463b      	mov	r3, r7
 8001dec:	2201      	movs	r2, #1
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MX_RTC_Init+0xc0>)
 8001df2:	f003 fe0b 	bl	8005a0c <HAL_RTC_SetAlarm_IT>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8001dfc:	f000 f9be 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* USER CODE END RTC_Init 2 */

}
 8001e00:	bf00      	nop
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000154 	.word	0x20000154
 8001e0c:	40002800 	.word	0x40002800

08001e10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e14:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e16:	4a18      	ldr	r2, [pc, #96]	; (8001e78 <MX_SPI1_Init+0x68>)
 8001e18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e1a:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e42:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e44:	2210      	movs	r2, #16
 8001e46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e48:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e54:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e5c:	220a      	movs	r2, #10
 8001e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e60:	4804      	ldr	r0, [pc, #16]	; (8001e74 <MX_SPI1_Init+0x64>)
 8001e62:	f004 f957 	bl	8006114 <HAL_SPI_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e6c:	f000 f986 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000168 	.word	0x20000168
 8001e78:	40013000 	.word	0x40013000

08001e7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e82:	f107 0308 	add.w	r3, r7, #8
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e90:	463b      	mov	r3, r7
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e98:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <MX_TIM1_Init+0x98>)
 8001e9a:	4a1f      	ldr	r2, [pc, #124]	; (8001f18 <MX_TIM1_Init+0x9c>)
 8001e9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <MX_TIM1_Init+0x98>)
 8001ea0:	2247      	movs	r2, #71	; 0x47
 8001ea2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <MX_TIM1_Init+0x98>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001eaa:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <MX_TIM1_Init+0x98>)
 8001eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb2:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <MX_TIM1_Init+0x98>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eb8:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <MX_TIM1_Init+0x98>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <MX_TIM1_Init+0x98>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ec4:	4813      	ldr	r0, [pc, #76]	; (8001f14 <MX_TIM1_Init+0x98>)
 8001ec6:	f004 fec8 	bl	8006c5a <HAL_TIM_Base_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ed0:	f000 f954 	bl	800217c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001eda:	f107 0308 	add.w	r3, r7, #8
 8001ede:	4619      	mov	r1, r3
 8001ee0:	480c      	ldr	r0, [pc, #48]	; (8001f14 <MX_TIM1_Init+0x98>)
 8001ee2:	f004 ff53 	bl	8006d8c <HAL_TIM_ConfigClockSource>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001eec:	f000 f946 	bl	800217c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ef8:	463b      	mov	r3, r7
 8001efa:	4619      	mov	r1, r3
 8001efc:	4805      	ldr	r0, [pc, #20]	; (8001f14 <MX_TIM1_Init+0x98>)
 8001efe:	f005 f911 	bl	8007124 <HAL_TIMEx_MasterConfigSynchronization>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f08:	f000 f938 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f0c:	bf00      	nop
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200001c0 	.word	0x200001c0
 8001f18:	40012c00 	.word	0x40012c00

08001f1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f22:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <MX_DMA_Init+0x38>)
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	4a0b      	ldr	r2, [pc, #44]	; (8001f54 <MX_DMA_Init+0x38>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6153      	str	r3, [r2, #20]
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <MX_DMA_Init+0x38>)
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	200b      	movs	r0, #11
 8001f40:	f001 f88f 	bl	8003062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f44:	200b      	movs	r0, #11
 8001f46:	f001 f8a8 	bl	800309a <HAL_NVIC_EnableIRQ>

}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000

08001f58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5e:	f107 0310 	add.w	r3, r7, #16
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6c:	4b3b      	ldr	r3, [pc, #236]	; (800205c <MX_GPIO_Init+0x104>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	4a3a      	ldr	r2, [pc, #232]	; (800205c <MX_GPIO_Init+0x104>)
 8001f72:	f043 0310 	orr.w	r3, r3, #16
 8001f76:	6193      	str	r3, [r2, #24]
 8001f78:	4b38      	ldr	r3, [pc, #224]	; (800205c <MX_GPIO_Init+0x104>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f84:	4b35      	ldr	r3, [pc, #212]	; (800205c <MX_GPIO_Init+0x104>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a34      	ldr	r2, [pc, #208]	; (800205c <MX_GPIO_Init+0x104>)
 8001f8a:	f043 0320 	orr.w	r3, r3, #32
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	4b32      	ldr	r3, [pc, #200]	; (800205c <MX_GPIO_Init+0x104>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 0320 	and.w	r3, r3, #32
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9c:	4b2f      	ldr	r3, [pc, #188]	; (800205c <MX_GPIO_Init+0x104>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	4a2e      	ldr	r2, [pc, #184]	; (800205c <MX_GPIO_Init+0x104>)
 8001fa2:	f043 0304 	orr.w	r3, r3, #4
 8001fa6:	6193      	str	r3, [r2, #24]
 8001fa8:	4b2c      	ldr	r3, [pc, #176]	; (800205c <MX_GPIO_Init+0x104>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb4:	4b29      	ldr	r3, [pc, #164]	; (800205c <MX_GPIO_Init+0x104>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a28      	ldr	r2, [pc, #160]	; (800205c <MX_GPIO_Init+0x104>)
 8001fba:	f043 0308 	orr.w	r3, r3, #8
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b26      	ldr	r3, [pc, #152]	; (800205c <MX_GPIO_Init+0x104>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	603b      	str	r3, [r7, #0]
 8001fca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8001fcc:	2201      	movs	r2, #1
 8001fce:	2103      	movs	r1, #3
 8001fd0:	4823      	ldr	r0, [pc, #140]	; (8002060 <MX_GPIO_Init+0x108>)
 8001fd2:	f001 fc42 	bl	800385a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fdc:	4820      	ldr	r0, [pc, #128]	; (8002060 <MX_GPIO_Init+0x108>)
 8001fde:	f001 fc3c 	bl	800385a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe8:	481e      	ldr	r0, [pc, #120]	; (8002064 <MX_GPIO_Init+0x10c>)
 8001fea:	f001 fc36 	bl	800385a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NSS_Pin RST_Pin PB11 */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin|GPIO_PIN_11;
 8001fee:	f640 0303 	movw	r3, #2051	; 0x803
 8001ff2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002000:	f107 0310 	add.w	r3, r7, #16
 8002004:	4619      	mov	r1, r3
 8002006:	4816      	ldr	r0, [pc, #88]	; (8002060 <MX_GPIO_Init+0x108>)
 8002008:	f001 fa8c 	bl	8003524 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 800200c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002010:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <MX_GPIO_Init+0x110>)
 8002014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 800201a:	f107 0310 	add.w	r3, r7, #16
 800201e:	4619      	mov	r1, r3
 8002020:	480f      	ldr	r0, [pc, #60]	; (8002060 <MX_GPIO_Init+0x108>)
 8002022:	f001 fa7f 	bl	8003524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002026:	f44f 7380 	mov.w	r3, #256	; 0x100
 800202a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202c:	2301      	movs	r3, #1
 800202e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002030:	2302      	movs	r3, #2
 8002032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002034:	2302      	movs	r3, #2
 8002036:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	4619      	mov	r1, r3
 800203e:	4809      	ldr	r0, [pc, #36]	; (8002064 <MX_GPIO_Init+0x10c>)
 8002040:	f001 fa70 	bl	8003524 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8002044:	2200      	movs	r2, #0
 8002046:	2101      	movs	r1, #1
 8002048:	2028      	movs	r0, #40	; 0x28
 800204a:	f001 f80a 	bl	8003062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800204e:	2028      	movs	r0, #40	; 0x28
 8002050:	f001 f823 	bl	800309a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002054:	bf00      	nop
 8002056:	3720      	adds	r7, #32
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40021000 	.word	0x40021000
 8002060:	40010c00 	.word	0x40010c00
 8002064:	40010800 	.word	0x40010800
 8002068:	10110000 	.word	0x10110000

0800206c <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
//    sAlarm.AlarmTime.Minutes = (total_seconds / 60) % 60;
//    sAlarm.AlarmTime.Seconds = total_seconds % 60;
//    sAlarm.Alarm = RTC_ALARM_A;
//    // Re-set alarm with updated wakeup time
//    HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN);
	MX_RTC_Init();
 8002074:	f7ff fe68 	bl	8001d48 <MX_RTC_Init>
}
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_GPIO_EXTI_Callback>:

//THIS WAKE UP TRIGGERED BY GPIO DIO0, HAPPENS WHEN A DATA RECEIVED BY SX1278 MODULE
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == DIO0_Pin)
 800208a:	88fb      	ldrh	r3, [r7, #6]
 800208c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002090:	d104      	bne.n	800209c <HAL_GPIO_EXTI_Callback+0x1c>
    {
      //Stack the received data into RxBuffer[4]
  	  LoRa_receive(&myLoRa, RxBuffer, sizeof(RxBuffer));
 8002092:	2204      	movs	r2, #4
 8002094:	4903      	ldr	r1, [pc, #12]	; (80020a4 <HAL_GPIO_EXTI_Callback+0x24>)
 8002096:	4804      	ldr	r0, [pc, #16]	; (80020a8 <HAL_GPIO_EXTI_Callback+0x28>)
 8002098:	f7ff fb9b 	bl	80017d2 <LoRa_receive>
    }
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	2000006c 	.word	0x2000006c
 80020a8:	2000003c 	.word	0x2000003c

080020ac <Data_Sending>:

//THIS FUNCTION WILL TAKE THE DATA THAT STORED IN DATA STRUCT AND "RIPPED" IT INTO 1 BYTE FORMAT FOR SX1278 TO SEND BYTE BY BYTE TO GATEWAY
void Data_Sending(const Data *_Data)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
//	  uint8_t retry;
	  uint16_t humidity_int    = (uint16_t)(_Data->Humidity * 10);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	492d      	ldr	r1, [pc, #180]	; (8002170 <Data_Sending+0xc4>)
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe f846 	bl	800014c <__aeabi_fmul>
 80020c0:	4603      	mov	r3, r0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fe6a 	bl	8000d9c <__aeabi_f2uiz>
 80020c8:	4603      	mov	r3, r0
 80020ca:	81fb      	strh	r3, [r7, #14]
	  uint16_t temperature_int = (uint16_t)(_Data->Temperature * 10);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4927      	ldr	r1, [pc, #156]	; (8002170 <Data_Sending+0xc4>)
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe f83a 	bl	800014c <__aeabi_fmul>
 80020d8:	4603      	mov	r3, r0
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fe5e 	bl	8000d9c <__aeabi_f2uiz>
 80020e0:	4603      	mov	r3, r0
 80020e2:	81bb      	strh	r3, [r7, #12]
	  uint16_t lux_int         = (uint16_t)(_Data->LUX * 10);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4921      	ldr	r1, [pc, #132]	; (8002170 <Data_Sending+0xc4>)
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe f82e 	bl	800014c <__aeabi_fmul>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fe52 	bl	8000d9c <__aeabi_f2uiz>
 80020f8:	4603      	mov	r3, r0
 80020fa:	817b      	strh	r3, [r7, #10]
	  uint16_t mq135_int       = (uint16_t)(_Data->Data_MQ135);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	899b      	ldrh	r3, [r3, #12]
 8002100:	813b      	strh	r3, [r7, #8]

	  packet[0] = 0xA1;  // NODE'S ID
 8002102:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <Data_Sending+0xc8>)
 8002104:	22a1      	movs	r2, #161	; 0xa1
 8002106:	701a      	strb	r2, [r3, #0]
	  packet[1] = (uint8_t)(humidity_int >> 8);
 8002108:	89fb      	ldrh	r3, [r7, #14]
 800210a:	0a1b      	lsrs	r3, r3, #8
 800210c:	b29b      	uxth	r3, r3
 800210e:	b2da      	uxtb	r2, r3
 8002110:	4b18      	ldr	r3, [pc, #96]	; (8002174 <Data_Sending+0xc8>)
 8002112:	705a      	strb	r2, [r3, #1]
	  packet[2] = (uint8_t)(humidity_int & 0xFF);
 8002114:	89fb      	ldrh	r3, [r7, #14]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	4b16      	ldr	r3, [pc, #88]	; (8002174 <Data_Sending+0xc8>)
 800211a:	709a      	strb	r2, [r3, #2]
	  packet[3] = (uint8_t)(temperature_int >> 8);
 800211c:	89bb      	ldrh	r3, [r7, #12]
 800211e:	0a1b      	lsrs	r3, r3, #8
 8002120:	b29b      	uxth	r3, r3
 8002122:	b2da      	uxtb	r2, r3
 8002124:	4b13      	ldr	r3, [pc, #76]	; (8002174 <Data_Sending+0xc8>)
 8002126:	70da      	strb	r2, [r3, #3]
	  packet[4] = (uint8_t)(temperature_int & 0xFF);
 8002128:	89bb      	ldrh	r3, [r7, #12]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <Data_Sending+0xc8>)
 800212e:	711a      	strb	r2, [r3, #4]
	  packet[5] = (uint8_t)(lux_int >> 8);
 8002130:	897b      	ldrh	r3, [r7, #10]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	b29b      	uxth	r3, r3
 8002136:	b2da      	uxtb	r2, r3
 8002138:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <Data_Sending+0xc8>)
 800213a:	715a      	strb	r2, [r3, #5]
	  packet[6] = (uint8_t)(lux_int & 0xFF);
 800213c:	897b      	ldrh	r3, [r7, #10]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <Data_Sending+0xc8>)
 8002142:	719a      	strb	r2, [r3, #6]
	  packet[7] = (uint8_t)(mq135_int >> 8);
 8002144:	893b      	ldrh	r3, [r7, #8]
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	b29b      	uxth	r3, r3
 800214a:	b2da      	uxtb	r2, r3
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <Data_Sending+0xc8>)
 800214e:	71da      	strb	r2, [r3, #7]
	  packet[8] = (uint8_t)(mq135_int & 0xFF);
 8002150:	893b      	ldrh	r3, [r7, #8]
 8002152:	b2da      	uxtb	r2, r3
 8002154:	4b07      	ldr	r3, [pc, #28]	; (8002174 <Data_Sending+0xc8>)
 8002156:	721a      	strb	r2, [r3, #8]
	  LoRa_transmit(&myLoRa, (uint8_t*)packet, sizeof(packet), 500);
 8002158:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800215c:	2209      	movs	r2, #9
 800215e:	4905      	ldr	r1, [pc, #20]	; (8002174 <Data_Sending+0xc8>)
 8002160:	4805      	ldr	r0, [pc, #20]	; (8002178 <Data_Sending+0xcc>)
 8002162:	f7ff fad2 	bl	800170a <LoRa_transmit>
//	      LoRa_startReceiving(&myLoRa);
//	      HAL_Delay(500);
//	      retry++;
//	  }
//	  retry = 0;
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	41200000 	.word	0x41200000
 8002174:	20000080 	.word	0x20000080
 8002178:	2000003c 	.word	0x2000003c

0800217c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002180:	b672      	cpsid	i
}
 8002182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002184:	e7fe      	b.n	8002184 <Error_Handler+0x8>
	...

08002188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <HAL_MspInit+0x5c>)
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <HAL_MspInit+0x5c>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6193      	str	r3, [r2, #24]
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_MspInit+0x5c>)
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <HAL_MspInit+0x5c>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	4a0e      	ldr	r2, [pc, #56]	; (80021e4 <HAL_MspInit+0x5c>)
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b0:	61d3      	str	r3, [r2, #28]
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <HAL_MspInit+0x5c>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021be:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <HAL_MspInit+0x60>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <HAL_MspInit+0x60>)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40010000 	.word	0x40010000

080021ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 0310 	add.w	r3, r7, #16
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a28      	ldr	r2, [pc, #160]	; (80022a8 <HAL_ADC_MspInit+0xbc>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d149      	bne.n	80022a0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_ADC_MspInit+0xc0>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4a26      	ldr	r2, [pc, #152]	; (80022ac <HAL_ADC_MspInit+0xc0>)
 8002212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002216:	6193      	str	r3, [r2, #24]
 8002218:	4b24      	ldr	r3, [pc, #144]	; (80022ac <HAL_ADC_MspInit+0xc0>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002224:	4b21      	ldr	r3, [pc, #132]	; (80022ac <HAL_ADC_MspInit+0xc0>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	4a20      	ldr	r2, [pc, #128]	; (80022ac <HAL_ADC_MspInit+0xc0>)
 800222a:	f043 0304 	orr.w	r3, r3, #4
 800222e:	6193      	str	r3, [r2, #24]
 8002230:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <HAL_ADC_MspInit+0xc0>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800223c:	2301      	movs	r3, #1
 800223e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002240:	2303      	movs	r3, #3
 8002242:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002244:	f107 0310 	add.w	r3, r7, #16
 8002248:	4619      	mov	r1, r3
 800224a:	4819      	ldr	r0, [pc, #100]	; (80022b0 <HAL_ADC_MspInit+0xc4>)
 800224c:	f001 f96a 	bl	8003524 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002250:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_ADC_MspInit+0xc8>)
 8002252:	4a19      	ldr	r2, [pc, #100]	; (80022b8 <HAL_ADC_MspInit+0xcc>)
 8002254:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002256:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <HAL_ADC_MspInit+0xc8>)
 8002258:	2200      	movs	r2, #0
 800225a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800225c:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <HAL_ADC_MspInit+0xc8>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002262:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <HAL_ADC_MspInit+0xc8>)
 8002264:	2280      	movs	r2, #128	; 0x80
 8002266:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_ADC_MspInit+0xc8>)
 800226a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800226e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002270:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <HAL_ADC_MspInit+0xc8>)
 8002272:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002276:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <HAL_ADC_MspInit+0xc8>)
 800227a:	2220      	movs	r2, #32
 800227c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800227e:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <HAL_ADC_MspInit+0xc8>)
 8002280:	2200      	movs	r2, #0
 8002282:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002284:	480b      	ldr	r0, [pc, #44]	; (80022b4 <HAL_ADC_MspInit+0xc8>)
 8002286:	f000 ff23 	bl	80030d0 <HAL_DMA_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002290:	f7ff ff74 	bl	800217c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <HAL_ADC_MspInit+0xc8>)
 8002298:	621a      	str	r2, [r3, #32]
 800229a:	4a06      	ldr	r2, [pc, #24]	; (80022b4 <HAL_ADC_MspInit+0xc8>)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022a0:	bf00      	nop
 80022a2:	3720      	adds	r7, #32
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40012400 	.word	0x40012400
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40010800 	.word	0x40010800
 80022b4:	200000bc 	.word	0x200000bc
 80022b8:	40020008 	.word	0x40020008

080022bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 0310 	add.w	r3, r7, #16
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a15      	ldr	r2, [pc, #84]	; (800232c <HAL_I2C_MspInit+0x70>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d123      	bne.n	8002324 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022dc:	4b14      	ldr	r3, [pc, #80]	; (8002330 <HAL_I2C_MspInit+0x74>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	4a13      	ldr	r2, [pc, #76]	; (8002330 <HAL_I2C_MspInit+0x74>)
 80022e2:	f043 0308 	orr.w	r3, r3, #8
 80022e6:	6193      	str	r3, [r2, #24]
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <HAL_I2C_MspInit+0x74>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022f4:	23c0      	movs	r3, #192	; 0xc0
 80022f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022f8:	2312      	movs	r3, #18
 80022fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022fc:	2303      	movs	r3, #3
 80022fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002300:	f107 0310 	add.w	r3, r7, #16
 8002304:	4619      	mov	r1, r3
 8002306:	480b      	ldr	r0, [pc, #44]	; (8002334 <HAL_I2C_MspInit+0x78>)
 8002308:	f001 f90c 	bl	8003524 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800230c:	4b08      	ldr	r3, [pc, #32]	; (8002330 <HAL_I2C_MspInit+0x74>)
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	4a07      	ldr	r2, [pc, #28]	; (8002330 <HAL_I2C_MspInit+0x74>)
 8002312:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002316:	61d3      	str	r3, [r2, #28]
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_I2C_MspInit+0x74>)
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002324:	bf00      	nop
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40005400 	.word	0x40005400
 8002330:	40021000 	.word	0x40021000
 8002334:	40010c00 	.word	0x40010c00

08002338 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0f      	ldr	r2, [pc, #60]	; (8002384 <HAL_RTC_MspInit+0x4c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d118      	bne.n	800237c <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800234a:	f002 faf3 	bl	8004934 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800234e:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <HAL_RTC_MspInit+0x50>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	4a0d      	ldr	r2, [pc, #52]	; (8002388 <HAL_RTC_MspInit+0x50>)
 8002354:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002358:	61d3      	str	r3, [r2, #28]
 800235a:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_RTC_MspInit+0x50>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002366:	4b09      	ldr	r3, [pc, #36]	; (800238c <HAL_RTC_MspInit+0x54>)
 8002368:	2201      	movs	r2, #1
 800236a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800236c:	2200      	movs	r2, #0
 800236e:	2100      	movs	r1, #0
 8002370:	2029      	movs	r0, #41	; 0x29
 8002372:	f000 fe76 	bl	8003062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002376:	2029      	movs	r0, #41	; 0x29
 8002378:	f000 fe8f 	bl	800309a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40002800 	.word	0x40002800
 8002388:	40021000 	.word	0x40021000
 800238c:	4242043c 	.word	0x4242043c

08002390 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 0310 	add.w	r3, r7, #16
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a1b      	ldr	r2, [pc, #108]	; (8002418 <HAL_SPI_MspInit+0x88>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d12f      	bne.n	8002410 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023b0:	4b1a      	ldr	r3, [pc, #104]	; (800241c <HAL_SPI_MspInit+0x8c>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	4a19      	ldr	r2, [pc, #100]	; (800241c <HAL_SPI_MspInit+0x8c>)
 80023b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023ba:	6193      	str	r3, [r2, #24]
 80023bc:	4b17      	ldr	r3, [pc, #92]	; (800241c <HAL_SPI_MspInit+0x8c>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <HAL_SPI_MspInit+0x8c>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	4a13      	ldr	r2, [pc, #76]	; (800241c <HAL_SPI_MspInit+0x8c>)
 80023ce:	f043 0304 	orr.w	r3, r3, #4
 80023d2:	6193      	str	r3, [r2, #24]
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <HAL_SPI_MspInit+0x8c>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80023e0:	23a0      	movs	r3, #160	; 0xa0
 80023e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023e8:	2303      	movs	r3, #3
 80023ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ec:	f107 0310 	add.w	r3, r7, #16
 80023f0:	4619      	mov	r1, r3
 80023f2:	480b      	ldr	r0, [pc, #44]	; (8002420 <HAL_SPI_MspInit+0x90>)
 80023f4:	f001 f896 	bl	8003524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023f8:	2340      	movs	r3, #64	; 0x40
 80023fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002404:	f107 0310 	add.w	r3, r7, #16
 8002408:	4619      	mov	r1, r3
 800240a:	4805      	ldr	r0, [pc, #20]	; (8002420 <HAL_SPI_MspInit+0x90>)
 800240c:	f001 f88a 	bl	8003524 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002410:	bf00      	nop
 8002412:	3720      	adds	r7, #32
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40013000 	.word	0x40013000
 800241c:	40021000 	.word	0x40021000
 8002420:	40010800 	.word	0x40010800

08002424 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a09      	ldr	r2, [pc, #36]	; (8002458 <HAL_TIM_Base_MspInit+0x34>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d10b      	bne.n	800244e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_TIM_Base_MspInit+0x38>)
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	4a08      	ldr	r2, [pc, #32]	; (800245c <HAL_TIM_Base_MspInit+0x38>)
 800243c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002440:	6193      	str	r3, [r2, #24]
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_TIM_Base_MspInit+0x38>)
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800244e:	bf00      	nop
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	40012c00 	.word	0x40012c00
 800245c:	40021000 	.word	0x40021000

08002460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002464:	e7fe      	b.n	8002464 <NMI_Handler+0x4>

08002466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800246a:	e7fe      	b.n	800246a <HardFault_Handler+0x4>

0800246c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002470:	e7fe      	b.n	8002470 <MemManage_Handler+0x4>

08002472 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002476:	e7fe      	b.n	8002476 <BusFault_Handler+0x4>

08002478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800247c:	e7fe      	b.n	800247c <UsageFault_Handler+0x4>

0800247e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr

080024a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a6:	f000 f891 	bl	80025cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <DMA1_Channel1_IRQHandler+0x10>)
 80024b6:	f000 ff01 	bl	80032bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200000bc 	.word	0x200000bc

080024c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80024c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80024cc:	f001 f9de 	bl	800388c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <RTC_Alarm_IRQHandler+0x10>)
 80024da:	f003 fb4f 	bl	8005b7c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000154 	.word	0x20000154

080024e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024f4:	f7ff fff8 	bl	80024e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024f8:	480b      	ldr	r0, [pc, #44]	; (8002528 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024fa:	490c      	ldr	r1, [pc, #48]	; (800252c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024fc:	4a0c      	ldr	r2, [pc, #48]	; (8002530 <LoopFillZerobss+0x16>)
  movs r3, #0
 80024fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002500:	e002      	b.n	8002508 <LoopCopyDataInit>

08002502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002506:	3304      	adds	r3, #4

08002508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800250a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800250c:	d3f9      	bcc.n	8002502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800250e:	4a09      	ldr	r2, [pc, #36]	; (8002534 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002510:	4c09      	ldr	r4, [pc, #36]	; (8002538 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002514:	e001      	b.n	800251a <LoopFillZerobss>

08002516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002518:	3204      	adds	r2, #4

0800251a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800251a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800251c:	d3fb      	bcc.n	8002516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800251e:	f004 fe67 	bl	80071f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002522:	f7ff fa5d 	bl	80019e0 <main>
  bx lr
 8002526:	4770      	bx	lr
  ldr r0, =_sdata
 8002528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800252c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002530:	08007308 	.word	0x08007308
  ldr r2, =_sbss
 8002534:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002538:	2000020c 	.word	0x2000020c

0800253c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800253c:	e7fe      	b.n	800253c <ADC1_2_IRQHandler>
	...

08002540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <HAL_Init+0x28>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a07      	ldr	r2, [pc, #28]	; (8002568 <HAL_Init+0x28>)
 800254a:	f043 0310 	orr.w	r3, r3, #16
 800254e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002550:	2003      	movs	r0, #3
 8002552:	f000 fd7b 	bl	800304c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002556:	200f      	movs	r0, #15
 8002558:	f000 f808 	bl	800256c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800255c:	f7ff fe14 	bl	8002188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40022000 	.word	0x40022000

0800256c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002574:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <HAL_InitTick+0x54>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_InitTick+0x58>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4619      	mov	r1, r3
 800257e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002582:	fbb3 f3f1 	udiv	r3, r3, r1
 8002586:	fbb2 f3f3 	udiv	r3, r2, r3
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fd93 	bl	80030b6 <HAL_SYSTICK_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e00e      	b.n	80025b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b0f      	cmp	r3, #15
 800259e:	d80a      	bhi.n	80025b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a0:	2200      	movs	r2, #0
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	f000 fd5b 	bl	8003062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025ac:	4a06      	ldr	r2, [pc, #24]	; (80025c8 <HAL_InitTick+0x5c>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e000      	b.n	80025b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000004 	.word	0x20000004
 80025c4:	2000000c 	.word	0x2000000c
 80025c8:	20000008 	.word	0x20000008

080025cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_IncTick+0x1c>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_IncTick+0x20>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	4a03      	ldr	r2, [pc, #12]	; (80025ec <HAL_IncTick+0x20>)
 80025de:	6013      	str	r3, [r2, #0]
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	2000000c 	.word	0x2000000c
 80025ec:	20000208 	.word	0x20000208

080025f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return uwTick;
 80025f4:	4b02      	ldr	r3, [pc, #8]	; (8002600 <HAL_GetTick+0x10>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	20000208 	.word	0x20000208

08002604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800260c:	f7ff fff0 	bl	80025f0 <HAL_GetTick>
 8002610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261c:	d005      	beq.n	800262a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_Delay+0x44>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4413      	add	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800262a:	bf00      	nop
 800262c:	f7ff ffe0 	bl	80025f0 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	429a      	cmp	r2, r3
 800263a:	d8f7      	bhi.n	800262c <HAL_Delay+0x28>
  {
  }
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	2000000c 	.word	0x2000000c

0800264c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002650:	4b04      	ldr	r3, [pc, #16]	; (8002664 <HAL_SuspendTick+0x18>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a03      	ldr	r2, [pc, #12]	; (8002664 <HAL_SuspendTick+0x18>)
 8002656:	f023 0302 	bic.w	r3, r3, #2
 800265a:	6013      	str	r3, [r2, #0]
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	e000e010 	.word	0xe000e010

08002668 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <HAL_ResumeTick+0x18>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a03      	ldr	r2, [pc, #12]	; (8002680 <HAL_ResumeTick+0x18>)
 8002672:	f043 0302 	orr.w	r3, r3, #2
 8002676:	6013      	str	r3, [r2, #0]
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	e000e010 	.word	0xe000e010

08002684 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e0be      	b.n	8002824 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d109      	bne.n	80026c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff fd92 	bl	80021ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 fb4b 	bl	8002d64 <ADC_ConversionStop_Disable>
 80026ce:	4603      	mov	r3, r0
 80026d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f040 8099 	bne.w	8002812 <HAL_ADC_Init+0x18e>
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f040 8095 	bne.w	8002812 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026f0:	f023 0302 	bic.w	r3, r3, #2
 80026f4:	f043 0202 	orr.w	r2, r3, #2
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002704:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	7b1b      	ldrb	r3, [r3, #12]
 800270a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800270c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	4313      	orrs	r3, r2
 8002712:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800271c:	d003      	beq.n	8002726 <HAL_ADC_Init+0xa2>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d102      	bne.n	800272c <HAL_ADC_Init+0xa8>
 8002726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800272a:	e000      	b.n	800272e <HAL_ADC_Init+0xaa>
 800272c:	2300      	movs	r3, #0
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	7d1b      	ldrb	r3, [r3, #20]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d119      	bne.n	8002770 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	7b1b      	ldrb	r3, [r3, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d109      	bne.n	8002758 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	3b01      	subs	r3, #1
 800274a:	035a      	lsls	r2, r3, #13
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	e00b      	b.n	8002770 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	f043 0220 	orr.w	r2, r3, #32
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	f043 0201 	orr.w	r2, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	430a      	orrs	r2, r1
 8002782:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	4b28      	ldr	r3, [pc, #160]	; (800282c <HAL_ADC_Init+0x1a8>)
 800278c:	4013      	ands	r3, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	68b9      	ldr	r1, [r7, #8]
 8002794:	430b      	orrs	r3, r1
 8002796:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a0:	d003      	beq.n	80027aa <HAL_ADC_Init+0x126>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d104      	bne.n	80027b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	051b      	lsls	r3, r3, #20
 80027b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	4b18      	ldr	r3, [pc, #96]	; (8002830 <HAL_ADC_Init+0x1ac>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d10b      	bne.n	80027f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	f023 0303 	bic.w	r3, r3, #3
 80027e6:	f043 0201 	orr.w	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027ee:	e018      	b.n	8002822 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	f023 0312 	bic.w	r3, r3, #18
 80027f8:	f043 0210 	orr.w	r2, r3, #16
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002804:	f043 0201 	orr.w	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002810:	e007      	b.n	8002822 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	f043 0210 	orr.w	r2, r3, #16
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002822:	7dfb      	ldrb	r3, [r7, #23]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	ffe1f7fd 	.word	0xffe1f7fd
 8002830:	ff1f0efe 	.word	0xff1f0efe

08002834 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a64      	ldr	r2, [pc, #400]	; (80029dc <HAL_ADC_Start_DMA+0x1a8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d004      	beq.n	8002858 <HAL_ADC_Start_DMA+0x24>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a63      	ldr	r2, [pc, #396]	; (80029e0 <HAL_ADC_Start_DMA+0x1ac>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d106      	bne.n	8002866 <HAL_ADC_Start_DMA+0x32>
 8002858:	4b60      	ldr	r3, [pc, #384]	; (80029dc <HAL_ADC_Start_DMA+0x1a8>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002860:	2b00      	cmp	r3, #0
 8002862:	f040 80b3 	bne.w	80029cc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_ADC_Start_DMA+0x40>
 8002870:	2302      	movs	r3, #2
 8002872:	e0ae      	b.n	80029d2 <HAL_ADC_Start_DMA+0x19e>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fa17 	bl	8002cb0 <ADC_Enable>
 8002882:	4603      	mov	r3, r0
 8002884:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002886:	7dfb      	ldrb	r3, [r7, #23]
 8002888:	2b00      	cmp	r3, #0
 800288a:	f040 809a 	bne.w	80029c2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a4e      	ldr	r2, [pc, #312]	; (80029e0 <HAL_ADC_Start_DMA+0x1ac>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d105      	bne.n	80028b8 <HAL_ADC_Start_DMA+0x84>
 80028ac:	4b4b      	ldr	r3, [pc, #300]	; (80029dc <HAL_ADC_Start_DMA+0x1a8>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d115      	bne.n	80028e4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d026      	beq.n	8002920 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028e2:	e01d      	b.n	8002920 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a39      	ldr	r2, [pc, #228]	; (80029dc <HAL_ADC_Start_DMA+0x1a8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d004      	beq.n	8002904 <HAL_ADC_Start_DMA+0xd0>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a38      	ldr	r2, [pc, #224]	; (80029e0 <HAL_ADC_Start_DMA+0x1ac>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d10d      	bne.n	8002920 <HAL_ADC_Start_DMA+0xec>
 8002904:	4b35      	ldr	r3, [pc, #212]	; (80029dc <HAL_ADC_Start_DMA+0x1a8>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290c:	2b00      	cmp	r3, #0
 800290e:	d007      	beq.n	8002920 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002918:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d006      	beq.n	800293a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	f023 0206 	bic.w	r2, r3, #6
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	62da      	str	r2, [r3, #44]	; 0x2c
 8002938:	e002      	b.n	8002940 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	4a25      	ldr	r2, [pc, #148]	; (80029e4 <HAL_ADC_Start_DMA+0x1b0>)
 800294e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4a24      	ldr	r2, [pc, #144]	; (80029e8 <HAL_ADC_Start_DMA+0x1b4>)
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	4a23      	ldr	r2, [pc, #140]	; (80029ec <HAL_ADC_Start_DMA+0x1b8>)
 800295e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f06f 0202 	mvn.w	r2, #2
 8002968:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002978:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a18      	ldr	r0, [r3, #32]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	334c      	adds	r3, #76	; 0x4c
 8002984:	4619      	mov	r1, r3
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f000 fbfb 	bl	8003184 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002998:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800299c:	d108      	bne.n	80029b0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80029ac:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80029ae:	e00f      	b.n	80029d0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80029be:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80029c0:	e006      	b.n	80029d0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80029ca:	e001      	b.n	80029d0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40012400 	.word	0x40012400
 80029e0:	40012800 	.word	0x40012800
 80029e4:	08002de7 	.word	0x08002de7
 80029e8:	08002e63 	.word	0x08002e63
 80029ec:	08002e7f 	.word	0x08002e7f

080029f0 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_ADC_Stop_DMA+0x1a>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e03a      	b.n	8002a80 <HAL_ADC_Stop_DMA+0x90>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f9a6 	bl	8002d64 <ADC_ConversionStop_Disable>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d129      	bne.n	8002a76 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a30:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d11a      	bne.n	8002a76 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fbfd 	bl	8003244 <HAL_DMA_Abort>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10a      	bne.n	8002a6a <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28
 8002a68:	e005      	b.n	8002a76 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr
	...

08002ac0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x20>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e0dc      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x1da>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b06      	cmp	r3, #6
 8002aee:	d81c      	bhi.n	8002b2a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	3b05      	subs	r3, #5
 8002b02:	221f      	movs	r2, #31
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	4019      	ands	r1, r3
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	3b05      	subs	r3, #5
 8002b1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	635a      	str	r2, [r3, #52]	; 0x34
 8002b28:	e03c      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b0c      	cmp	r3, #12
 8002b30:	d81c      	bhi.n	8002b6c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	3b23      	subs	r3, #35	; 0x23
 8002b44:	221f      	movs	r2, #31
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	4019      	ands	r1, r3
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3b23      	subs	r3, #35	; 0x23
 8002b5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	631a      	str	r2, [r3, #48]	; 0x30
 8002b6a:	e01b      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3b41      	subs	r3, #65	; 0x41
 8002b7e:	221f      	movs	r2, #31
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	4019      	ands	r1, r3
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	3b41      	subs	r3, #65	; 0x41
 8002b98:	fa00 f203 	lsl.w	r2, r0, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b09      	cmp	r3, #9
 8002baa:	d91c      	bls.n	8002be6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68d9      	ldr	r1, [r3, #12]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	3b1e      	subs	r3, #30
 8002bbe:	2207      	movs	r2, #7
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	4019      	ands	r1, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	6898      	ldr	r0, [r3, #8]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3b1e      	subs	r3, #30
 8002bd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	60da      	str	r2, [r3, #12]
 8002be4:	e019      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6919      	ldr	r1, [r3, #16]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	4019      	ands	r1, r3
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	6898      	ldr	r0, [r3, #8]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b10      	cmp	r3, #16
 8002c20:	d003      	beq.n	8002c2a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c26:	2b11      	cmp	r3, #17
 8002c28:	d132      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ca4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d125      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d126      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c50:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b10      	cmp	r3, #16
 8002c58:	d11a      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c5a:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a13      	ldr	r2, [pc, #76]	; (8002cac <HAL_ADC_ConfigChannel+0x1ec>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	0c9a      	lsrs	r2, r3, #18
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c70:	e002      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f9      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x1b2>
 8002c7e:	e007      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	f043 0220 	orr.w	r2, r3, #32
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr
 8002ca4:	40012400 	.word	0x40012400
 8002ca8:	20000004 	.word	0x20000004
 8002cac:	431bde83 	.word	0x431bde83

08002cb0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d040      	beq.n	8002d50 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
 8002cdc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002cde:	4b1f      	ldr	r3, [pc, #124]	; (8002d5c <ADC_Enable+0xac>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a1f      	ldr	r2, [pc, #124]	; (8002d60 <ADC_Enable+0xb0>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	0c9b      	lsrs	r3, r3, #18
 8002cea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cec:	e002      	b.n	8002cf4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f9      	bne.n	8002cee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cfa:	f7ff fc79 	bl	80025f0 <HAL_GetTick>
 8002cfe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d00:	e01f      	b.n	8002d42 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d02:	f7ff fc75 	bl	80025f0 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d918      	bls.n	8002d42 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d011      	beq.n	8002d42 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d22:	f043 0210 	orr.w	r2, r3, #16
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e007      	b.n	8002d52 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d1d8      	bne.n	8002d02 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000004 	.word	0x20000004
 8002d60:	431bde83 	.word	0x431bde83

08002d64 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d12e      	bne.n	8002ddc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0201 	bic.w	r2, r2, #1
 8002d8c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d8e:	f7ff fc2f 	bl	80025f0 <HAL_GetTick>
 8002d92:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d94:	e01b      	b.n	8002dce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d96:	f7ff fc2b 	bl	80025f0 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d914      	bls.n	8002dce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d10d      	bne.n	8002dce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db6:	f043 0210 	orr.w	r2, r3, #16
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	f043 0201 	orr.w	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e007      	b.n	8002dde <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d0dc      	beq.n	8002d96 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d127      	bne.n	8002e50 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002e16:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002e1a:	d115      	bne.n	8002e48 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d111      	bne.n	8002e48 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d105      	bne.n	8002e48 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	f043 0201 	orr.w	r2, r3, #1
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f7ff fe1d 	bl	8002a88 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002e4e:	e004      	b.n	8002e5a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	4798      	blx	r3
}
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f7ff fe12 	bl	8002a9a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	f043 0204 	orr.w	r2, r3, #4
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f7ff fe01 	bl	8002aac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002eaa:	bf00      	nop
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ee6:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	60d3      	str	r3, [r2, #12]
}
 8002eec:	bf00      	nop
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f00:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <__NVIC_GetPriorityGrouping+0x18>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	0a1b      	lsrs	r3, r3, #8
 8002f06:	f003 0307 	and.w	r3, r3, #7
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	db0b      	blt.n	8002f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	f003 021f 	and.w	r2, r3, #31
 8002f30:	4906      	ldr	r1, [pc, #24]	; (8002f4c <__NVIC_EnableIRQ+0x34>)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	2001      	movs	r0, #1
 8002f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr
 8002f4c:	e000e100 	.word	0xe000e100

08002f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	6039      	str	r1, [r7, #0]
 8002f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	db0a      	blt.n	8002f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	490c      	ldr	r1, [pc, #48]	; (8002f9c <__NVIC_SetPriority+0x4c>)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	0112      	lsls	r2, r2, #4
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	440b      	add	r3, r1
 8002f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f78:	e00a      	b.n	8002f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4908      	ldr	r1, [pc, #32]	; (8002fa0 <__NVIC_SetPriority+0x50>)
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	3b04      	subs	r3, #4
 8002f88:	0112      	lsls	r2, r2, #4
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	761a      	strb	r2, [r3, #24]
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	e000e100 	.word	0xe000e100
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	; 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f1c3 0307 	rsb	r3, r3, #7
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	bf28      	it	cs
 8002fc2:	2304      	movcs	r3, #4
 8002fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d902      	bls.n	8002fd4 <NVIC_EncodePriority+0x30>
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3b03      	subs	r3, #3
 8002fd2:	e000      	b.n	8002fd6 <NVIC_EncodePriority+0x32>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fec:	f04f 31ff 	mov.w	r1, #4294967295
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	43d9      	mvns	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ffc:	4313      	orrs	r3, r2
         );
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3724      	adds	r7, #36	; 0x24
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3b01      	subs	r3, #1
 8003014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003018:	d301      	bcc.n	800301e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800301a:	2301      	movs	r3, #1
 800301c:	e00f      	b.n	800303e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800301e:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <SysTick_Config+0x40>)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3b01      	subs	r3, #1
 8003024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003026:	210f      	movs	r1, #15
 8003028:	f04f 30ff 	mov.w	r0, #4294967295
 800302c:	f7ff ff90 	bl	8002f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <SysTick_Config+0x40>)
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003036:	4b04      	ldr	r3, [pc, #16]	; (8003048 <SysTick_Config+0x40>)
 8003038:	2207      	movs	r2, #7
 800303a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	e000e010 	.word	0xe000e010

0800304c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ff2d 	bl	8002eb4 <__NVIC_SetPriorityGrouping>
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003062:	b580      	push	{r7, lr}
 8003064:	b086      	sub	sp, #24
 8003066:	af00      	add	r7, sp, #0
 8003068:	4603      	mov	r3, r0
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003074:	f7ff ff42 	bl	8002efc <__NVIC_GetPriorityGrouping>
 8003078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	6978      	ldr	r0, [r7, #20]
 8003080:	f7ff ff90 	bl	8002fa4 <NVIC_EncodePriority>
 8003084:	4602      	mov	r2, r0
 8003086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff5f 	bl	8002f50 <__NVIC_SetPriority>
}
 8003092:	bf00      	nop
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	4603      	mov	r3, r0
 80030a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ff35 	bl	8002f18 <__NVIC_EnableIRQ>
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff ffa2 	bl	8003008 <SysTick_Config>
 80030c4:	4603      	mov	r3, r0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e043      	b.n	800316e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	4b22      	ldr	r3, [pc, #136]	; (8003178 <HAL_DMA_Init+0xa8>)
 80030ee:	4413      	add	r3, r2
 80030f0:	4a22      	ldr	r2, [pc, #136]	; (800317c <HAL_DMA_Init+0xac>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	091b      	lsrs	r3, r3, #4
 80030f8:	009a      	lsls	r2, r3, #2
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a1f      	ldr	r2, [pc, #124]	; (8003180 <HAL_DMA_Init+0xb0>)
 8003102:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800311a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800311e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003128:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003134:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003140:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	bffdfff8 	.word	0xbffdfff8
 800317c:	cccccccd 	.word	0xcccccccd
 8003180:	40020000 	.word	0x40020000

08003184 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f893 3020 	ldrb.w	r3, [r3, #32]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_DMA_Start_IT+0x20>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e04b      	b.n	800323c <HAL_DMA_Start_IT+0xb8>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d13a      	bne.n	800322e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	68b9      	ldr	r1, [r7, #8]
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 f973 	bl	80034c8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f042 020e 	orr.w	r2, r2, #14
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	e00f      	b.n	800321c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0204 	bic.w	r2, r2, #4
 800320a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 020a 	orr.w	r2, r2, #10
 800321a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	e005      	b.n	800323a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003236:	2302      	movs	r3, #2
 8003238:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800323a:	7dfb      	ldrb	r3, [r7, #23]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d008      	beq.n	800326e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2204      	movs	r2, #4
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e020      	b.n	80032b0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 020e 	bic.w	r2, r2, #14
 800327c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	2101      	movs	r1, #1
 8003298:	fa01 f202 	lsl.w	r2, r1, r2
 800329c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	2204      	movs	r2, #4
 80032da:	409a      	lsls	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d04f      	beq.n	8003384 <HAL_DMA_IRQHandler+0xc8>
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d04a      	beq.n	8003384 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d107      	bne.n	800330c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0204 	bic.w	r2, r2, #4
 800330a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a66      	ldr	r2, [pc, #408]	; (80034ac <HAL_DMA_IRQHandler+0x1f0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d029      	beq.n	800336a <HAL_DMA_IRQHandler+0xae>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a65      	ldr	r2, [pc, #404]	; (80034b0 <HAL_DMA_IRQHandler+0x1f4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d022      	beq.n	8003366 <HAL_DMA_IRQHandler+0xaa>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a63      	ldr	r2, [pc, #396]	; (80034b4 <HAL_DMA_IRQHandler+0x1f8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d01a      	beq.n	8003360 <HAL_DMA_IRQHandler+0xa4>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a62      	ldr	r2, [pc, #392]	; (80034b8 <HAL_DMA_IRQHandler+0x1fc>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d012      	beq.n	800335a <HAL_DMA_IRQHandler+0x9e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a60      	ldr	r2, [pc, #384]	; (80034bc <HAL_DMA_IRQHandler+0x200>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00a      	beq.n	8003354 <HAL_DMA_IRQHandler+0x98>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a5f      	ldr	r2, [pc, #380]	; (80034c0 <HAL_DMA_IRQHandler+0x204>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d102      	bne.n	800334e <HAL_DMA_IRQHandler+0x92>
 8003348:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800334c:	e00e      	b.n	800336c <HAL_DMA_IRQHandler+0xb0>
 800334e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003352:	e00b      	b.n	800336c <HAL_DMA_IRQHandler+0xb0>
 8003354:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003358:	e008      	b.n	800336c <HAL_DMA_IRQHandler+0xb0>
 800335a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800335e:	e005      	b.n	800336c <HAL_DMA_IRQHandler+0xb0>
 8003360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003364:	e002      	b.n	800336c <HAL_DMA_IRQHandler+0xb0>
 8003366:	2340      	movs	r3, #64	; 0x40
 8003368:	e000      	b.n	800336c <HAL_DMA_IRQHandler+0xb0>
 800336a:	2304      	movs	r3, #4
 800336c:	4a55      	ldr	r2, [pc, #340]	; (80034c4 <HAL_DMA_IRQHandler+0x208>)
 800336e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8094 	beq.w	80034a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003382:	e08e      	b.n	80034a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	2202      	movs	r2, #2
 800338a:	409a      	lsls	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d056      	beq.n	8003442 <HAL_DMA_IRQHandler+0x186>
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d051      	beq.n	8003442 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0320 	and.w	r3, r3, #32
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10b      	bne.n	80033c4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 020a 	bic.w	r2, r2, #10
 80033ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a38      	ldr	r2, [pc, #224]	; (80034ac <HAL_DMA_IRQHandler+0x1f0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d029      	beq.n	8003422 <HAL_DMA_IRQHandler+0x166>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a37      	ldr	r2, [pc, #220]	; (80034b0 <HAL_DMA_IRQHandler+0x1f4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d022      	beq.n	800341e <HAL_DMA_IRQHandler+0x162>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a35      	ldr	r2, [pc, #212]	; (80034b4 <HAL_DMA_IRQHandler+0x1f8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d01a      	beq.n	8003418 <HAL_DMA_IRQHandler+0x15c>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a34      	ldr	r2, [pc, #208]	; (80034b8 <HAL_DMA_IRQHandler+0x1fc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d012      	beq.n	8003412 <HAL_DMA_IRQHandler+0x156>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a32      	ldr	r2, [pc, #200]	; (80034bc <HAL_DMA_IRQHandler+0x200>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00a      	beq.n	800340c <HAL_DMA_IRQHandler+0x150>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a31      	ldr	r2, [pc, #196]	; (80034c0 <HAL_DMA_IRQHandler+0x204>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d102      	bne.n	8003406 <HAL_DMA_IRQHandler+0x14a>
 8003400:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003404:	e00e      	b.n	8003424 <HAL_DMA_IRQHandler+0x168>
 8003406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800340a:	e00b      	b.n	8003424 <HAL_DMA_IRQHandler+0x168>
 800340c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003410:	e008      	b.n	8003424 <HAL_DMA_IRQHandler+0x168>
 8003412:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003416:	e005      	b.n	8003424 <HAL_DMA_IRQHandler+0x168>
 8003418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800341c:	e002      	b.n	8003424 <HAL_DMA_IRQHandler+0x168>
 800341e:	2320      	movs	r3, #32
 8003420:	e000      	b.n	8003424 <HAL_DMA_IRQHandler+0x168>
 8003422:	2302      	movs	r3, #2
 8003424:	4a27      	ldr	r2, [pc, #156]	; (80034c4 <HAL_DMA_IRQHandler+0x208>)
 8003426:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	2b00      	cmp	r3, #0
 8003436:	d034      	beq.n	80034a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003440:	e02f      	b.n	80034a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	2208      	movs	r2, #8
 8003448:	409a      	lsls	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4013      	ands	r3, r2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d028      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x1e8>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d023      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 020e 	bic.w	r2, r2, #14
 800346a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003474:	2101      	movs	r1, #1
 8003476:	fa01 f202 	lsl.w	r2, r1, r2
 800347a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	2b00      	cmp	r3, #0
 8003498:	d004      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	4798      	blx	r3
    }
  }
  return;
 80034a2:	bf00      	nop
 80034a4:	bf00      	nop
}
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40020008 	.word	0x40020008
 80034b0:	4002001c 	.word	0x4002001c
 80034b4:	40020030 	.word	0x40020030
 80034b8:	40020044 	.word	0x40020044
 80034bc:	40020058 	.word	0x40020058
 80034c0:	4002006c 	.word	0x4002006c
 80034c4:	40020000 	.word	0x40020000

080034c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034de:	2101      	movs	r1, #1
 80034e0:	fa01 f202 	lsl.w	r2, r1, r2
 80034e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b10      	cmp	r3, #16
 80034f4:	d108      	bne.n	8003508 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003506:	e007      	b.n	8003518 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	60da      	str	r2, [r3, #12]
}
 8003518:	bf00      	nop
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr
	...

08003524 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003524:	b480      	push	{r7}
 8003526:	b08b      	sub	sp, #44	; 0x2c
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800352e:	2300      	movs	r3, #0
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003532:	2300      	movs	r3, #0
 8003534:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003536:	e169      	b.n	800380c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003538:	2201      	movs	r2, #1
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	429a      	cmp	r2, r3
 8003552:	f040 8158 	bne.w	8003806 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	4a9a      	ldr	r2, [pc, #616]	; (80037c4 <HAL_GPIO_Init+0x2a0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d05e      	beq.n	800361e <HAL_GPIO_Init+0xfa>
 8003560:	4a98      	ldr	r2, [pc, #608]	; (80037c4 <HAL_GPIO_Init+0x2a0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d875      	bhi.n	8003652 <HAL_GPIO_Init+0x12e>
 8003566:	4a98      	ldr	r2, [pc, #608]	; (80037c8 <HAL_GPIO_Init+0x2a4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d058      	beq.n	800361e <HAL_GPIO_Init+0xfa>
 800356c:	4a96      	ldr	r2, [pc, #600]	; (80037c8 <HAL_GPIO_Init+0x2a4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d86f      	bhi.n	8003652 <HAL_GPIO_Init+0x12e>
 8003572:	4a96      	ldr	r2, [pc, #600]	; (80037cc <HAL_GPIO_Init+0x2a8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d052      	beq.n	800361e <HAL_GPIO_Init+0xfa>
 8003578:	4a94      	ldr	r2, [pc, #592]	; (80037cc <HAL_GPIO_Init+0x2a8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d869      	bhi.n	8003652 <HAL_GPIO_Init+0x12e>
 800357e:	4a94      	ldr	r2, [pc, #592]	; (80037d0 <HAL_GPIO_Init+0x2ac>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d04c      	beq.n	800361e <HAL_GPIO_Init+0xfa>
 8003584:	4a92      	ldr	r2, [pc, #584]	; (80037d0 <HAL_GPIO_Init+0x2ac>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d863      	bhi.n	8003652 <HAL_GPIO_Init+0x12e>
 800358a:	4a92      	ldr	r2, [pc, #584]	; (80037d4 <HAL_GPIO_Init+0x2b0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d046      	beq.n	800361e <HAL_GPIO_Init+0xfa>
 8003590:	4a90      	ldr	r2, [pc, #576]	; (80037d4 <HAL_GPIO_Init+0x2b0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d85d      	bhi.n	8003652 <HAL_GPIO_Init+0x12e>
 8003596:	2b12      	cmp	r3, #18
 8003598:	d82a      	bhi.n	80035f0 <HAL_GPIO_Init+0xcc>
 800359a:	2b12      	cmp	r3, #18
 800359c:	d859      	bhi.n	8003652 <HAL_GPIO_Init+0x12e>
 800359e:	a201      	add	r2, pc, #4	; (adr r2, 80035a4 <HAL_GPIO_Init+0x80>)
 80035a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a4:	0800361f 	.word	0x0800361f
 80035a8:	080035f9 	.word	0x080035f9
 80035ac:	0800360b 	.word	0x0800360b
 80035b0:	0800364d 	.word	0x0800364d
 80035b4:	08003653 	.word	0x08003653
 80035b8:	08003653 	.word	0x08003653
 80035bc:	08003653 	.word	0x08003653
 80035c0:	08003653 	.word	0x08003653
 80035c4:	08003653 	.word	0x08003653
 80035c8:	08003653 	.word	0x08003653
 80035cc:	08003653 	.word	0x08003653
 80035d0:	08003653 	.word	0x08003653
 80035d4:	08003653 	.word	0x08003653
 80035d8:	08003653 	.word	0x08003653
 80035dc:	08003653 	.word	0x08003653
 80035e0:	08003653 	.word	0x08003653
 80035e4:	08003653 	.word	0x08003653
 80035e8:	08003601 	.word	0x08003601
 80035ec:	08003615 	.word	0x08003615
 80035f0:	4a79      	ldr	r2, [pc, #484]	; (80037d8 <HAL_GPIO_Init+0x2b4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035f6:	e02c      	b.n	8003652 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	623b      	str	r3, [r7, #32]
          break;
 80035fe:	e029      	b.n	8003654 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	3304      	adds	r3, #4
 8003606:	623b      	str	r3, [r7, #32]
          break;
 8003608:	e024      	b.n	8003654 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	3308      	adds	r3, #8
 8003610:	623b      	str	r3, [r7, #32]
          break;
 8003612:	e01f      	b.n	8003654 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	330c      	adds	r3, #12
 800361a:	623b      	str	r3, [r7, #32]
          break;
 800361c:	e01a      	b.n	8003654 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d102      	bne.n	800362c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003626:	2304      	movs	r3, #4
 8003628:	623b      	str	r3, [r7, #32]
          break;
 800362a:	e013      	b.n	8003654 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d105      	bne.n	8003640 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003634:	2308      	movs	r3, #8
 8003636:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	611a      	str	r2, [r3, #16]
          break;
 800363e:	e009      	b.n	8003654 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003640:	2308      	movs	r3, #8
 8003642:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	615a      	str	r2, [r3, #20]
          break;
 800364a:	e003      	b.n	8003654 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800364c:	2300      	movs	r3, #0
 800364e:	623b      	str	r3, [r7, #32]
          break;
 8003650:	e000      	b.n	8003654 <HAL_GPIO_Init+0x130>
          break;
 8003652:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2bff      	cmp	r3, #255	; 0xff
 8003658:	d801      	bhi.n	800365e <HAL_GPIO_Init+0x13a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	e001      	b.n	8003662 <HAL_GPIO_Init+0x13e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3304      	adds	r3, #4
 8003662:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2bff      	cmp	r3, #255	; 0xff
 8003668:	d802      	bhi.n	8003670 <HAL_GPIO_Init+0x14c>
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	e002      	b.n	8003676 <HAL_GPIO_Init+0x152>
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	3b08      	subs	r3, #8
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	210f      	movs	r1, #15
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	fa01 f303 	lsl.w	r3, r1, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	401a      	ands	r2, r3
 8003688:	6a39      	ldr	r1, [r7, #32]
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	fa01 f303 	lsl.w	r3, r1, r3
 8003690:	431a      	orrs	r2, r3
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 80b1 	beq.w	8003806 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036a4:	4b4d      	ldr	r3, [pc, #308]	; (80037dc <HAL_GPIO_Init+0x2b8>)
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	4a4c      	ldr	r2, [pc, #304]	; (80037dc <HAL_GPIO_Init+0x2b8>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	6193      	str	r3, [r2, #24]
 80036b0:	4b4a      	ldr	r3, [pc, #296]	; (80037dc <HAL_GPIO_Init+0x2b8>)
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036bc:	4a48      	ldr	r2, [pc, #288]	; (80037e0 <HAL_GPIO_Init+0x2bc>)
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	089b      	lsrs	r3, r3, #2
 80036c2:	3302      	adds	r3, #2
 80036c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	220f      	movs	r2, #15
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4013      	ands	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a40      	ldr	r2, [pc, #256]	; (80037e4 <HAL_GPIO_Init+0x2c0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d013      	beq.n	8003710 <HAL_GPIO_Init+0x1ec>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a3f      	ldr	r2, [pc, #252]	; (80037e8 <HAL_GPIO_Init+0x2c4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00d      	beq.n	800370c <HAL_GPIO_Init+0x1e8>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a3e      	ldr	r2, [pc, #248]	; (80037ec <HAL_GPIO_Init+0x2c8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d007      	beq.n	8003708 <HAL_GPIO_Init+0x1e4>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a3d      	ldr	r2, [pc, #244]	; (80037f0 <HAL_GPIO_Init+0x2cc>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d101      	bne.n	8003704 <HAL_GPIO_Init+0x1e0>
 8003700:	2303      	movs	r3, #3
 8003702:	e006      	b.n	8003712 <HAL_GPIO_Init+0x1ee>
 8003704:	2304      	movs	r3, #4
 8003706:	e004      	b.n	8003712 <HAL_GPIO_Init+0x1ee>
 8003708:	2302      	movs	r3, #2
 800370a:	e002      	b.n	8003712 <HAL_GPIO_Init+0x1ee>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <HAL_GPIO_Init+0x1ee>
 8003710:	2300      	movs	r3, #0
 8003712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003714:	f002 0203 	and.w	r2, r2, #3
 8003718:	0092      	lsls	r2, r2, #2
 800371a:	4093      	lsls	r3, r2
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003722:	492f      	ldr	r1, [pc, #188]	; (80037e0 <HAL_GPIO_Init+0x2bc>)
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	089b      	lsrs	r3, r3, #2
 8003728:	3302      	adds	r3, #2
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d006      	beq.n	800374a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800373c:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <HAL_GPIO_Init+0x2d0>)
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	492c      	ldr	r1, [pc, #176]	; (80037f4 <HAL_GPIO_Init+0x2d0>)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	4313      	orrs	r3, r2
 8003746:	608b      	str	r3, [r1, #8]
 8003748:	e006      	b.n	8003758 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800374a:	4b2a      	ldr	r3, [pc, #168]	; (80037f4 <HAL_GPIO_Init+0x2d0>)
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	43db      	mvns	r3, r3
 8003752:	4928      	ldr	r1, [pc, #160]	; (80037f4 <HAL_GPIO_Init+0x2d0>)
 8003754:	4013      	ands	r3, r2
 8003756:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d006      	beq.n	8003772 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003764:	4b23      	ldr	r3, [pc, #140]	; (80037f4 <HAL_GPIO_Init+0x2d0>)
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	4922      	ldr	r1, [pc, #136]	; (80037f4 <HAL_GPIO_Init+0x2d0>)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	4313      	orrs	r3, r2
 800376e:	60cb      	str	r3, [r1, #12]
 8003770:	e006      	b.n	8003780 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <HAL_GPIO_Init+0x2d0>)
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	43db      	mvns	r3, r3
 800377a:	491e      	ldr	r1, [pc, #120]	; (80037f4 <HAL_GPIO_Init+0x2d0>)
 800377c:	4013      	ands	r3, r2
 800377e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d006      	beq.n	800379a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800378c:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <HAL_GPIO_Init+0x2d0>)
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	4918      	ldr	r1, [pc, #96]	; (80037f4 <HAL_GPIO_Init+0x2d0>)
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	4313      	orrs	r3, r2
 8003796:	604b      	str	r3, [r1, #4]
 8003798:	e006      	b.n	80037a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800379a:	4b16      	ldr	r3, [pc, #88]	; (80037f4 <HAL_GPIO_Init+0x2d0>)
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	4914      	ldr	r1, [pc, #80]	; (80037f4 <HAL_GPIO_Init+0x2d0>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d021      	beq.n	80037f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037b4:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <HAL_GPIO_Init+0x2d0>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	490e      	ldr	r1, [pc, #56]	; (80037f4 <HAL_GPIO_Init+0x2d0>)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	4313      	orrs	r3, r2
 80037be:	600b      	str	r3, [r1, #0]
 80037c0:	e021      	b.n	8003806 <HAL_GPIO_Init+0x2e2>
 80037c2:	bf00      	nop
 80037c4:	10320000 	.word	0x10320000
 80037c8:	10310000 	.word	0x10310000
 80037cc:	10220000 	.word	0x10220000
 80037d0:	10210000 	.word	0x10210000
 80037d4:	10120000 	.word	0x10120000
 80037d8:	10110000 	.word	0x10110000
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40010000 	.word	0x40010000
 80037e4:	40010800 	.word	0x40010800
 80037e8:	40010c00 	.word	0x40010c00
 80037ec:	40011000 	.word	0x40011000
 80037f0:	40011400 	.word	0x40011400
 80037f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <HAL_GPIO_Init+0x304>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	43db      	mvns	r3, r3
 8003800:	4909      	ldr	r1, [pc, #36]	; (8003828 <HAL_GPIO_Init+0x304>)
 8003802:	4013      	ands	r3, r2
 8003804:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	3301      	adds	r3, #1
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	fa22 f303 	lsr.w	r3, r2, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	f47f ae8e 	bne.w	8003538 <HAL_GPIO_Init+0x14>
  }
}
 800381c:	bf00      	nop
 800381e:	bf00      	nop
 8003820:	372c      	adds	r7, #44	; 0x2c
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr
 8003828:	40010400 	.word	0x40010400

0800382c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	887b      	ldrh	r3, [r7, #2]
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003844:	2301      	movs	r3, #1
 8003846:	73fb      	strb	r3, [r7, #15]
 8003848:	e001      	b.n	800384e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800384a:	2300      	movs	r3, #0
 800384c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800384e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	460b      	mov	r3, r1
 8003864:	807b      	strh	r3, [r7, #2]
 8003866:	4613      	mov	r3, r2
 8003868:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800386a:	787b      	ldrb	r3, [r7, #1]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003870:	887a      	ldrh	r2, [r7, #2]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003876:	e003      	b.n	8003880 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003878:	887b      	ldrh	r3, [r7, #2]
 800387a:	041a      	lsls	r2, r3, #16
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	611a      	str	r2, [r3, #16]
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
	...

0800388c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003896:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	4013      	ands	r3, r2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d006      	beq.n	80038b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038a2:	4a05      	ldr	r2, [pc, #20]	; (80038b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038a8:	88fb      	ldrh	r3, [r7, #6]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe fbe8 	bl	8002080 <HAL_GPIO_EXTI_Callback>
  }
}
 80038b0:	bf00      	nop
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40010400 	.word	0x40010400

080038bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e12b      	b.n	8003b26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d106      	bne.n	80038e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fe fcea 	bl	80022bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2224      	movs	r2, #36	; 0x24
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800390e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800391e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003920:	f001 fc10 	bl	8005144 <HAL_RCC_GetPCLK1Freq>
 8003924:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4a81      	ldr	r2, [pc, #516]	; (8003b30 <HAL_I2C_Init+0x274>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d807      	bhi.n	8003940 <HAL_I2C_Init+0x84>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4a80      	ldr	r2, [pc, #512]	; (8003b34 <HAL_I2C_Init+0x278>)
 8003934:	4293      	cmp	r3, r2
 8003936:	bf94      	ite	ls
 8003938:	2301      	movls	r3, #1
 800393a:	2300      	movhi	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	e006      	b.n	800394e <HAL_I2C_Init+0x92>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4a7d      	ldr	r2, [pc, #500]	; (8003b38 <HAL_I2C_Init+0x27c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	bf94      	ite	ls
 8003948:	2301      	movls	r3, #1
 800394a:	2300      	movhi	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e0e7      	b.n	8003b26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4a78      	ldr	r2, [pc, #480]	; (8003b3c <HAL_I2C_Init+0x280>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	0c9b      	lsrs	r3, r3, #18
 8003960:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4a6a      	ldr	r2, [pc, #424]	; (8003b30 <HAL_I2C_Init+0x274>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d802      	bhi.n	8003990 <HAL_I2C_Init+0xd4>
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	3301      	adds	r3, #1
 800398e:	e009      	b.n	80039a4 <HAL_I2C_Init+0xe8>
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003996:	fb02 f303 	mul.w	r3, r2, r3
 800399a:	4a69      	ldr	r2, [pc, #420]	; (8003b40 <HAL_I2C_Init+0x284>)
 800399c:	fba2 2303 	umull	r2, r3, r2, r3
 80039a0:	099b      	lsrs	r3, r3, #6
 80039a2:	3301      	adds	r3, #1
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	495c      	ldr	r1, [pc, #368]	; (8003b30 <HAL_I2C_Init+0x274>)
 80039c0:	428b      	cmp	r3, r1
 80039c2:	d819      	bhi.n	80039f8 <HAL_I2C_Init+0x13c>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1e59      	subs	r1, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80039d2:	1c59      	adds	r1, r3, #1
 80039d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039d8:	400b      	ands	r3, r1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_I2C_Init+0x138>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1e59      	subs	r1, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ec:	3301      	adds	r3, #1
 80039ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f2:	e051      	b.n	8003a98 <HAL_I2C_Init+0x1dc>
 80039f4:	2304      	movs	r3, #4
 80039f6:	e04f      	b.n	8003a98 <HAL_I2C_Init+0x1dc>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d111      	bne.n	8003a24 <HAL_I2C_Init+0x168>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1e58      	subs	r0, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6859      	ldr	r1, [r3, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	440b      	add	r3, r1
 8003a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a12:	3301      	adds	r3, #1
 8003a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bf0c      	ite	eq
 8003a1c:	2301      	moveq	r3, #1
 8003a1e:	2300      	movne	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	e012      	b.n	8003a4a <HAL_I2C_Init+0x18e>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	1e58      	subs	r0, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6859      	ldr	r1, [r3, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	0099      	lsls	r1, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_I2C_Init+0x196>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e022      	b.n	8003a98 <HAL_I2C_Init+0x1dc>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10e      	bne.n	8003a78 <HAL_I2C_Init+0x1bc>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1e58      	subs	r0, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6859      	ldr	r1, [r3, #4]
 8003a62:	460b      	mov	r3, r1
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	440b      	add	r3, r1
 8003a68:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a76:	e00f      	b.n	8003a98 <HAL_I2C_Init+0x1dc>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1e58      	subs	r0, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6859      	ldr	r1, [r3, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	0099      	lsls	r1, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a8e:	3301      	adds	r3, #1
 8003a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	6809      	ldr	r1, [r1, #0]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69da      	ldr	r2, [r3, #28]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ac6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6911      	ldr	r1, [r2, #16]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	68d2      	ldr	r2, [r2, #12]
 8003ad2:	4311      	orrs	r1, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	000186a0 	.word	0x000186a0
 8003b34:	001e847f 	.word	0x001e847f
 8003b38:	003d08ff 	.word	0x003d08ff
 8003b3c:	431bde83 	.word	0x431bde83
 8003b40:	10624dd3 	.word	0x10624dd3

08003b44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	607a      	str	r2, [r7, #4]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	460b      	mov	r3, r1
 8003b52:	817b      	strh	r3, [r7, #10]
 8003b54:	4613      	mov	r3, r2
 8003b56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b58:	f7fe fd4a 	bl	80025f0 <HAL_GetTick>
 8003b5c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	f040 80e0 	bne.w	8003d2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	2319      	movs	r3, #25
 8003b72:	2201      	movs	r2, #1
 8003b74:	4970      	ldr	r1, [pc, #448]	; (8003d38 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fc9e 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b82:	2302      	movs	r3, #2
 8003b84:	e0d3      	b.n	8003d2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_I2C_Master_Transmit+0x50>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e0cc      	b.n	8003d2e <HAL_I2C_Master_Transmit+0x1ea>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d007      	beq.n	8003bba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 0201 	orr.w	r2, r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2221      	movs	r2, #33	; 0x21
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2210      	movs	r2, #16
 8003bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	893a      	ldrh	r2, [r7, #8]
 8003bea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4a50      	ldr	r2, [pc, #320]	; (8003d3c <HAL_I2C_Master_Transmit+0x1f8>)
 8003bfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bfc:	8979      	ldrh	r1, [r7, #10]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	6a3a      	ldr	r2, [r7, #32]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fb08 	bl	8004218 <I2C_MasterRequestWrite>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e08d      	b.n	8003d2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c12:	2300      	movs	r3, #0
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c28:	e066      	b.n	8003cf8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	6a39      	ldr	r1, [r7, #32]
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fd5c 	bl	80046ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00d      	beq.n	8003c56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d107      	bne.n	8003c52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e06b      	b.n	8003d2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	781a      	ldrb	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d11b      	bne.n	8003ccc <HAL_I2C_Master_Transmit+0x188>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d017      	beq.n	8003ccc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	781a      	ldrb	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	6a39      	ldr	r1, [r7, #32]
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fd53 	bl	800477c <I2C_WaitOnBTFFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00d      	beq.n	8003cf8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d107      	bne.n	8003cf4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e01a      	b.n	8003d2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d194      	bne.n	8003c2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	e000      	b.n	8003d2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d2c:	2302      	movs	r3, #2
  }
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	00100002 	.word	0x00100002
 8003d3c:	ffff0000 	.word	0xffff0000

08003d40 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08c      	sub	sp, #48	; 0x30
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	607a      	str	r2, [r7, #4]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	817b      	strh	r3, [r7, #10]
 8003d50:	4613      	mov	r3, r2
 8003d52:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d58:	f7fe fc4a 	bl	80025f0 <HAL_GetTick>
 8003d5c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	f040 824b 	bne.w	8004202 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	2319      	movs	r3, #25
 8003d72:	2201      	movs	r2, #1
 8003d74:	497f      	ldr	r1, [pc, #508]	; (8003f74 <HAL_I2C_Master_Receive+0x234>)
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 fb9e 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003d82:	2302      	movs	r3, #2
 8003d84:	e23e      	b.n	8004204 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_I2C_Master_Receive+0x54>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e237      	b.n	8004204 <HAL_I2C_Master_Receive+0x4c4>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d007      	beq.n	8003dba <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0201 	orr.w	r2, r2, #1
 8003db8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2222      	movs	r2, #34	; 0x22
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2210      	movs	r2, #16
 8003dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	893a      	ldrh	r2, [r7, #8]
 8003dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4a5f      	ldr	r2, [pc, #380]	; (8003f78 <HAL_I2C_Master_Receive+0x238>)
 8003dfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003dfc:	8979      	ldrh	r1, [r7, #10]
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 fa8a 	bl	800431c <I2C_MasterRequestRead>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e1f8      	b.n	8004204 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d113      	bne.n	8003e42 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	e1cc      	b.n	80041dc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d11e      	bne.n	8003e88 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e5a:	b672      	cpsid	i
}
 8003e5c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	61bb      	str	r3, [r7, #24]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	61bb      	str	r3, [r7, #24]
 8003e72:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e84:	b662      	cpsie	i
}
 8003e86:	e035      	b.n	8003ef4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d11e      	bne.n	8003ece <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ea0:	b672      	cpsid	i
}
 8003ea2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003eca:	b662      	cpsie	i
}
 8003ecc:	e012      	b.n	8003ef4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003edc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003ef4:	e172      	b.n	80041dc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	f200 811f 	bhi.w	800413e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d123      	bne.n	8003f50 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 fc7d 	bl	800480c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e173      	b.n	8004204 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f4e:	e145      	b.n	80041dc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d152      	bne.n	8003ffe <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5e:	2200      	movs	r2, #0
 8003f60:	4906      	ldr	r1, [pc, #24]	; (8003f7c <HAL_I2C_Master_Receive+0x23c>)
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 faa8 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d008      	beq.n	8003f80 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e148      	b.n	8004204 <HAL_I2C_Master_Receive+0x4c4>
 8003f72:	bf00      	nop
 8003f74:	00100002 	.word	0x00100002
 8003f78:	ffff0000 	.word	0xffff0000
 8003f7c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003f80:	b672      	cpsid	i
}
 8003f82:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003fc6:	b662      	cpsie	i
}
 8003fc8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ffc:	e0ee      	b.n	80041dc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004004:	2200      	movs	r2, #0
 8004006:	4981      	ldr	r1, [pc, #516]	; (800420c <HAL_I2C_Master_Receive+0x4cc>)
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 fa55 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0f5      	b.n	8004204 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004026:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004028:	b672      	cpsid	i
}
 800402a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800405e:	4b6c      	ldr	r3, [pc, #432]	; (8004210 <HAL_I2C_Master_Receive+0x4d0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	08db      	lsrs	r3, r3, #3
 8004064:	4a6b      	ldr	r2, [pc, #428]	; (8004214 <HAL_I2C_Master_Receive+0x4d4>)
 8004066:	fba2 2303 	umull	r2, r3, r2, r3
 800406a:	0a1a      	lsrs	r2, r3, #8
 800406c:	4613      	mov	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	00da      	lsls	r2, r3, #3
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	3b01      	subs	r3, #1
 800407c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d118      	bne.n	80040b6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2220      	movs	r2, #32
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f043 0220 	orr.w	r2, r3, #32
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80040a6:	b662      	cpsie	i
}
 80040a8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e0a6      	b.n	8004204 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d1d9      	bne.n	8004078 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004106:	b662      	cpsie	i
}
 8004108:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800413c:	e04e      	b.n	80041dc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800413e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004140:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 fb62 	bl	800480c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e058      	b.n	8004204 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b04      	cmp	r3, #4
 8004190:	d124      	bne.n	80041dc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004196:	2b03      	cmp	r3, #3
 8004198:	d107      	bne.n	80041aa <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f47f ae88 	bne.w	8003ef6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	e000      	b.n	8004204 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8004202:	2302      	movs	r3, #2
  }
}
 8004204:	4618      	mov	r0, r3
 8004206:	3728      	adds	r7, #40	; 0x28
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	00010004 	.word	0x00010004
 8004210:	20000004 	.word	0x20000004
 8004214:	14f8b589 	.word	0x14f8b589

08004218 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af02      	add	r7, sp, #8
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	607a      	str	r2, [r7, #4]
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	460b      	mov	r3, r1
 8004226:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b08      	cmp	r3, #8
 8004232:	d006      	beq.n	8004242 <I2C_MasterRequestWrite+0x2a>
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d003      	beq.n	8004242 <I2C_MasterRequestWrite+0x2a>
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004240:	d108      	bne.n	8004254 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	e00b      	b.n	800426c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	2b12      	cmp	r3, #18
 800425a:	d107      	bne.n	800426c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800426a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f91d 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00d      	beq.n	80042a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004292:	d103      	bne.n	800429c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800429a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e035      	b.n	800430c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042a8:	d108      	bne.n	80042bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042aa:	897b      	ldrh	r3, [r7, #10]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	461a      	mov	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042b8:	611a      	str	r2, [r3, #16]
 80042ba:	e01b      	b.n	80042f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042bc:	897b      	ldrh	r3, [r7, #10]
 80042be:	11db      	asrs	r3, r3, #7
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	f003 0306 	and.w	r3, r3, #6
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	f063 030f 	orn	r3, r3, #15
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	490e      	ldr	r1, [pc, #56]	; (8004314 <I2C_MasterRequestWrite+0xfc>)
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 f966 	bl	80045ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e010      	b.n	800430c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042ea:	897b      	ldrh	r3, [r7, #10]
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	4907      	ldr	r1, [pc, #28]	; (8004318 <I2C_MasterRequestWrite+0x100>)
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 f956 	bl	80045ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	00010008 	.word	0x00010008
 8004318:	00010002 	.word	0x00010002

0800431c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af02      	add	r7, sp, #8
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	460b      	mov	r3, r1
 800432a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004340:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2b08      	cmp	r3, #8
 8004346:	d006      	beq.n	8004356 <I2C_MasterRequestRead+0x3a>
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d003      	beq.n	8004356 <I2C_MasterRequestRead+0x3a>
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004354:	d108      	bne.n	8004368 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	e00b      	b.n	8004380 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436c:	2b11      	cmp	r3, #17
 800436e:	d107      	bne.n	8004380 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800437e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f893 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00d      	beq.n	80043b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a6:	d103      	bne.n	80043b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e079      	b.n	80044a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043bc:	d108      	bne.n	80043d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043be:	897b      	ldrh	r3, [r7, #10]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	f043 0301 	orr.w	r3, r3, #1
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	611a      	str	r2, [r3, #16]
 80043ce:	e05f      	b.n	8004490 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043d0:	897b      	ldrh	r3, [r7, #10]
 80043d2:	11db      	asrs	r3, r3, #7
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	f003 0306 	and.w	r3, r3, #6
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f063 030f 	orn	r3, r3, #15
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	4930      	ldr	r1, [pc, #192]	; (80044b0 <I2C_MasterRequestRead+0x194>)
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f8dc 	bl	80045ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e054      	b.n	80044a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043fe:	897b      	ldrh	r3, [r7, #10]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	4929      	ldr	r1, [pc, #164]	; (80044b4 <I2C_MasterRequestRead+0x198>)
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f8cc 	bl	80045ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e044      	b.n	80044a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800441e:	2300      	movs	r3, #0
 8004420:	613b      	str	r3, [r7, #16]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004442:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f831 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00d      	beq.n	8004478 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800446a:	d103      	bne.n	8004474 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004472:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e017      	b.n	80044a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004478:	897b      	ldrh	r3, [r7, #10]
 800447a:	11db      	asrs	r3, r3, #7
 800447c:	b2db      	uxtb	r3, r3
 800447e:	f003 0306 	and.w	r3, r3, #6
 8004482:	b2db      	uxtb	r3, r3
 8004484:	f063 030e 	orn	r3, r3, #14
 8004488:	b2da      	uxtb	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	4907      	ldr	r1, [pc, #28]	; (80044b4 <I2C_MasterRequestRead+0x198>)
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 f888 	bl	80045ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	00010008 	.word	0x00010008
 80044b4:	00010002 	.word	0x00010002

080044b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044c8:	e048      	b.n	800455c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d0:	d044      	beq.n	800455c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d2:	f7fe f88d 	bl	80025f0 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d302      	bcc.n	80044e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d139      	bne.n	800455c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	0c1b      	lsrs	r3, r3, #16
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d10d      	bne.n	800450e <I2C_WaitOnFlagUntilTimeout+0x56>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	43da      	mvns	r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4013      	ands	r3, r2
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	e00c      	b.n	8004528 <I2C_WaitOnFlagUntilTimeout+0x70>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	43da      	mvns	r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	4013      	ands	r3, r2
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	bf0c      	ite	eq
 8004520:	2301      	moveq	r3, #1
 8004522:	2300      	movne	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	461a      	mov	r2, r3
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	429a      	cmp	r2, r3
 800452c:	d116      	bne.n	800455c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	f043 0220 	orr.w	r2, r3, #32
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e023      	b.n	80045a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	0c1b      	lsrs	r3, r3, #16
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b01      	cmp	r3, #1
 8004564:	d10d      	bne.n	8004582 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	43da      	mvns	r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	4013      	ands	r3, r2
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	bf0c      	ite	eq
 8004578:	2301      	moveq	r3, #1
 800457a:	2300      	movne	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	461a      	mov	r2, r3
 8004580:	e00c      	b.n	800459c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	43da      	mvns	r2, r3
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	4013      	ands	r3, r2
 800458e:	b29b      	uxth	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	bf0c      	ite	eq
 8004594:	2301      	moveq	r3, #1
 8004596:	2300      	movne	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	461a      	mov	r2, r3
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d093      	beq.n	80044ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045ba:	e071      	b.n	80046a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ca:	d123      	bne.n	8004614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	f043 0204 	orr.w	r2, r3, #4
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e067      	b.n	80046e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461a:	d041      	beq.n	80046a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800461c:	f7fd ffe8 	bl	80025f0 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	429a      	cmp	r2, r3
 800462a:	d302      	bcc.n	8004632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d136      	bne.n	80046a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	0c1b      	lsrs	r3, r3, #16
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	d10c      	bne.n	8004656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	43da      	mvns	r2, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4013      	ands	r3, r2
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	bf14      	ite	ne
 800464e:	2301      	movne	r3, #1
 8004650:	2300      	moveq	r3, #0
 8004652:	b2db      	uxtb	r3, r3
 8004654:	e00b      	b.n	800466e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	43da      	mvns	r2, r3
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4013      	ands	r3, r2
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	bf14      	ite	ne
 8004668:	2301      	movne	r3, #1
 800466a:	2300      	moveq	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d016      	beq.n	80046a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	f043 0220 	orr.w	r2, r3, #32
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e021      	b.n	80046e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	0c1b      	lsrs	r3, r3, #16
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d10c      	bne.n	80046c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	43da      	mvns	r2, r3
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	4013      	ands	r3, r2
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bf14      	ite	ne
 80046bc:	2301      	movne	r3, #1
 80046be:	2300      	moveq	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e00b      	b.n	80046dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	43da      	mvns	r2, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4013      	ands	r3, r2
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bf14      	ite	ne
 80046d6:	2301      	movne	r3, #1
 80046d8:	2300      	moveq	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f47f af6d 	bne.w	80045bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046f8:	e034      	b.n	8004764 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f8e3 	bl	80048c6 <I2C_IsAcknowledgeFailed>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e034      	b.n	8004774 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004710:	d028      	beq.n	8004764 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004712:	f7fd ff6d 	bl	80025f0 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	429a      	cmp	r2, r3
 8004720:	d302      	bcc.n	8004728 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d11d      	bne.n	8004764 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004732:	2b80      	cmp	r3, #128	; 0x80
 8004734:	d016      	beq.n	8004764 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	f043 0220 	orr.w	r2, r3, #32
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e007      	b.n	8004774 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476e:	2b80      	cmp	r3, #128	; 0x80
 8004770:	d1c3      	bne.n	80046fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004788:	e034      	b.n	80047f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f89b 	bl	80048c6 <I2C_IsAcknowledgeFailed>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e034      	b.n	8004804 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a0:	d028      	beq.n	80047f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a2:	f7fd ff25 	bl	80025f0 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d302      	bcc.n	80047b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d11d      	bne.n	80047f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f003 0304 	and.w	r3, r3, #4
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d016      	beq.n	80047f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	f043 0220 	orr.w	r2, r3, #32
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e007      	b.n	8004804 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d1c3      	bne.n	800478a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004818:	e049      	b.n	80048ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	f003 0310 	and.w	r3, r3, #16
 8004824:	2b10      	cmp	r3, #16
 8004826:	d119      	bne.n	800485c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0210 	mvn.w	r2, #16
 8004830:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e030      	b.n	80048be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485c:	f7fd fec8 	bl	80025f0 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	429a      	cmp	r2, r3
 800486a:	d302      	bcc.n	8004872 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d11d      	bne.n	80048ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487c:	2b40      	cmp	r3, #64	; 0x40
 800487e:	d016      	beq.n	80048ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2220      	movs	r2, #32
 800488a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	f043 0220 	orr.w	r2, r3, #32
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e007      	b.n	80048be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b8:	2b40      	cmp	r3, #64	; 0x40
 80048ba:	d1ae      	bne.n	800481a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048dc:	d11b      	bne.n	8004916 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	f043 0204 	orr.w	r2, r3, #4
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	bc80      	pop	{r7}
 8004920:	4770      	bx	lr

08004922 <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 8004922:	b480      	push	{r7}
 8004924:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 8004926:	bf20      	wfe
  __asm volatile( "nop" );
 8004928:	bf00      	nop
}
 800492a:	bf00      	nop
 800492c:	46bd      	mov	sp, r7
 800492e:	bc80      	pop	{r7}
 8004930:	4770      	bx	lr
	...

08004934 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004938:	4b03      	ldr	r3, [pc, #12]	; (8004948 <HAL_PWR_EnableBkUpAccess+0x14>)
 800493a:	2201      	movs	r2, #1
 800493c:	601a      	str	r2, [r3, #0]
}
 800493e:	bf00      	nop
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	420e0020 	.word	0x420e0020

0800494c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 8004958:	4b13      	ldr	r3, [pc, #76]	; (80049a8 <HAL_PWR_EnterSTOPMode+0x5c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a12      	ldr	r2, [pc, #72]	; (80049a8 <HAL_PWR_EnterSTOPMode+0x5c>)
 800495e:	f023 0302 	bic.w	r3, r3, #2
 8004962:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 8004964:	4b10      	ldr	r3, [pc, #64]	; (80049a8 <HAL_PWR_EnterSTOPMode+0x5c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f023 0201 	bic.w	r2, r3, #1
 800496c:	490e      	ldr	r1, [pc, #56]	; (80049a8 <HAL_PWR_EnterSTOPMode+0x5c>)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4313      	orrs	r3, r2
 8004972:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004974:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <HAL_PWR_EnterSTOPMode+0x60>)
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	4a0c      	ldr	r2, [pc, #48]	; (80049ac <HAL_PWR_EnterSTOPMode+0x60>)
 800497a:	f043 0304 	orr.w	r3, r3, #4
 800497e:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004986:	bf30      	wfi
 8004988:	e004      	b.n	8004994 <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800498a:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 800498c:	f7ff ffc9 	bl	8004922 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 8004990:	f7ff ffc7 	bl	8004922 <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004994:	4b05      	ldr	r3, [pc, #20]	; (80049ac <HAL_PWR_EnterSTOPMode+0x60>)
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	4a04      	ldr	r2, [pc, #16]	; (80049ac <HAL_PWR_EnterSTOPMode+0x60>)
 800499a:	f023 0304 	bic.w	r3, r3, #4
 800499e:	6113      	str	r3, [r2, #16]
}
 80049a0:	bf00      	nop
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40007000 	.word	0x40007000
 80049ac:	e000ed00 	.word	0xe000ed00

080049b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e272      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 8087 	beq.w	8004ade <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049d0:	4b92      	ldr	r3, [pc, #584]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f003 030c 	and.w	r3, r3, #12
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d00c      	beq.n	80049f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049dc:	4b8f      	ldr	r3, [pc, #572]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f003 030c 	and.w	r3, r3, #12
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d112      	bne.n	8004a0e <HAL_RCC_OscConfig+0x5e>
 80049e8:	4b8c      	ldr	r3, [pc, #560]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f4:	d10b      	bne.n	8004a0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f6:	4b89      	ldr	r3, [pc, #548]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d06c      	beq.n	8004adc <HAL_RCC_OscConfig+0x12c>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d168      	bne.n	8004adc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e24c      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a16:	d106      	bne.n	8004a26 <HAL_RCC_OscConfig+0x76>
 8004a18:	4b80      	ldr	r3, [pc, #512]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a7f      	ldr	r2, [pc, #508]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	e02e      	b.n	8004a84 <HAL_RCC_OscConfig+0xd4>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10c      	bne.n	8004a48 <HAL_RCC_OscConfig+0x98>
 8004a2e:	4b7b      	ldr	r3, [pc, #492]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a7a      	ldr	r2, [pc, #488]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	4b78      	ldr	r3, [pc, #480]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a77      	ldr	r2, [pc, #476]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	e01d      	b.n	8004a84 <HAL_RCC_OscConfig+0xd4>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a50:	d10c      	bne.n	8004a6c <HAL_RCC_OscConfig+0xbc>
 8004a52:	4b72      	ldr	r3, [pc, #456]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a71      	ldr	r2, [pc, #452]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	4b6f      	ldr	r3, [pc, #444]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a6e      	ldr	r2, [pc, #440]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e00b      	b.n	8004a84 <HAL_RCC_OscConfig+0xd4>
 8004a6c:	4b6b      	ldr	r3, [pc, #428]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a6a      	ldr	r2, [pc, #424]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	4b68      	ldr	r3, [pc, #416]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a67      	ldr	r2, [pc, #412]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d013      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8c:	f7fd fdb0 	bl	80025f0 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a94:	f7fd fdac 	bl	80025f0 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b64      	cmp	r3, #100	; 0x64
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e200      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa6:	4b5d      	ldr	r3, [pc, #372]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0xe4>
 8004ab2:	e014      	b.n	8004ade <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab4:	f7fd fd9c 	bl	80025f0 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004abc:	f7fd fd98 	bl	80025f0 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	; 0x64
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e1ec      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ace:	4b53      	ldr	r3, [pc, #332]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0x10c>
 8004ada:	e000      	b.n	8004ade <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d063      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aea:	4b4c      	ldr	r3, [pc, #304]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00b      	beq.n	8004b0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004af6:	4b49      	ldr	r3, [pc, #292]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d11c      	bne.n	8004b3c <HAL_RCC_OscConfig+0x18c>
 8004b02:	4b46      	ldr	r3, [pc, #280]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d116      	bne.n	8004b3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b0e:	4b43      	ldr	r3, [pc, #268]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d005      	beq.n	8004b26 <HAL_RCC_OscConfig+0x176>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d001      	beq.n	8004b26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e1c0      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b26:	4b3d      	ldr	r3, [pc, #244]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	4939      	ldr	r1, [pc, #228]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b3a:	e03a      	b.n	8004bb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d020      	beq.n	8004b86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b44:	4b36      	ldr	r3, [pc, #216]	; (8004c20 <HAL_RCC_OscConfig+0x270>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4a:	f7fd fd51 	bl	80025f0 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b52:	f7fd fd4d 	bl	80025f0 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e1a1      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b64:	4b2d      	ldr	r3, [pc, #180]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f0      	beq.n	8004b52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b70:	4b2a      	ldr	r3, [pc, #168]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	4927      	ldr	r1, [pc, #156]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	600b      	str	r3, [r1, #0]
 8004b84:	e015      	b.n	8004bb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b86:	4b26      	ldr	r3, [pc, #152]	; (8004c20 <HAL_RCC_OscConfig+0x270>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8c:	f7fd fd30 	bl	80025f0 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b94:	f7fd fd2c 	bl	80025f0 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e180      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba6:	4b1d      	ldr	r3, [pc, #116]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f0      	bne.n	8004b94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d03a      	beq.n	8004c34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d019      	beq.n	8004bfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bc6:	4b17      	ldr	r3, [pc, #92]	; (8004c24 <HAL_RCC_OscConfig+0x274>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bcc:	f7fd fd10 	bl	80025f0 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd4:	f7fd fd0c 	bl	80025f0 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e160      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be6:	4b0d      	ldr	r3, [pc, #52]	; (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f0      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004bf2:	2001      	movs	r0, #1
 8004bf4:	f000 face 	bl	8005194 <RCC_Delay>
 8004bf8:	e01c      	b.n	8004c34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bfa:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <HAL_RCC_OscConfig+0x274>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c00:	f7fd fcf6 	bl	80025f0 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c06:	e00f      	b.n	8004c28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c08:	f7fd fcf2 	bl	80025f0 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d908      	bls.n	8004c28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e146      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
 8004c1a:	bf00      	nop
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	42420000 	.word	0x42420000
 8004c24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c28:	4b92      	ldr	r3, [pc, #584]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e9      	bne.n	8004c08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 80a6 	beq.w	8004d8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c42:	2300      	movs	r3, #0
 8004c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c46:	4b8b      	ldr	r3, [pc, #556]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10d      	bne.n	8004c6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c52:	4b88      	ldr	r3, [pc, #544]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	4a87      	ldr	r2, [pc, #540]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5c:	61d3      	str	r3, [r2, #28]
 8004c5e:	4b85      	ldr	r3, [pc, #532]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c66:	60bb      	str	r3, [r7, #8]
 8004c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6e:	4b82      	ldr	r3, [pc, #520]	; (8004e78 <HAL_RCC_OscConfig+0x4c8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d118      	bne.n	8004cac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c7a:	4b7f      	ldr	r3, [pc, #508]	; (8004e78 <HAL_RCC_OscConfig+0x4c8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a7e      	ldr	r2, [pc, #504]	; (8004e78 <HAL_RCC_OscConfig+0x4c8>)
 8004c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c86:	f7fd fcb3 	bl	80025f0 <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c8e:	f7fd fcaf 	bl	80025f0 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b64      	cmp	r3, #100	; 0x64
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e103      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca0:	4b75      	ldr	r3, [pc, #468]	; (8004e78 <HAL_RCC_OscConfig+0x4c8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0f0      	beq.n	8004c8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d106      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x312>
 8004cb4:	4b6f      	ldr	r3, [pc, #444]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	4a6e      	ldr	r2, [pc, #440]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004cba:	f043 0301 	orr.w	r3, r3, #1
 8004cbe:	6213      	str	r3, [r2, #32]
 8004cc0:	e02d      	b.n	8004d1e <HAL_RCC_OscConfig+0x36e>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10c      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x334>
 8004cca:	4b6a      	ldr	r3, [pc, #424]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	4a69      	ldr	r2, [pc, #420]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004cd0:	f023 0301 	bic.w	r3, r3, #1
 8004cd4:	6213      	str	r3, [r2, #32]
 8004cd6:	4b67      	ldr	r3, [pc, #412]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	4a66      	ldr	r2, [pc, #408]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004cdc:	f023 0304 	bic.w	r3, r3, #4
 8004ce0:	6213      	str	r3, [r2, #32]
 8004ce2:	e01c      	b.n	8004d1e <HAL_RCC_OscConfig+0x36e>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	2b05      	cmp	r3, #5
 8004cea:	d10c      	bne.n	8004d06 <HAL_RCC_OscConfig+0x356>
 8004cec:	4b61      	ldr	r3, [pc, #388]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	4a60      	ldr	r2, [pc, #384]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004cf2:	f043 0304 	orr.w	r3, r3, #4
 8004cf6:	6213      	str	r3, [r2, #32]
 8004cf8:	4b5e      	ldr	r3, [pc, #376]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	4a5d      	ldr	r2, [pc, #372]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	6213      	str	r3, [r2, #32]
 8004d04:	e00b      	b.n	8004d1e <HAL_RCC_OscConfig+0x36e>
 8004d06:	4b5b      	ldr	r3, [pc, #364]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	4a5a      	ldr	r2, [pc, #360]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004d0c:	f023 0301 	bic.w	r3, r3, #1
 8004d10:	6213      	str	r3, [r2, #32]
 8004d12:	4b58      	ldr	r3, [pc, #352]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	4a57      	ldr	r2, [pc, #348]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004d18:	f023 0304 	bic.w	r3, r3, #4
 8004d1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d015      	beq.n	8004d52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d26:	f7fd fc63 	bl	80025f0 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d2c:	e00a      	b.n	8004d44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d2e:	f7fd fc5f 	bl	80025f0 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e0b1      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d44:	4b4b      	ldr	r3, [pc, #300]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0ee      	beq.n	8004d2e <HAL_RCC_OscConfig+0x37e>
 8004d50:	e014      	b.n	8004d7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d52:	f7fd fc4d 	bl	80025f0 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d58:	e00a      	b.n	8004d70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5a:	f7fd fc49 	bl	80025f0 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e09b      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d70:	4b40      	ldr	r3, [pc, #256]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1ee      	bne.n	8004d5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d7c:	7dfb      	ldrb	r3, [r7, #23]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d105      	bne.n	8004d8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d82:	4b3c      	ldr	r3, [pc, #240]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	4a3b      	ldr	r2, [pc, #236]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 8087 	beq.w	8004ea6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d98:	4b36      	ldr	r3, [pc, #216]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f003 030c 	and.w	r3, r3, #12
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d061      	beq.n	8004e68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d146      	bne.n	8004e3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dac:	4b33      	ldr	r3, [pc, #204]	; (8004e7c <HAL_RCC_OscConfig+0x4cc>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db2:	f7fd fc1d 	bl	80025f0 <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004db8:	e008      	b.n	8004dcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dba:	f7fd fc19 	bl	80025f0 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e06d      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dcc:	4b29      	ldr	r3, [pc, #164]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1f0      	bne.n	8004dba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de0:	d108      	bne.n	8004df4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004de2:	4b24      	ldr	r3, [pc, #144]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	4921      	ldr	r1, [pc, #132]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004df4:	4b1f      	ldr	r3, [pc, #124]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a19      	ldr	r1, [r3, #32]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	430b      	orrs	r3, r1
 8004e06:	491b      	ldr	r1, [pc, #108]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <HAL_RCC_OscConfig+0x4cc>)
 8004e0e:	2201      	movs	r2, #1
 8004e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e12:	f7fd fbed 	bl	80025f0 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e1a:	f7fd fbe9 	bl	80025f0 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e03d      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e2c:	4b11      	ldr	r3, [pc, #68]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x46a>
 8004e38:	e035      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e3a:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <HAL_RCC_OscConfig+0x4cc>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e40:	f7fd fbd6 	bl	80025f0 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e48:	f7fd fbd2 	bl	80025f0 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e026      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e5a:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x498>
 8004e66:	e01e      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d107      	bne.n	8004e80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e019      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
 8004e74:	40021000 	.word	0x40021000
 8004e78:	40007000 	.word	0x40007000
 8004e7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e80:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <HAL_RCC_OscConfig+0x500>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d106      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d001      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40021000 	.word	0x40021000

08004eb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e0d0      	b.n	800506a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ec8:	4b6a      	ldr	r3, [pc, #424]	; (8005074 <HAL_RCC_ClockConfig+0x1c0>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d910      	bls.n	8004ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed6:	4b67      	ldr	r3, [pc, #412]	; (8005074 <HAL_RCC_ClockConfig+0x1c0>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f023 0207 	bic.w	r2, r3, #7
 8004ede:	4965      	ldr	r1, [pc, #404]	; (8005074 <HAL_RCC_ClockConfig+0x1c0>)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee6:	4b63      	ldr	r3, [pc, #396]	; (8005074 <HAL_RCC_ClockConfig+0x1c0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0307 	and.w	r3, r3, #7
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d001      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e0b8      	b.n	800506a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d020      	beq.n	8004f46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f10:	4b59      	ldr	r3, [pc, #356]	; (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	4a58      	ldr	r2, [pc, #352]	; (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004f16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d005      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f28:	4b53      	ldr	r3, [pc, #332]	; (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	4a52      	ldr	r2, [pc, #328]	; (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f34:	4b50      	ldr	r3, [pc, #320]	; (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	494d      	ldr	r1, [pc, #308]	; (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d040      	beq.n	8004fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d107      	bne.n	8004f6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f5a:	4b47      	ldr	r3, [pc, #284]	; (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d115      	bne.n	8004f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e07f      	b.n	800506a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d107      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f72:	4b41      	ldr	r3, [pc, #260]	; (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d109      	bne.n	8004f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e073      	b.n	800506a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f82:	4b3d      	ldr	r3, [pc, #244]	; (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e06b      	b.n	800506a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f92:	4b39      	ldr	r3, [pc, #228]	; (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f023 0203 	bic.w	r2, r3, #3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	4936      	ldr	r1, [pc, #216]	; (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fa4:	f7fd fb24 	bl	80025f0 <HAL_GetTick>
 8004fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004faa:	e00a      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fac:	f7fd fb20 	bl	80025f0 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e053      	b.n	800506a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc2:	4b2d      	ldr	r3, [pc, #180]	; (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f003 020c 	and.w	r2, r3, #12
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d1eb      	bne.n	8004fac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fd4:	4b27      	ldr	r3, [pc, #156]	; (8005074 <HAL_RCC_ClockConfig+0x1c0>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d210      	bcs.n	8005004 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe2:	4b24      	ldr	r3, [pc, #144]	; (8005074 <HAL_RCC_ClockConfig+0x1c0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f023 0207 	bic.w	r2, r3, #7
 8004fea:	4922      	ldr	r1, [pc, #136]	; (8005074 <HAL_RCC_ClockConfig+0x1c0>)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff2:	4b20      	ldr	r3, [pc, #128]	; (8005074 <HAL_RCC_ClockConfig+0x1c0>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d001      	beq.n	8005004 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e032      	b.n	800506a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d008      	beq.n	8005022 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005010:	4b19      	ldr	r3, [pc, #100]	; (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	4916      	ldr	r1, [pc, #88]	; (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 800501e:	4313      	orrs	r3, r2
 8005020:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0308 	and.w	r3, r3, #8
 800502a:	2b00      	cmp	r3, #0
 800502c:	d009      	beq.n	8005042 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800502e:	4b12      	ldr	r3, [pc, #72]	; (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	490e      	ldr	r1, [pc, #56]	; (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 800503e:	4313      	orrs	r3, r2
 8005040:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005042:	f000 f821 	bl	8005088 <HAL_RCC_GetSysClockFreq>
 8005046:	4602      	mov	r2, r0
 8005048:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	091b      	lsrs	r3, r3, #4
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	490a      	ldr	r1, [pc, #40]	; (800507c <HAL_RCC_ClockConfig+0x1c8>)
 8005054:	5ccb      	ldrb	r3, [r1, r3]
 8005056:	fa22 f303 	lsr.w	r3, r2, r3
 800505a:	4a09      	ldr	r2, [pc, #36]	; (8005080 <HAL_RCC_ClockConfig+0x1cc>)
 800505c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800505e:	4b09      	ldr	r3, [pc, #36]	; (8005084 <HAL_RCC_ClockConfig+0x1d0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f7fd fa82 	bl	800256c <HAL_InitTick>

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40022000 	.word	0x40022000
 8005078:	40021000 	.word	0x40021000
 800507c:	080072c0 	.word	0x080072c0
 8005080:	20000004 	.word	0x20000004
 8005084:	20000008 	.word	0x20000008

08005088 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	2300      	movs	r3, #0
 8005094:	60bb      	str	r3, [r7, #8]
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	2300      	movs	r3, #0
 800509c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80050a2:	4b1e      	ldr	r3, [pc, #120]	; (800511c <HAL_RCC_GetSysClockFreq+0x94>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f003 030c 	and.w	r3, r3, #12
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d002      	beq.n	80050b8 <HAL_RCC_GetSysClockFreq+0x30>
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d003      	beq.n	80050be <HAL_RCC_GetSysClockFreq+0x36>
 80050b6:	e027      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050b8:	4b19      	ldr	r3, [pc, #100]	; (8005120 <HAL_RCC_GetSysClockFreq+0x98>)
 80050ba:	613b      	str	r3, [r7, #16]
      break;
 80050bc:	e027      	b.n	800510e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	0c9b      	lsrs	r3, r3, #18
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	4a17      	ldr	r2, [pc, #92]	; (8005124 <HAL_RCC_GetSysClockFreq+0x9c>)
 80050c8:	5cd3      	ldrb	r3, [r2, r3]
 80050ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d010      	beq.n	80050f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80050d6:	4b11      	ldr	r3, [pc, #68]	; (800511c <HAL_RCC_GetSysClockFreq+0x94>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	0c5b      	lsrs	r3, r3, #17
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	4a11      	ldr	r2, [pc, #68]	; (8005128 <HAL_RCC_GetSysClockFreq+0xa0>)
 80050e2:	5cd3      	ldrb	r3, [r2, r3]
 80050e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a0d      	ldr	r2, [pc, #52]	; (8005120 <HAL_RCC_GetSysClockFreq+0x98>)
 80050ea:	fb03 f202 	mul.w	r2, r3, r2
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	e004      	b.n	8005102 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a0c      	ldr	r2, [pc, #48]	; (800512c <HAL_RCC_GetSysClockFreq+0xa4>)
 80050fc:	fb02 f303 	mul.w	r3, r2, r3
 8005100:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	613b      	str	r3, [r7, #16]
      break;
 8005106:	e002      	b.n	800510e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005108:	4b05      	ldr	r3, [pc, #20]	; (8005120 <HAL_RCC_GetSysClockFreq+0x98>)
 800510a:	613b      	str	r3, [r7, #16]
      break;
 800510c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800510e:	693b      	ldr	r3, [r7, #16]
}
 8005110:	4618      	mov	r0, r3
 8005112:	371c      	adds	r7, #28
 8005114:	46bd      	mov	sp, r7
 8005116:	bc80      	pop	{r7}
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	40021000 	.word	0x40021000
 8005120:	007a1200 	.word	0x007a1200
 8005124:	080072d8 	.word	0x080072d8
 8005128:	080072e8 	.word	0x080072e8
 800512c:	003d0900 	.word	0x003d0900

08005130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005134:	4b02      	ldr	r3, [pc, #8]	; (8005140 <HAL_RCC_GetHCLKFreq+0x10>)
 8005136:	681b      	ldr	r3, [r3, #0]
}
 8005138:	4618      	mov	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr
 8005140:	20000004 	.word	0x20000004

08005144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005148:	f7ff fff2 	bl	8005130 <HAL_RCC_GetHCLKFreq>
 800514c:	4602      	mov	r2, r0
 800514e:	4b05      	ldr	r3, [pc, #20]	; (8005164 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	0a1b      	lsrs	r3, r3, #8
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	4903      	ldr	r1, [pc, #12]	; (8005168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800515a:	5ccb      	ldrb	r3, [r1, r3]
 800515c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005160:	4618      	mov	r0, r3
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40021000 	.word	0x40021000
 8005168:	080072d0 	.word	0x080072d0

0800516c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005170:	f7ff ffde 	bl	8005130 <HAL_RCC_GetHCLKFreq>
 8005174:	4602      	mov	r2, r0
 8005176:	4b05      	ldr	r3, [pc, #20]	; (800518c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	0adb      	lsrs	r3, r3, #11
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	4903      	ldr	r1, [pc, #12]	; (8005190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005182:	5ccb      	ldrb	r3, [r1, r3]
 8005184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005188:	4618      	mov	r0, r3
 800518a:	bd80      	pop	{r7, pc}
 800518c:	40021000 	.word	0x40021000
 8005190:	080072d0 	.word	0x080072d0

08005194 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800519c:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <RCC_Delay+0x34>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a0a      	ldr	r2, [pc, #40]	; (80051cc <RCC_Delay+0x38>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	0a5b      	lsrs	r3, r3, #9
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	fb02 f303 	mul.w	r3, r2, r3
 80051ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80051b0:	bf00      	nop
  }
  while (Delay --);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	1e5a      	subs	r2, r3, #1
 80051b6:	60fa      	str	r2, [r7, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f9      	bne.n	80051b0 <RCC_Delay+0x1c>
}
 80051bc:	bf00      	nop
 80051be:	bf00      	nop
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc80      	pop	{r7}
 80051c6:	4770      	bx	lr
 80051c8:	20000004 	.word	0x20000004
 80051cc:	10624dd3 	.word	0x10624dd3

080051d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d07d      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80051ec:	2300      	movs	r3, #0
 80051ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f0:	4b4f      	ldr	r3, [pc, #316]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10d      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051fc:	4b4c      	ldr	r3, [pc, #304]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	4a4b      	ldr	r2, [pc, #300]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005206:	61d3      	str	r3, [r2, #28]
 8005208:	4b49      	ldr	r3, [pc, #292]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005214:	2301      	movs	r3, #1
 8005216:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005218:	4b46      	ldr	r3, [pc, #280]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005220:	2b00      	cmp	r3, #0
 8005222:	d118      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005224:	4b43      	ldr	r3, [pc, #268]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a42      	ldr	r2, [pc, #264]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800522a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800522e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005230:	f7fd f9de 	bl	80025f0 <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005236:	e008      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005238:	f7fd f9da 	bl	80025f0 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b64      	cmp	r3, #100	; 0x64
 8005244:	d901      	bls.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e06d      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800524a:	4b3a      	ldr	r3, [pc, #232]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0f0      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005256:	4b36      	ldr	r3, [pc, #216]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800525e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d02e      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	429a      	cmp	r2, r3
 8005272:	d027      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005274:	4b2e      	ldr	r3, [pc, #184]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800527e:	4b2e      	ldr	r3, [pc, #184]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005280:	2201      	movs	r2, #1
 8005282:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005284:	4b2c      	ldr	r3, [pc, #176]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800528a:	4a29      	ldr	r2, [pc, #164]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d014      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529a:	f7fd f9a9 	bl	80025f0 <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a0:	e00a      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052a2:	f7fd f9a5 	bl	80025f0 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e036      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b8:	4b1d      	ldr	r3, [pc, #116]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0ee      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052c4:	4b1a      	ldr	r3, [pc, #104]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	4917      	ldr	r1, [pc, #92]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052d6:	7dfb      	ldrb	r3, [r7, #23]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d105      	bne.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052dc:	4b14      	ldr	r3, [pc, #80]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	4a13      	ldr	r2, [pc, #76]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d008      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052f4:	4b0e      	ldr	r3, [pc, #56]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	490b      	ldr	r1, [pc, #44]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005302:	4313      	orrs	r3, r2
 8005304:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0310 	and.w	r3, r3, #16
 800530e:	2b00      	cmp	r3, #0
 8005310:	d008      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005312:	4b07      	ldr	r3, [pc, #28]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	4904      	ldr	r1, [pc, #16]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005320:	4313      	orrs	r3, r2
 8005322:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	40021000 	.word	0x40021000
 8005334:	40007000 	.word	0x40007000
 8005338:	42420440 	.word	0x42420440

0800533c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	2300      	movs	r3, #0
 800534a:	61fb      	str	r3, [r7, #28]
 800534c:	2300      	movs	r3, #0
 800534e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	2300      	movs	r3, #0
 8005356:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b10      	cmp	r3, #16
 800535c:	d00a      	beq.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b10      	cmp	r3, #16
 8005362:	f200 808a 	bhi.w	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d045      	beq.n	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b02      	cmp	r3, #2
 8005370:	d075      	beq.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005372:	e082      	b.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005374:	4b46      	ldr	r3, [pc, #280]	; (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800537a:	4b45      	ldr	r3, [pc, #276]	; (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d07b      	beq.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	0c9b      	lsrs	r3, r3, #18
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	4a41      	ldr	r2, [pc, #260]	; (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005390:	5cd3      	ldrb	r3, [r2, r3]
 8005392:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d015      	beq.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800539e:	4b3c      	ldr	r3, [pc, #240]	; (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	0c5b      	lsrs	r3, r3, #17
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	4a3b      	ldr	r2, [pc, #236]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80053aa:	5cd3      	ldrb	r3, [r2, r3]
 80053ac:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00d      	beq.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80053b8:	4a38      	ldr	r2, [pc, #224]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	fb02 f303 	mul.w	r3, r2, r3
 80053c6:	61fb      	str	r3, [r7, #28]
 80053c8:	e004      	b.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	4a34      	ldr	r2, [pc, #208]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80053ce:	fb02 f303 	mul.w	r3, r2, r3
 80053d2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80053d4:	4b2e      	ldr	r3, [pc, #184]	; (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053e0:	d102      	bne.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	61bb      	str	r3, [r7, #24]
      break;
 80053e6:	e04a      	b.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	4a2d      	ldr	r2, [pc, #180]	; (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	085b      	lsrs	r3, r3, #1
 80053f4:	61bb      	str	r3, [r7, #24]
      break;
 80053f6:	e042      	b.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80053f8:	4b25      	ldr	r3, [pc, #148]	; (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005408:	d108      	bne.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005418:	61bb      	str	r3, [r7, #24]
 800541a:	e01f      	b.n	800545c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005426:	d109      	bne.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005428:	4b19      	ldr	r3, [pc, #100]	; (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005434:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005438:	61bb      	str	r3, [r7, #24]
 800543a:	e00f      	b.n	800545c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005446:	d11c      	bne.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005448:	4b11      	ldr	r3, [pc, #68]	; (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d016      	beq.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005454:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005458:	61bb      	str	r3, [r7, #24]
      break;
 800545a:	e012      	b.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800545c:	e011      	b.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800545e:	f7ff fe85 	bl	800516c <HAL_RCC_GetPCLK2Freq>
 8005462:	4602      	mov	r2, r0
 8005464:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	0b9b      	lsrs	r3, r3, #14
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	3301      	adds	r3, #1
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	fbb2 f3f3 	udiv	r3, r2, r3
 8005476:	61bb      	str	r3, [r7, #24]
      break;
 8005478:	e004      	b.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800547a:	bf00      	nop
 800547c:	e002      	b.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800547e:	bf00      	nop
 8005480:	e000      	b.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005482:	bf00      	nop
    }
  }
  return (frequency);
 8005484:	69bb      	ldr	r3, [r7, #24]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3720      	adds	r7, #32
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	40021000 	.word	0x40021000
 8005494:	080072ec 	.word	0x080072ec
 8005498:	080072fc 	.word	0x080072fc
 800549c:	007a1200 	.word	0x007a1200
 80054a0:	003d0900 	.word	0x003d0900
 80054a4:	aaaaaaab 	.word	0xaaaaaaab

080054a8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e07a      	b.n	80055b4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	7c5b      	ldrb	r3, [r3, #17]
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d105      	bne.n	80054d4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fc ff32 	bl	8002338 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fb78 	bl	8005bd0 <HAL_RTC_WaitForSynchro>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d004      	beq.n	80054f0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2204      	movs	r2, #4
 80054ea:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e061      	b.n	80055b4 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fc31 	bl	8005d58 <RTC_EnterInitMode>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d004      	beq.n	8005506 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2204      	movs	r2, #4
 8005500:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e056      	b.n	80055b4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0207 	bic.w	r2, r2, #7
 8005514:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d005      	beq.n	800552a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800551e:	4b27      	ldr	r3, [pc, #156]	; (80055bc <HAL_RTC_Init+0x114>)
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005522:	4a26      	ldr	r2, [pc, #152]	; (80055bc <HAL_RTC_Init+0x114>)
 8005524:	f023 0301 	bic.w	r3, r3, #1
 8005528:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800552a:	4b24      	ldr	r3, [pc, #144]	; (80055bc <HAL_RTC_Init+0x114>)
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	4921      	ldr	r1, [pc, #132]	; (80055bc <HAL_RTC_Init+0x114>)
 8005538:	4313      	orrs	r3, r2
 800553a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005544:	d003      	beq.n	800554e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	e00e      	b.n	800556c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800554e:	2001      	movs	r0, #1
 8005550:	f7ff fef4 	bl	800533c <HAL_RCCEx_GetPeriphCLKFreq>
 8005554:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d104      	bne.n	8005566 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2204      	movs	r2, #4
 8005560:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e026      	b.n	80055b4 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3b01      	subs	r3, #1
 800556a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	0c1a      	lsrs	r2, r3, #16
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f002 020f 	and.w	r2, r2, #15
 8005578:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	b292      	uxth	r2, r2
 8005582:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fc0f 	bl	8005da8 <RTC_ExitInitMode>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d004      	beq.n	800559a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2204      	movs	r2, #4
 8005594:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e00c      	b.n	80055b4 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80055b2:	2300      	movs	r3, #0
  }
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40006c00 	.word	0x40006c00

080055c0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80055c0:	b590      	push	{r4, r7, lr}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	2300      	movs	r3, #0
 80055d2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_RTC_SetTime+0x20>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e080      	b.n	80056e6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	7c1b      	ldrb	r3, [r3, #16]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_RTC_SetTime+0x30>
 80055ec:	2302      	movs	r3, #2
 80055ee:	e07a      	b.n	80056e6 <HAL_RTC_SetTime+0x126>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2201      	movs	r2, #1
 80055f4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2202      	movs	r2, #2
 80055fa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d113      	bne.n	800562a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800560c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	785b      	ldrb	r3, [r3, #1]
 8005614:	4619      	mov	r1, r3
 8005616:	460b      	mov	r3, r1
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	1a5b      	subs	r3, r3, r1
 800561c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800561e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005624:	4413      	add	r3, r2
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	e01e      	b.n	8005668 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fbff 	bl	8005e32 <RTC_Bcd2ToByte>
 8005634:	4603      	mov	r3, r0
 8005636:	461a      	mov	r2, r3
 8005638:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800563c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	785b      	ldrb	r3, [r3, #1]
 8005644:	4618      	mov	r0, r3
 8005646:	f000 fbf4 	bl	8005e32 <RTC_Bcd2ToByte>
 800564a:	4603      	mov	r3, r0
 800564c:	461a      	mov	r2, r3
 800564e:	4613      	mov	r3, r2
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	1a9b      	subs	r3, r3, r2
 8005654:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005656:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	789b      	ldrb	r3, [r3, #2]
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fbe8 	bl	8005e32 <RTC_Bcd2ToByte>
 8005662:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005664:	4423      	add	r3, r4
 8005666:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005668:	6979      	ldr	r1, [r7, #20]
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 fb0d 	bl	8005c8a <RTC_WriteTimeCounter>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d007      	beq.n	8005686 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2204      	movs	r2, #4
 800567a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e02f      	b.n	80056e6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0205 	bic.w	r2, r2, #5
 8005694:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 fb1e 	bl	8005cd8 <RTC_ReadAlarmCounter>
 800569c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a4:	d018      	beq.n	80056d8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d214      	bcs.n	80056d8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80056b4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80056b8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80056ba:	6939      	ldr	r1, [r7, #16]
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 fb24 	bl	8005d0a <RTC_WriteAlarmCounter>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d007      	beq.n	80056d8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2204      	movs	r2, #4
 80056cc:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e006      	b.n	80056e6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80056e4:	2300      	movs	r3, #0
  }
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd90      	pop	{r4, r7, pc}
	...

080056f0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	61bb      	str	r3, [r7, #24]
 8005700:	2300      	movs	r3, #0
 8005702:	61fb      	str	r3, [r7, #28]
 8005704:	2300      	movs	r3, #0
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	2300      	movs	r3, #0
 800570a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <HAL_RTC_GetTime+0x28>
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0b5      	b.n	8005888 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e0ac      	b.n	8005888 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 fa7b 	bl	8005c2a <RTC_ReadTimeCounter>
 8005734:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	4a55      	ldr	r2, [pc, #340]	; (8005890 <HAL_RTC_GetTime+0x1a0>)
 800573a:	fba2 2303 	umull	r2, r3, r2, r3
 800573e:	0adb      	lsrs	r3, r3, #11
 8005740:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	4b52      	ldr	r3, [pc, #328]	; (8005890 <HAL_RTC_GetTime+0x1a0>)
 8005746:	fba3 1302 	umull	r1, r3, r3, r2
 800574a:	0adb      	lsrs	r3, r3, #11
 800574c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005750:	fb01 f303 	mul.w	r3, r1, r3
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	4a4f      	ldr	r2, [pc, #316]	; (8005894 <HAL_RTC_GetTime+0x1a4>)
 8005758:	fba2 2303 	umull	r2, r3, r2, r3
 800575c:	095b      	lsrs	r3, r3, #5
 800575e:	b2da      	uxtb	r2, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	4a4a      	ldr	r2, [pc, #296]	; (8005890 <HAL_RTC_GetTime+0x1a0>)
 8005768:	fba2 1203 	umull	r1, r2, r2, r3
 800576c:	0ad2      	lsrs	r2, r2, #11
 800576e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005772:	fb01 f202 	mul.w	r2, r1, r2
 8005776:	1a9a      	subs	r2, r3, r2
 8005778:	4b46      	ldr	r3, [pc, #280]	; (8005894 <HAL_RTC_GetTime+0x1a4>)
 800577a:	fba3 1302 	umull	r1, r3, r3, r2
 800577e:	0959      	lsrs	r1, r3, #5
 8005780:	460b      	mov	r3, r1
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	1a5b      	subs	r3, r3, r1
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	1ad1      	subs	r1, r2, r3
 800578a:	b2ca      	uxtb	r2, r1
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	2b17      	cmp	r3, #23
 8005794:	d955      	bls.n	8005842 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	4a3f      	ldr	r2, [pc, #252]	; (8005898 <HAL_RTC_GetTime+0x1a8>)
 800579a:	fba2 2303 	umull	r2, r3, r2, r3
 800579e:	091b      	lsrs	r3, r3, #4
 80057a0:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80057a2:	6939      	ldr	r1, [r7, #16]
 80057a4:	4b3c      	ldr	r3, [pc, #240]	; (8005898 <HAL_RTC_GetTime+0x1a8>)
 80057a6:	fba3 2301 	umull	r2, r3, r3, r1
 80057aa:	091a      	lsrs	r2, r3, #4
 80057ac:	4613      	mov	r3, r2
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	4413      	add	r3, r2
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	1aca      	subs	r2, r1, r3
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 fa8b 	bl	8005cd8 <RTC_ReadAlarmCounter>
 80057c2:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ca:	d008      	beq.n	80057de <HAL_RTC_GetTime+0xee>
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d904      	bls.n	80057de <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	61fb      	str	r3, [r7, #28]
 80057dc:	e002      	b.n	80057e4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80057de:	f04f 33ff 	mov.w	r3, #4294967295
 80057e2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	4a2d      	ldr	r2, [pc, #180]	; (800589c <HAL_RTC_GetTime+0x1ac>)
 80057e8:	fb02 f303 	mul.w	r3, r2, r3
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80057f2:	69b9      	ldr	r1, [r7, #24]
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 fa48 	bl	8005c8a <RTC_WriteTimeCounter>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e041      	b.n	8005888 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580a:	d00c      	beq.n	8005826 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	4413      	add	r3, r2
 8005812:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005814:	69f9      	ldr	r1, [r7, #28]
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 fa77 	bl	8005d0a <RTC_WriteAlarmCounter>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e030      	b.n	8005888 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005826:	69f9      	ldr	r1, [r7, #28]
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 fa6e 	bl	8005d0a <RTC_WriteAlarmCounter>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e027      	b.n	8005888 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005838:	6979      	ldr	r1, [r7, #20]
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 fb16 	bl	8005e6c <RTC_DateUpdate>
 8005840:	e003      	b.n	800584a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	b2da      	uxtb	r2, r3
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01a      	beq.n	8005886 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	f000 facf 	bl	8005df8 <RTC_ByteToBcd2>
 800585a:	4603      	mov	r3, r0
 800585c:	461a      	mov	r2, r3
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	785b      	ldrb	r3, [r3, #1]
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fac6 	bl	8005df8 <RTC_ByteToBcd2>
 800586c:	4603      	mov	r3, r0
 800586e:	461a      	mov	r2, r3
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	789b      	ldrb	r3, [r3, #2]
 8005878:	4618      	mov	r0, r3
 800587a:	f000 fabd 	bl	8005df8 <RTC_ByteToBcd2>
 800587e:	4603      	mov	r3, r0
 8005880:	461a      	mov	r2, r3
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3720      	adds	r7, #32
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	91a2b3c5 	.word	0x91a2b3c5
 8005894:	88888889 	.word	0x88888889
 8005898:	aaaaaaab 	.word	0xaaaaaaab
 800589c:	00015180 	.word	0x00015180

080058a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b088      	sub	sp, #32
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	61fb      	str	r3, [r7, #28]
 80058b0:	2300      	movs	r3, #0
 80058b2:	61bb      	str	r3, [r7, #24]
 80058b4:	2300      	movs	r3, #0
 80058b6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <HAL_RTC_SetDate+0x24>
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e097      	b.n	80059f8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	7c1b      	ldrb	r3, [r3, #16]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_RTC_SetDate+0x34>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e091      	b.n	80059f8 <HAL_RTC_SetDate+0x158>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2202      	movs	r2, #2
 80058de:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10c      	bne.n	8005900 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	78da      	ldrb	r2, [r3, #3]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	785a      	ldrb	r2, [r3, #1]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	789a      	ldrb	r2, [r3, #2]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	739a      	strb	r2, [r3, #14]
 80058fe:	e01a      	b.n	8005936 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	78db      	ldrb	r3, [r3, #3]
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fa94 	bl	8005e32 <RTC_Bcd2ToByte>
 800590a:	4603      	mov	r3, r0
 800590c:	461a      	mov	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	785b      	ldrb	r3, [r3, #1]
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fa8b 	bl	8005e32 <RTC_Bcd2ToByte>
 800591c:	4603      	mov	r3, r0
 800591e:	461a      	mov	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	789b      	ldrb	r3, [r3, #2]
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fa82 	bl	8005e32 <RTC_Bcd2ToByte>
 800592e:	4603      	mov	r3, r0
 8005930:	461a      	mov	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	7bdb      	ldrb	r3, [r3, #15]
 800593a:	4618      	mov	r0, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	7b59      	ldrb	r1, [r3, #13]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	7b9b      	ldrb	r3, [r3, #14]
 8005944:	461a      	mov	r2, r3
 8005946:	f000 fb6d 	bl	8006024 <RTC_WeekDayNum>
 800594a:	4603      	mov	r3, r0
 800594c:	461a      	mov	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	7b1a      	ldrb	r2, [r3, #12]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 f965 	bl	8005c2a <RTC_ReadTimeCounter>
 8005960:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	4a26      	ldr	r2, [pc, #152]	; (8005a00 <HAL_RTC_SetDate+0x160>)
 8005966:	fba2 2303 	umull	r2, r3, r2, r3
 800596a:	0adb      	lsrs	r3, r3, #11
 800596c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b18      	cmp	r3, #24
 8005972:	d93a      	bls.n	80059ea <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	4a23      	ldr	r2, [pc, #140]	; (8005a04 <HAL_RTC_SetDate+0x164>)
 8005978:	fba2 2303 	umull	r2, r3, r2, r3
 800597c:	091b      	lsrs	r3, r3, #4
 800597e:	4a22      	ldr	r2, [pc, #136]	; (8005a08 <HAL_RTC_SetDate+0x168>)
 8005980:	fb02 f303 	mul.w	r3, r2, r3
 8005984:	69fa      	ldr	r2, [r7, #28]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800598a:	69f9      	ldr	r1, [r7, #28]
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 f97c 	bl	8005c8a <RTC_WriteTimeCounter>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d007      	beq.n	80059a8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2204      	movs	r2, #4
 800599c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e027      	b.n	80059f8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f995 	bl	8005cd8 <RTC_ReadAlarmCounter>
 80059ae:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b6:	d018      	beq.n	80059ea <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d214      	bcs.n	80059ea <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80059c6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80059ca:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80059cc:	69b9      	ldr	r1, [r7, #24]
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 f99b 	bl	8005d0a <RTC_WriteAlarmCounter>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d007      	beq.n	80059ea <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2204      	movs	r2, #4
 80059de:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e006      	b.n	80059f8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2201      	movs	r2, #1
 80059ee:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3720      	adds	r7, #32
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	91a2b3c5 	.word	0x91a2b3c5
 8005a04:	aaaaaaab 	.word	0xaaaaaaab
 8005a08:	00015180 	.word	0x00015180

08005a0c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005a0c:	b590      	push	{r4, r7, lr}
 8005a0e:	b089      	sub	sp, #36	; 0x24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8005a1c:	f107 0314 	add.w	r3, r7, #20
 8005a20:	2100      	movs	r1, #0
 8005a22:	460a      	mov	r2, r1
 8005a24:	801a      	strh	r2, [r3, #0]
 8005a26:	460a      	mov	r2, r1
 8005a28:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <HAL_RTC_SetAlarm_IT+0x2a>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e099      	b.n	8005b6e <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	7c1b      	ldrb	r3, [r3, #16]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_RTC_SetAlarm_IT+0x3a>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e093      	b.n	8005b6e <HAL_RTC_SetAlarm_IT+0x162>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8005a52:	f107 0314 	add.w	r3, r7, #20
 8005a56:	2200      	movs	r2, #0
 8005a58:	4619      	mov	r1, r3
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f7ff fe48 	bl	80056f0 <HAL_RTC_GetTime>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e081      	b.n	8005b6e <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005a6a:	7d3b      	ldrb	r3, [r7, #20]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005a72:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8005a76:	7d7b      	ldrb	r3, [r7, #21]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	1a5b      	subs	r3, r3, r1
 8005a80:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005a82:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8005a84:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005a86:	4413      	add	r3, r2
 8005a88:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d113      	bne.n	8005ab8 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	461a      	mov	r2, r3
 8005a96:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005a9a:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	785b      	ldrb	r3, [r3, #1]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	1a5b      	subs	r3, r3, r1
 8005aaa:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005aac:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005ab2:	4413      	add	r3, r2
 8005ab4:	61fb      	str	r3, [r7, #28]
 8005ab6:	e01e      	b.n	8005af6 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 f9b8 	bl	8005e32 <RTC_Bcd2ToByte>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005aca:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	785b      	ldrb	r3, [r3, #1]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 f9ad 	bl	8005e32 <RTC_Bcd2ToByte>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	461a      	mov	r2, r3
 8005adc:	4613      	mov	r3, r2
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	1a9b      	subs	r3, r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005ae4:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	789b      	ldrb	r3, [r3, #2]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 f9a1 	bl	8005e32 <RTC_Bcd2ToByte>
 8005af0:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005af2:	4423      	add	r3, r4
 8005af4:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d205      	bcs.n	8005b0a <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005b04:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005b08:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005b0a:	69f9      	ldr	r1, [r7, #28]
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 f8fc 	bl	8005d0a <RTC_WriteAlarmCounter>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d007      	beq.n	8005b28 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2204      	movs	r2, #4
 8005b1c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e022      	b.n	8005b6e <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0202 	bic.w	r2, r2, #2
 8005b36:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0202 	orr.w	r2, r2, #2
 8005b46:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005b48:	4b0b      	ldr	r3, [pc, #44]	; (8005b78 <HAL_RTC_SetAlarm_IT+0x16c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a0a      	ldr	r2, [pc, #40]	; (8005b78 <HAL_RTC_SetAlarm_IT+0x16c>)
 8005b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b52:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005b54:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <HAL_RTC_SetAlarm_IT+0x16c>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	4a07      	ldr	r2, [pc, #28]	; (8005b78 <HAL_RTC_SetAlarm_IT+0x16c>)
 8005b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b5e:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2201      	movs	r2, #1
 8005b64:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
  }
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3724      	adds	r7, #36	; 0x24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd90      	pop	{r4, r7, pc}
 8005b76:	bf00      	nop
 8005b78:	40010400 	.word	0x40010400

08005b7c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d011      	beq.n	8005bb6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00a      	beq.n	8005bb6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7fc fa63 	bl	800206c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 0202 	bic.w	r2, r2, #2
 8005bb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005bb6:	4b05      	ldr	r3, [pc, #20]	; (8005bcc <HAL_RTC_AlarmIRQHandler+0x50>)
 8005bb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005bbc:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	745a      	strb	r2, [r3, #17]
}
 8005bc4:	bf00      	nop
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	40010400 	.word	0x40010400

08005bd0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e01d      	b.n	8005c22 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0208 	bic.w	r2, r2, #8
 8005bf4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005bf6:	f7fc fcfb 	bl	80025f0 <HAL_GetTick>
 8005bfa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005bfc:	e009      	b.n	8005c12 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005bfe:	f7fc fcf7 	bl	80025f0 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c0c:	d901      	bls.n	8005c12 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e007      	b.n	8005c22 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f003 0308 	and.w	r3, r3, #8
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0ee      	beq.n	8005bfe <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b087      	sub	sp, #28
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	827b      	strh	r3, [r7, #18]
 8005c36:	2300      	movs	r3, #0
 8005c38:	823b      	strh	r3, [r7, #16]
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005c5a:	8a7a      	ldrh	r2, [r7, #18]
 8005c5c:	8a3b      	ldrh	r3, [r7, #16]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d008      	beq.n	8005c74 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005c62:	8a3b      	ldrh	r3, [r7, #16]
 8005c64:	041a      	lsls	r2, r3, #16
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	e004      	b.n	8005c7e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005c74:	8a7b      	ldrh	r3, [r7, #18]
 8005c76:	041a      	lsls	r2, r3, #16
 8005c78:	89fb      	ldrh	r3, [r7, #14]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005c7e:	697b      	ldr	r3, [r7, #20]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bc80      	pop	{r7}
 8005c88:	4770      	bx	lr

08005c8a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b084      	sub	sp, #16
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c94:	2300      	movs	r3, #0
 8005c96:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f85d 	bl	8005d58 <RTC_EnterInitMode>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	73fb      	strb	r3, [r7, #15]
 8005ca8:	e011      	b.n	8005cce <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	0c12      	lsrs	r2, r2, #16
 8005cb2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	b292      	uxth	r2, r2
 8005cbc:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f872 	bl	8005da8 <RTC_ExitInitMode>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	81fb      	strh	r3, [r7, #14]
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005cf8:	89fb      	ldrh	r3, [r7, #14]
 8005cfa:	041a      	lsls	r2, r3, #16
 8005cfc:	89bb      	ldrh	r3, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bc80      	pop	{r7}
 8005d08:	4770      	bx	lr

08005d0a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d14:	2300      	movs	r3, #0
 8005d16:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f81d 	bl	8005d58 <RTC_EnterInitMode>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	73fb      	strb	r3, [r7, #15]
 8005d28:	e011      	b.n	8005d4e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	0c12      	lsrs	r2, r2, #16
 8005d32:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	b292      	uxth	r2, r2
 8005d3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f832 	bl	8005da8 <RTC_ExitInitMode>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005d64:	f7fc fc44 	bl	80025f0 <HAL_GetTick>
 8005d68:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005d6a:	e009      	b.n	8005d80 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005d6c:	f7fc fc40 	bl	80025f0 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d7a:	d901      	bls.n	8005d80 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e00f      	b.n	8005da0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f003 0320 	and.w	r3, r3, #32
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0ee      	beq.n	8005d6c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f042 0210 	orr.w	r2, r2, #16
 8005d9c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0210 	bic.w	r2, r2, #16
 8005dc2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005dc4:	f7fc fc14 	bl	80025f0 <HAL_GetTick>
 8005dc8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005dca:	e009      	b.n	8005de0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005dcc:	f7fc fc10 	bl	80025f0 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dda:	d901      	bls.n	8005de0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e007      	b.n	8005df0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f003 0320 	and.w	r3, r3, #32
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0ee      	beq.n	8005dcc <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	4603      	mov	r3, r0
 8005e00:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005e06:	e005      	b.n	8005e14 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005e0e:	79fb      	ldrb	r3, [r7, #7]
 8005e10:	3b0a      	subs	r3, #10
 8005e12:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005e14:	79fb      	ldrb	r3, [r7, #7]
 8005e16:	2b09      	cmp	r3, #9
 8005e18:	d8f6      	bhi.n	8005e08 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	79fb      	ldrb	r3, [r7, #7]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	b2db      	uxtb	r3, r3
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bc80      	pop	{r7}
 8005e30:	4770      	bx	lr

08005e32 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b085      	sub	sp, #20
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	4603      	mov	r3, r0
 8005e3a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005e40:	79fb      	ldrb	r3, [r7, #7]
 8005e42:	091b      	lsrs	r3, r3, #4
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	461a      	mov	r2, r3
 8005e48:	4613      	mov	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005e52:	79fb      	ldrb	r3, [r7, #7]
 8005e54:	f003 030f 	and.w	r3, r3, #15
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	4413      	add	r3, r2
 8005e60:	b2db      	uxtb	r3, r3
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bc80      	pop	{r7}
 8005e6a:	4770      	bx	lr

08005e6c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	613b      	str	r3, [r7, #16]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	7bdb      	ldrb	r3, [r3, #15]
 8005e8a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	7b5b      	ldrb	r3, [r3, #13]
 8005e90:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	7b9b      	ldrb	r3, [r3, #14]
 8005e96:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005e98:	2300      	movs	r3, #0
 8005e9a:	60bb      	str	r3, [r7, #8]
 8005e9c:	e06f      	b.n	8005f7e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d011      	beq.n	8005ec8 <RTC_DateUpdate+0x5c>
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	2b03      	cmp	r3, #3
 8005ea8:	d00e      	beq.n	8005ec8 <RTC_DateUpdate+0x5c>
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b05      	cmp	r3, #5
 8005eae:	d00b      	beq.n	8005ec8 <RTC_DateUpdate+0x5c>
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	2b07      	cmp	r3, #7
 8005eb4:	d008      	beq.n	8005ec8 <RTC_DateUpdate+0x5c>
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d005      	beq.n	8005ec8 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	2b0a      	cmp	r3, #10
 8005ec0:	d002      	beq.n	8005ec8 <RTC_DateUpdate+0x5c>
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	2b0c      	cmp	r3, #12
 8005ec6:	d117      	bne.n	8005ef8 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b1e      	cmp	r3, #30
 8005ecc:	d803      	bhi.n	8005ed6 <RTC_DateUpdate+0x6a>
      {
        day++;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005ed4:	e050      	b.n	8005f78 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	2b0c      	cmp	r3, #12
 8005eda:	d005      	beq.n	8005ee8 <RTC_DateUpdate+0x7c>
        {
          month++;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005ee6:	e047      	b.n	8005f78 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005eec:	2301      	movs	r3, #1
 8005eee:	60fb      	str	r3, [r7, #12]
          year++;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005ef6:	e03f      	b.n	8005f78 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d008      	beq.n	8005f10 <RTC_DateUpdate+0xa4>
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2b06      	cmp	r3, #6
 8005f02:	d005      	beq.n	8005f10 <RTC_DateUpdate+0xa4>
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	2b09      	cmp	r3, #9
 8005f08:	d002      	beq.n	8005f10 <RTC_DateUpdate+0xa4>
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	2b0b      	cmp	r3, #11
 8005f0e:	d10c      	bne.n	8005f2a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b1d      	cmp	r3, #29
 8005f14:	d803      	bhi.n	8005f1e <RTC_DateUpdate+0xb2>
      {
        day++;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005f1c:	e02c      	b.n	8005f78 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	3301      	adds	r3, #1
 8005f22:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005f24:	2301      	movs	r3, #1
 8005f26:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005f28:	e026      	b.n	8005f78 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d123      	bne.n	8005f78 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b1b      	cmp	r3, #27
 8005f34:	d803      	bhi.n	8005f3e <RTC_DateUpdate+0xd2>
      {
        day++;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	e01c      	b.n	8005f78 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2b1c      	cmp	r3, #28
 8005f42:	d111      	bne.n	8005f68 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 f839 	bl	8005fc0 <RTC_IsLeapYear>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <RTC_DateUpdate+0xf0>
        {
          day++;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3301      	adds	r3, #1
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	e00d      	b.n	8005f78 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005f62:	2301      	movs	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	e007      	b.n	8005f78 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2b1d      	cmp	r3, #29
 8005f6c:	d104      	bne.n	8005f78 <RTC_DateUpdate+0x10c>
      {
        month++;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	3301      	adds	r3, #1
 8005f72:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005f74:	2301      	movs	r3, #1
 8005f76:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	60bb      	str	r3, [r7, #8]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d38b      	bcc.n	8005e9e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	6978      	ldr	r0, [r7, #20]
 8005faa:	f000 f83b 	bl	8006024 <RTC_WeekDayNum>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	731a      	strb	r2, [r3, #12]
}
 8005fb6:	bf00      	nop
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
	...

08005fc0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005fca:	88fb      	ldrh	r3, [r7, #6]
 8005fcc:	f003 0303 	and.w	r3, r3, #3
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e01d      	b.n	8006016 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005fda:	88fb      	ldrh	r3, [r7, #6]
 8005fdc:	4a10      	ldr	r2, [pc, #64]	; (8006020 <RTC_IsLeapYear+0x60>)
 8005fde:	fba2 1203 	umull	r1, r2, r2, r3
 8005fe2:	0952      	lsrs	r2, r2, #5
 8005fe4:	2164      	movs	r1, #100	; 0x64
 8005fe6:	fb01 f202 	mul.w	r2, r1, r2
 8005fea:	1a9b      	subs	r3, r3, r2
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e00f      	b.n	8006016 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005ff6:	88fb      	ldrh	r3, [r7, #6]
 8005ff8:	4a09      	ldr	r2, [pc, #36]	; (8006020 <RTC_IsLeapYear+0x60>)
 8005ffa:	fba2 1203 	umull	r1, r2, r2, r3
 8005ffe:	09d2      	lsrs	r2, r2, #7
 8006000:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006004:	fb01 f202 	mul.w	r2, r1, r2
 8006008:	1a9b      	subs	r3, r3, r2
 800600a:	b29b      	uxth	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8006010:	2301      	movs	r3, #1
 8006012:	e000      	b.n	8006016 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8006014:	2300      	movs	r3, #0
  }
}
 8006016:	4618      	mov	r0, r3
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr
 8006020:	51eb851f 	.word	0x51eb851f

08006024 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	460b      	mov	r3, r1
 800602e:	70fb      	strb	r3, [r7, #3]
 8006030:	4613      	mov	r3, r2
 8006032:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	60bb      	str	r3, [r7, #8]
 8006038:	2300      	movs	r3, #0
 800603a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006042:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006044:	78fb      	ldrb	r3, [r7, #3]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d82d      	bhi.n	80060a6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800604a:	78fa      	ldrb	r2, [r7, #3]
 800604c:	4613      	mov	r3, r2
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	4413      	add	r3, r2
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	1a9b      	subs	r3, r3, r2
 8006056:	4a2c      	ldr	r2, [pc, #176]	; (8006108 <RTC_WeekDayNum+0xe4>)
 8006058:	fba2 2303 	umull	r2, r3, r2, r3
 800605c:	085a      	lsrs	r2, r3, #1
 800605e:	78bb      	ldrb	r3, [r7, #2]
 8006060:	441a      	add	r2, r3
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	441a      	add	r2, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	3b01      	subs	r3, #1
 800606a:	089b      	lsrs	r3, r3, #2
 800606c:	441a      	add	r2, r3
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	3b01      	subs	r3, #1
 8006072:	4926      	ldr	r1, [pc, #152]	; (800610c <RTC_WeekDayNum+0xe8>)
 8006074:	fba1 1303 	umull	r1, r3, r1, r3
 8006078:	095b      	lsrs	r3, r3, #5
 800607a:	1ad2      	subs	r2, r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	3b01      	subs	r3, #1
 8006080:	4922      	ldr	r1, [pc, #136]	; (800610c <RTC_WeekDayNum+0xe8>)
 8006082:	fba1 1303 	umull	r1, r3, r1, r3
 8006086:	09db      	lsrs	r3, r3, #7
 8006088:	4413      	add	r3, r2
 800608a:	1d1a      	adds	r2, r3, #4
 800608c:	4b20      	ldr	r3, [pc, #128]	; (8006110 <RTC_WeekDayNum+0xec>)
 800608e:	fba3 1302 	umull	r1, r3, r3, r2
 8006092:	1ad1      	subs	r1, r2, r3
 8006094:	0849      	lsrs	r1, r1, #1
 8006096:	440b      	add	r3, r1
 8006098:	0899      	lsrs	r1, r3, #2
 800609a:	460b      	mov	r3, r1
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	1a5b      	subs	r3, r3, r1
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	e029      	b.n	80060fa <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80060a6:	78fa      	ldrb	r2, [r7, #3]
 80060a8:	4613      	mov	r3, r2
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	4413      	add	r3, r2
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	1a9b      	subs	r3, r3, r2
 80060b2:	4a15      	ldr	r2, [pc, #84]	; (8006108 <RTC_WeekDayNum+0xe4>)
 80060b4:	fba2 2303 	umull	r2, r3, r2, r3
 80060b8:	085a      	lsrs	r2, r3, #1
 80060ba:	78bb      	ldrb	r3, [r7, #2]
 80060bc:	441a      	add	r2, r3
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	441a      	add	r2, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	089b      	lsrs	r3, r3, #2
 80060c6:	441a      	add	r2, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4910      	ldr	r1, [pc, #64]	; (800610c <RTC_WeekDayNum+0xe8>)
 80060cc:	fba1 1303 	umull	r1, r3, r1, r3
 80060d0:	095b      	lsrs	r3, r3, #5
 80060d2:	1ad2      	subs	r2, r2, r3
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	490d      	ldr	r1, [pc, #52]	; (800610c <RTC_WeekDayNum+0xe8>)
 80060d8:	fba1 1303 	umull	r1, r3, r1, r3
 80060dc:	09db      	lsrs	r3, r3, #7
 80060de:	4413      	add	r3, r2
 80060e0:	1c9a      	adds	r2, r3, #2
 80060e2:	4b0b      	ldr	r3, [pc, #44]	; (8006110 <RTC_WeekDayNum+0xec>)
 80060e4:	fba3 1302 	umull	r1, r3, r3, r2
 80060e8:	1ad1      	subs	r1, r2, r3
 80060ea:	0849      	lsrs	r1, r1, #1
 80060ec:	440b      	add	r3, r1
 80060ee:	0899      	lsrs	r1, r3, #2
 80060f0:	460b      	mov	r3, r1
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	1a5b      	subs	r3, r3, r1
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	b2db      	uxtb	r3, r3
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	bc80      	pop	{r7}
 8006106:	4770      	bx	lr
 8006108:	38e38e39 	.word	0x38e38e39
 800610c:	51eb851f 	.word	0x51eb851f
 8006110:	24924925 	.word	0x24924925

08006114 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e076      	b.n	8006214 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	2b00      	cmp	r3, #0
 800612c:	d108      	bne.n	8006140 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006136:	d009      	beq.n	800614c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	61da      	str	r2, [r3, #28]
 800613e:	e005      	b.n	800614c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fc f912 	bl	8002390 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006182:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006194:	431a      	orrs	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	431a      	orrs	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061bc:	431a      	orrs	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d0:	ea42 0103 	orr.w	r1, r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	0c1a      	lsrs	r2, r3, #16
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f002 0204 	and.w	r2, r2, #4
 80061f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	69da      	ldr	r2, [r3, #28]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006202:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	603b      	str	r3, [r7, #0]
 8006228:	4613      	mov	r3, r2
 800622a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800622c:	f7fc f9e0 	bl	80025f0 <HAL_GetTick>
 8006230:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006232:	88fb      	ldrh	r3, [r7, #6]
 8006234:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b01      	cmp	r3, #1
 8006240:	d001      	beq.n	8006246 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006242:	2302      	movs	r3, #2
 8006244:	e12a      	b.n	800649c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <HAL_SPI_Transmit+0x36>
 800624c:	88fb      	ldrh	r3, [r7, #6]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e122      	b.n	800649c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_SPI_Transmit+0x48>
 8006260:	2302      	movs	r3, #2
 8006262:	e11b      	b.n	800649c <HAL_SPI_Transmit+0x280>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2203      	movs	r2, #3
 8006270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	88fa      	ldrh	r2, [r7, #6]
 8006284:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	88fa      	ldrh	r2, [r7, #6]
 800628a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b2:	d10f      	bne.n	80062d4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062de:	2b40      	cmp	r3, #64	; 0x40
 80062e0:	d007      	beq.n	80062f2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062fa:	d152      	bne.n	80063a2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <HAL_SPI_Transmit+0xee>
 8006304:	8b7b      	ldrh	r3, [r7, #26]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d145      	bne.n	8006396 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	881a      	ldrh	r2, [r3, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631a:	1c9a      	adds	r2, r3, #2
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006324:	b29b      	uxth	r3, r3
 8006326:	3b01      	subs	r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800632e:	e032      	b.n	8006396 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b02      	cmp	r3, #2
 800633c:	d112      	bne.n	8006364 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006342:	881a      	ldrh	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634e:	1c9a      	adds	r2, r3, #2
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006358:	b29b      	uxth	r3, r3
 800635a:	3b01      	subs	r3, #1
 800635c:	b29a      	uxth	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	86da      	strh	r2, [r3, #54]	; 0x36
 8006362:	e018      	b.n	8006396 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006364:	f7fc f944 	bl	80025f0 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	429a      	cmp	r2, r3
 8006372:	d803      	bhi.n	800637c <HAL_SPI_Transmit+0x160>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637a:	d102      	bne.n	8006382 <HAL_SPI_Transmit+0x166>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d109      	bne.n	8006396 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e082      	b.n	800649c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800639a:	b29b      	uxth	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1c7      	bne.n	8006330 <HAL_SPI_Transmit+0x114>
 80063a0:	e053      	b.n	800644a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <HAL_SPI_Transmit+0x194>
 80063aa:	8b7b      	ldrh	r3, [r7, #26]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d147      	bne.n	8006440 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	330c      	adds	r3, #12
 80063ba:	7812      	ldrb	r2, [r2, #0]
 80063bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	3b01      	subs	r3, #1
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80063d6:	e033      	b.n	8006440 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d113      	bne.n	800640e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	330c      	adds	r3, #12
 80063f0:	7812      	ldrb	r2, [r2, #0]
 80063f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006402:	b29b      	uxth	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	86da      	strh	r2, [r3, #54]	; 0x36
 800640c:	e018      	b.n	8006440 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800640e:	f7fc f8ef 	bl	80025f0 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d803      	bhi.n	8006426 <HAL_SPI_Transmit+0x20a>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006424:	d102      	bne.n	800642c <HAL_SPI_Transmit+0x210>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d109      	bne.n	8006440 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e02d      	b.n	800649c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006444:	b29b      	uxth	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1c6      	bne.n	80063d8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 fbd2 	bl	8006bf8 <SPI_EndRxTxTransaction>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2220      	movs	r2, #32
 800645e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10a      	bne.n	800647e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006468:	2300      	movs	r3, #0
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800649a:	2300      	movs	r3, #0
  }
}
 800649c:	4618      	mov	r0, r3
 800649e:	3720      	adds	r7, #32
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b088      	sub	sp, #32
 80064a8:	af02      	add	r7, sp, #8
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	603b      	str	r3, [r7, #0]
 80064b0:	4613      	mov	r3, r2
 80064b2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d001      	beq.n	80064c4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80064c0:	2302      	movs	r3, #2
 80064c2:	e104      	b.n	80066ce <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064cc:	d112      	bne.n	80064f4 <HAL_SPI_Receive+0x50>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10e      	bne.n	80064f4 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2204      	movs	r2, #4
 80064da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80064de:	88fa      	ldrh	r2, [r7, #6]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	4613      	mov	r3, r2
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	68b9      	ldr	r1, [r7, #8]
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 f8f3 	bl	80066d6 <HAL_SPI_TransmitReceive>
 80064f0:	4603      	mov	r3, r0
 80064f2:	e0ec      	b.n	80066ce <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064f4:	f7fc f87c 	bl	80025f0 <HAL_GetTick>
 80064f8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <HAL_SPI_Receive+0x62>
 8006500:	88fb      	ldrh	r3, [r7, #6]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e0e1      	b.n	80066ce <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006510:	2b01      	cmp	r3, #1
 8006512:	d101      	bne.n	8006518 <HAL_SPI_Receive+0x74>
 8006514:	2302      	movs	r3, #2
 8006516:	e0da      	b.n	80066ce <HAL_SPI_Receive+0x22a>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2204      	movs	r2, #4
 8006524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	88fa      	ldrh	r2, [r7, #6]
 8006538:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	88fa      	ldrh	r2, [r7, #6]
 800653e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006566:	d10f      	bne.n	8006588 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006576:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006586:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006592:	2b40      	cmp	r3, #64	; 0x40
 8006594:	d007      	beq.n	80065a6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065a4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d170      	bne.n	8006690 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80065ae:	e035      	b.n	800661c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d115      	bne.n	80065ea <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f103 020c 	add.w	r2, r3, #12
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ca:	7812      	ldrb	r2, [r2, #0]
 80065cc:	b2d2      	uxtb	r2, r2
 80065ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d4:	1c5a      	adds	r2, r3, #1
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065de:	b29b      	uxth	r3, r3
 80065e0:	3b01      	subs	r3, #1
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065e8:	e018      	b.n	800661c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065ea:	f7fc f801 	bl	80025f0 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d803      	bhi.n	8006602 <HAL_SPI_Receive+0x15e>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006600:	d102      	bne.n	8006608 <HAL_SPI_Receive+0x164>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d109      	bne.n	800661c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e058      	b.n	80066ce <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006620:	b29b      	uxth	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1c4      	bne.n	80065b0 <HAL_SPI_Receive+0x10c>
 8006626:	e038      	b.n	800669a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b01      	cmp	r3, #1
 8006634:	d113      	bne.n	800665e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68da      	ldr	r2, [r3, #12]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006640:	b292      	uxth	r2, r2
 8006642:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	1c9a      	adds	r2, r3, #2
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006652:	b29b      	uxth	r3, r3
 8006654:	3b01      	subs	r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800665c:	e018      	b.n	8006690 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800665e:	f7fb ffc7 	bl	80025f0 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	429a      	cmp	r2, r3
 800666c:	d803      	bhi.n	8006676 <HAL_SPI_Receive+0x1d2>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006674:	d102      	bne.n	800667c <HAL_SPI_Receive+0x1d8>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d109      	bne.n	8006690 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e01e      	b.n	80066ce <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006694:	b29b      	uxth	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1c6      	bne.n	8006628 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	6839      	ldr	r1, [r7, #0]
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f000 fa58 	bl	8006b54 <SPI_EndRxTransaction>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2220      	movs	r2, #32
 80066ae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e000      	b.n	80066ce <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80066cc:	2300      	movs	r3, #0
  }
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b08a      	sub	sp, #40	; 0x28
 80066da:	af00      	add	r7, sp, #0
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	607a      	str	r2, [r7, #4]
 80066e2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80066e4:	2301      	movs	r3, #1
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066e8:	f7fb ff82 	bl	80025f0 <HAL_GetTick>
 80066ec:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066f4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80066fc:	887b      	ldrh	r3, [r7, #2]
 80066fe:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006700:	7ffb      	ldrb	r3, [r7, #31]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d00c      	beq.n	8006720 <HAL_SPI_TransmitReceive+0x4a>
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800670c:	d106      	bne.n	800671c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d102      	bne.n	800671c <HAL_SPI_TransmitReceive+0x46>
 8006716:	7ffb      	ldrb	r3, [r7, #31]
 8006718:	2b04      	cmp	r3, #4
 800671a:	d001      	beq.n	8006720 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800671c:	2302      	movs	r3, #2
 800671e:	e17f      	b.n	8006a20 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d005      	beq.n	8006732 <HAL_SPI_TransmitReceive+0x5c>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <HAL_SPI_TransmitReceive+0x5c>
 800672c:	887b      	ldrh	r3, [r7, #2]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e174      	b.n	8006a20 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800673c:	2b01      	cmp	r3, #1
 800673e:	d101      	bne.n	8006744 <HAL_SPI_TransmitReceive+0x6e>
 8006740:	2302      	movs	r3, #2
 8006742:	e16d      	b.n	8006a20 <HAL_SPI_TransmitReceive+0x34a>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b04      	cmp	r3, #4
 8006756:	d003      	beq.n	8006760 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2205      	movs	r2, #5
 800675c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	887a      	ldrh	r2, [r7, #2]
 8006770:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	887a      	ldrh	r2, [r7, #2]
 8006776:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	887a      	ldrh	r2, [r7, #2]
 8006782:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	887a      	ldrh	r2, [r7, #2]
 8006788:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a0:	2b40      	cmp	r3, #64	; 0x40
 80067a2:	d007      	beq.n	80067b4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067bc:	d17e      	bne.n	80068bc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <HAL_SPI_TransmitReceive+0xf6>
 80067c6:	8afb      	ldrh	r3, [r7, #22]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d16c      	bne.n	80068a6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d0:	881a      	ldrh	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067dc:	1c9a      	adds	r2, r3, #2
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067f0:	e059      	b.n	80068a6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f003 0302 	and.w	r3, r3, #2
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d11b      	bne.n	8006838 <HAL_SPI_TransmitReceive+0x162>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006804:	b29b      	uxth	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d016      	beq.n	8006838 <HAL_SPI_TransmitReceive+0x162>
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	2b01      	cmp	r3, #1
 800680e:	d113      	bne.n	8006838 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006814:	881a      	ldrh	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006820:	1c9a      	adds	r2, r3, #2
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800682a:	b29b      	uxth	r3, r3
 800682c:	3b01      	subs	r3, #1
 800682e:	b29a      	uxth	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b01      	cmp	r3, #1
 8006844:	d119      	bne.n	800687a <HAL_SPI_TransmitReceive+0x1a4>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800684a:	b29b      	uxth	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	d014      	beq.n	800687a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68da      	ldr	r2, [r3, #12]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685a:	b292      	uxth	r2, r2
 800685c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006862:	1c9a      	adds	r2, r3, #2
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800686c:	b29b      	uxth	r3, r3
 800686e:	3b01      	subs	r3, #1
 8006870:	b29a      	uxth	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006876:	2301      	movs	r3, #1
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800687a:	f7fb feb9 	bl	80025f0 <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006886:	429a      	cmp	r2, r3
 8006888:	d80d      	bhi.n	80068a6 <HAL_SPI_TransmitReceive+0x1d0>
 800688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006890:	d009      	beq.n	80068a6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e0bc      	b.n	8006a20 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1a0      	bne.n	80067f2 <HAL_SPI_TransmitReceive+0x11c>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d19b      	bne.n	80067f2 <HAL_SPI_TransmitReceive+0x11c>
 80068ba:	e082      	b.n	80069c2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <HAL_SPI_TransmitReceive+0x1f4>
 80068c4:	8afb      	ldrh	r3, [r7, #22]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d171      	bne.n	80069ae <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	330c      	adds	r3, #12
 80068d4:	7812      	ldrb	r2, [r2, #0]
 80068d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068dc:	1c5a      	adds	r2, r3, #1
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	3b01      	subs	r3, #1
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068f0:	e05d      	b.n	80069ae <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f003 0302 	and.w	r3, r3, #2
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d11c      	bne.n	800693a <HAL_SPI_TransmitReceive+0x264>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006904:	b29b      	uxth	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d017      	beq.n	800693a <HAL_SPI_TransmitReceive+0x264>
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	2b01      	cmp	r3, #1
 800690e:	d114      	bne.n	800693a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	330c      	adds	r3, #12
 800691a:	7812      	ldrb	r2, [r2, #0]
 800691c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800692c:	b29b      	uxth	r3, r3
 800692e:	3b01      	subs	r3, #1
 8006930:	b29a      	uxth	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006936:	2300      	movs	r3, #0
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b01      	cmp	r3, #1
 8006946:	d119      	bne.n	800697c <HAL_SPI_TransmitReceive+0x2a6>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800694c:	b29b      	uxth	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d014      	beq.n	800697c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695c:	b2d2      	uxtb	r2, r2
 800695e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800696e:	b29b      	uxth	r3, r3
 8006970:	3b01      	subs	r3, #1
 8006972:	b29a      	uxth	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006978:	2301      	movs	r3, #1
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800697c:	f7fb fe38 	bl	80025f0 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006988:	429a      	cmp	r2, r3
 800698a:	d803      	bhi.n	8006994 <HAL_SPI_TransmitReceive+0x2be>
 800698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006992:	d102      	bne.n	800699a <HAL_SPI_TransmitReceive+0x2c4>
 8006994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006996:	2b00      	cmp	r3, #0
 8006998:	d109      	bne.n	80069ae <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e038      	b.n	8006a20 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d19c      	bne.n	80068f2 <HAL_SPI_TransmitReceive+0x21c>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d197      	bne.n	80068f2 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069c2:	6a3a      	ldr	r2, [r7, #32]
 80069c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f916 	bl	8006bf8 <SPI_EndRxTxTransaction>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d008      	beq.n	80069e4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2220      	movs	r2, #32
 80069d6:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e01d      	b.n	8006a20 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10a      	bne.n	8006a02 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069ec:	2300      	movs	r3, #0
 80069ee:	613b      	str	r3, [r7, #16]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	613b      	str	r3, [r7, #16]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	613b      	str	r3, [r7, #16]
 8006a00:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e000      	b.n	8006a20 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
  }
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3728      	adds	r7, #40	; 0x28
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a36:	b2db      	uxtb	r3, r3
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bc80      	pop	{r7}
 8006a40:	4770      	bx	lr
	...

08006a44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	603b      	str	r3, [r7, #0]
 8006a50:	4613      	mov	r3, r2
 8006a52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a54:	f7fb fdcc 	bl	80025f0 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	1a9b      	subs	r3, r3, r2
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	4413      	add	r3, r2
 8006a62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a64:	f7fb fdc4 	bl	80025f0 <HAL_GetTick>
 8006a68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a6a:	4b39      	ldr	r3, [pc, #228]	; (8006b50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	015b      	lsls	r3, r3, #5
 8006a70:	0d1b      	lsrs	r3, r3, #20
 8006a72:	69fa      	ldr	r2, [r7, #28]
 8006a74:	fb02 f303 	mul.w	r3, r2, r3
 8006a78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a7a:	e054      	b.n	8006b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a82:	d050      	beq.n	8006b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a84:	f7fb fdb4 	bl	80025f0 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	69fa      	ldr	r2, [r7, #28]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d902      	bls.n	8006a9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d13d      	bne.n	8006b16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006aa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ab2:	d111      	bne.n	8006ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006abc:	d004      	beq.n	8006ac8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ac6:	d107      	bne.n	8006ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ad6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ae0:	d10f      	bne.n	8006b02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e017      	b.n	8006b46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	3b01      	subs	r3, #1
 8006b24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	4013      	ands	r3, r2
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	bf0c      	ite	eq
 8006b36:	2301      	moveq	r3, #1
 8006b38:	2300      	movne	r3, #0
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	79fb      	ldrb	r3, [r7, #7]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d19b      	bne.n	8006a7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3720      	adds	r7, #32
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000004 	.word	0x20000004

08006b54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af02      	add	r7, sp, #8
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b68:	d111      	bne.n	8006b8e <SPI_EndRxTransaction+0x3a>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b72:	d004      	beq.n	8006b7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b7c:	d107      	bne.n	8006b8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b8c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b96:	d117      	bne.n	8006bc8 <SPI_EndRxTransaction+0x74>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba0:	d112      	bne.n	8006bc8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2101      	movs	r1, #1
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f7ff ff49 	bl	8006a44 <SPI_WaitFlagStateUntilTimeout>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d01a      	beq.n	8006bee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bbc:	f043 0220 	orr.w	r2, r3, #32
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e013      	b.n	8006bf0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	2180      	movs	r1, #128	; 0x80
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f7ff ff36 	bl	8006a44 <SPI_WaitFlagStateUntilTimeout>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d007      	beq.n	8006bee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be2:	f043 0220 	orr.w	r2, r3, #32
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e000      	b.n	8006bf0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af02      	add	r7, sp, #8
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	2102      	movs	r1, #2
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f7ff ff18 	bl	8006a44 <SPI_WaitFlagStateUntilTimeout>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d007      	beq.n	8006c2a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1e:	f043 0220 	orr.w	r2, r3, #32
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e013      	b.n	8006c52 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2200      	movs	r2, #0
 8006c32:	2180      	movs	r1, #128	; 0x80
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f7ff ff05 	bl	8006a44 <SPI_WaitFlagStateUntilTimeout>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d007      	beq.n	8006c50 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c44:	f043 0220 	orr.w	r2, r3, #32
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e000      	b.n	8006c52 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b082      	sub	sp, #8
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e041      	b.n	8006cf0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d106      	bne.n	8006c86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7fb fbcf 	bl	8002424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2202      	movs	r2, #2
 8006c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	3304      	adds	r3, #4
 8006c96:	4619      	mov	r1, r3
 8006c98:	4610      	mov	r0, r2
 8006c9a:	f000 f93f 	bl	8006f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d001      	beq.n	8006d10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e032      	b.n	8006d76 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a18      	ldr	r2, [pc, #96]	; (8006d80 <HAL_TIM_Base_Start+0x88>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00e      	beq.n	8006d40 <HAL_TIM_Base_Start+0x48>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d2a:	d009      	beq.n	8006d40 <HAL_TIM_Base_Start+0x48>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a14      	ldr	r2, [pc, #80]	; (8006d84 <HAL_TIM_Base_Start+0x8c>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d004      	beq.n	8006d40 <HAL_TIM_Base_Start+0x48>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a13      	ldr	r2, [pc, #76]	; (8006d88 <HAL_TIM_Base_Start+0x90>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d111      	bne.n	8006d64 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 0307 	and.w	r3, r3, #7
 8006d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b06      	cmp	r3, #6
 8006d50:	d010      	beq.n	8006d74 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f042 0201 	orr.w	r2, r2, #1
 8006d60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d62:	e007      	b.n	8006d74 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0201 	orr.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bc80      	pop	{r7}
 8006d7e:	4770      	bx	lr
 8006d80:	40012c00 	.word	0x40012c00
 8006d84:	40000400 	.word	0x40000400
 8006d88:	40000800 	.word	0x40000800

08006d8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d101      	bne.n	8006da8 <HAL_TIM_ConfigClockSource+0x1c>
 8006da4:	2302      	movs	r3, #2
 8006da6:	e0b4      	b.n	8006f12 <HAL_TIM_ConfigClockSource+0x186>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2202      	movs	r2, #2
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006de0:	d03e      	beq.n	8006e60 <HAL_TIM_ConfigClockSource+0xd4>
 8006de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006de6:	f200 8087 	bhi.w	8006ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8006dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dee:	f000 8086 	beq.w	8006efe <HAL_TIM_ConfigClockSource+0x172>
 8006df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df6:	d87f      	bhi.n	8006ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8006df8:	2b70      	cmp	r3, #112	; 0x70
 8006dfa:	d01a      	beq.n	8006e32 <HAL_TIM_ConfigClockSource+0xa6>
 8006dfc:	2b70      	cmp	r3, #112	; 0x70
 8006dfe:	d87b      	bhi.n	8006ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8006e00:	2b60      	cmp	r3, #96	; 0x60
 8006e02:	d050      	beq.n	8006ea6 <HAL_TIM_ConfigClockSource+0x11a>
 8006e04:	2b60      	cmp	r3, #96	; 0x60
 8006e06:	d877      	bhi.n	8006ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8006e08:	2b50      	cmp	r3, #80	; 0x50
 8006e0a:	d03c      	beq.n	8006e86 <HAL_TIM_ConfigClockSource+0xfa>
 8006e0c:	2b50      	cmp	r3, #80	; 0x50
 8006e0e:	d873      	bhi.n	8006ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8006e10:	2b40      	cmp	r3, #64	; 0x40
 8006e12:	d058      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x13a>
 8006e14:	2b40      	cmp	r3, #64	; 0x40
 8006e16:	d86f      	bhi.n	8006ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8006e18:	2b30      	cmp	r3, #48	; 0x30
 8006e1a:	d064      	beq.n	8006ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8006e1c:	2b30      	cmp	r3, #48	; 0x30
 8006e1e:	d86b      	bhi.n	8006ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8006e20:	2b20      	cmp	r3, #32
 8006e22:	d060      	beq.n	8006ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8006e24:	2b20      	cmp	r3, #32
 8006e26:	d867      	bhi.n	8006ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d05c      	beq.n	8006ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8006e2c:	2b10      	cmp	r3, #16
 8006e2e:	d05a      	beq.n	8006ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8006e30:	e062      	b.n	8006ef8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e42:	f000 f950 	bl	80070e6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	609a      	str	r2, [r3, #8]
      break;
 8006e5e:	e04f      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e70:	f000 f939 	bl	80070e6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689a      	ldr	r2, [r3, #8]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e82:	609a      	str	r2, [r3, #8]
      break;
 8006e84:	e03c      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e92:	461a      	mov	r2, r3
 8006e94:	f000 f8b0 	bl	8006ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2150      	movs	r1, #80	; 0x50
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 f907 	bl	80070b2 <TIM_ITRx_SetConfig>
      break;
 8006ea4:	e02c      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f000 f8ce 	bl	8007054 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2160      	movs	r1, #96	; 0x60
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 f8f7 	bl	80070b2 <TIM_ITRx_SetConfig>
      break;
 8006ec4:	e01c      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f000 f890 	bl	8006ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2140      	movs	r1, #64	; 0x40
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 f8e7 	bl	80070b2 <TIM_ITRx_SetConfig>
      break;
 8006ee4:	e00c      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	f000 f8de 	bl	80070b2 <TIM_ITRx_SetConfig>
      break;
 8006ef6:	e003      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	73fb      	strb	r3, [r7, #15]
      break;
 8006efc:	e000      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006efe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
	...

08006f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a2f      	ldr	r2, [pc, #188]	; (8006fec <TIM_Base_SetConfig+0xd0>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d00b      	beq.n	8006f4c <TIM_Base_SetConfig+0x30>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f3a:	d007      	beq.n	8006f4c <TIM_Base_SetConfig+0x30>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a2c      	ldr	r2, [pc, #176]	; (8006ff0 <TIM_Base_SetConfig+0xd4>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d003      	beq.n	8006f4c <TIM_Base_SetConfig+0x30>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a2b      	ldr	r2, [pc, #172]	; (8006ff4 <TIM_Base_SetConfig+0xd8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d108      	bne.n	8006f5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a22      	ldr	r2, [pc, #136]	; (8006fec <TIM_Base_SetConfig+0xd0>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00b      	beq.n	8006f7e <TIM_Base_SetConfig+0x62>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f6c:	d007      	beq.n	8006f7e <TIM_Base_SetConfig+0x62>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a1f      	ldr	r2, [pc, #124]	; (8006ff0 <TIM_Base_SetConfig+0xd4>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d003      	beq.n	8006f7e <TIM_Base_SetConfig+0x62>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a1e      	ldr	r2, [pc, #120]	; (8006ff4 <TIM_Base_SetConfig+0xd8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d108      	bne.n	8006f90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	689a      	ldr	r2, [r3, #8]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a0d      	ldr	r2, [pc, #52]	; (8006fec <TIM_Base_SetConfig+0xd0>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d103      	bne.n	8006fc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	691a      	ldr	r2, [r3, #16]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d005      	beq.n	8006fe2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	f023 0201 	bic.w	r2, r3, #1
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	611a      	str	r2, [r3, #16]
  }
}
 8006fe2:	bf00      	nop
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bc80      	pop	{r7}
 8006fea:	4770      	bx	lr
 8006fec:	40012c00 	.word	0x40012c00
 8006ff0:	40000400 	.word	0x40000400
 8006ff4:	40000800 	.word	0x40000800

08006ff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	f023 0201 	bic.w	r2, r3, #1
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	4313      	orrs	r3, r2
 800702c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f023 030a 	bic.w	r3, r3, #10
 8007034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	4313      	orrs	r3, r2
 800703c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	621a      	str	r2, [r3, #32]
}
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	bc80      	pop	{r7}
 8007052:	4770      	bx	lr

08007054 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6a1b      	ldr	r3, [r3, #32]
 8007064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	f023 0210 	bic.w	r2, r3, #16
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800707e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	031b      	lsls	r3, r3, #12
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	4313      	orrs	r3, r2
 8007088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007090:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	011b      	lsls	r3, r3, #4
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	4313      	orrs	r3, r2
 800709a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	621a      	str	r2, [r3, #32]
}
 80070a8:	bf00      	nop
 80070aa:	371c      	adds	r7, #28
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bc80      	pop	{r7}
 80070b0:	4770      	bx	lr

080070b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b085      	sub	sp, #20
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	f043 0307 	orr.w	r3, r3, #7
 80070d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	609a      	str	r2, [r3, #8]
}
 80070dc:	bf00      	nop
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bc80      	pop	{r7}
 80070e4:	4770      	bx	lr

080070e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b087      	sub	sp, #28
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	60f8      	str	r0, [r7, #12]
 80070ee:	60b9      	str	r1, [r7, #8]
 80070f0:	607a      	str	r2, [r7, #4]
 80070f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007100:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	021a      	lsls	r2, r3, #8
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	431a      	orrs	r2, r3
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	4313      	orrs	r3, r2
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	4313      	orrs	r3, r2
 8007112:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	609a      	str	r2, [r3, #8]
}
 800711a:	bf00      	nop
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	bc80      	pop	{r7}
 8007122:	4770      	bx	lr

08007124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007134:	2b01      	cmp	r3, #1
 8007136:	d101      	bne.n	800713c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007138:	2302      	movs	r3, #2
 800713a:	e046      	b.n	80071ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007162:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	4313      	orrs	r3, r2
 800716c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a16      	ldr	r2, [pc, #88]	; (80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d00e      	beq.n	800719e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007188:	d009      	beq.n	800719e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a12      	ldr	r2, [pc, #72]	; (80071d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d004      	beq.n	800719e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a10      	ldr	r2, [pc, #64]	; (80071dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d10c      	bne.n	80071b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bc80      	pop	{r7}
 80071d2:	4770      	bx	lr
 80071d4:	40012c00 	.word	0x40012c00
 80071d8:	40000400 	.word	0x40000400
 80071dc:	40000800 	.word	0x40000800

080071e0 <memset>:
 80071e0:	4603      	mov	r3, r0
 80071e2:	4402      	add	r2, r0
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d100      	bne.n	80071ea <memset+0xa>
 80071e8:	4770      	bx	lr
 80071ea:	f803 1b01 	strb.w	r1, [r3], #1
 80071ee:	e7f9      	b.n	80071e4 <memset+0x4>

080071f0 <__libc_init_array>:
 80071f0:	b570      	push	{r4, r5, r6, lr}
 80071f2:	2600      	movs	r6, #0
 80071f4:	4d0c      	ldr	r5, [pc, #48]	; (8007228 <__libc_init_array+0x38>)
 80071f6:	4c0d      	ldr	r4, [pc, #52]	; (800722c <__libc_init_array+0x3c>)
 80071f8:	1b64      	subs	r4, r4, r5
 80071fa:	10a4      	asrs	r4, r4, #2
 80071fc:	42a6      	cmp	r6, r4
 80071fe:	d109      	bne.n	8007214 <__libc_init_array+0x24>
 8007200:	f000 f828 	bl	8007254 <_init>
 8007204:	2600      	movs	r6, #0
 8007206:	4d0a      	ldr	r5, [pc, #40]	; (8007230 <__libc_init_array+0x40>)
 8007208:	4c0a      	ldr	r4, [pc, #40]	; (8007234 <__libc_init_array+0x44>)
 800720a:	1b64      	subs	r4, r4, r5
 800720c:	10a4      	asrs	r4, r4, #2
 800720e:	42a6      	cmp	r6, r4
 8007210:	d105      	bne.n	800721e <__libc_init_array+0x2e>
 8007212:	bd70      	pop	{r4, r5, r6, pc}
 8007214:	f855 3b04 	ldr.w	r3, [r5], #4
 8007218:	4798      	blx	r3
 800721a:	3601      	adds	r6, #1
 800721c:	e7ee      	b.n	80071fc <__libc_init_array+0xc>
 800721e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007222:	4798      	blx	r3
 8007224:	3601      	adds	r6, #1
 8007226:	e7f2      	b.n	800720e <__libc_init_array+0x1e>
 8007228:	08007300 	.word	0x08007300
 800722c:	08007300 	.word	0x08007300
 8007230:	08007300 	.word	0x08007300
 8007234:	08007304 	.word	0x08007304

08007238 <memcpy>:
 8007238:	440a      	add	r2, r1
 800723a:	4291      	cmp	r1, r2
 800723c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007240:	d100      	bne.n	8007244 <memcpy+0xc>
 8007242:	4770      	bx	lr
 8007244:	b510      	push	{r4, lr}
 8007246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800724a:	4291      	cmp	r1, r2
 800724c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007250:	d1f9      	bne.n	8007246 <memcpy+0xe>
 8007252:	bd10      	pop	{r4, pc}

08007254 <_init>:
 8007254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007256:	bf00      	nop
 8007258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725a:	bc08      	pop	{r3}
 800725c:	469e      	mov	lr, r3
 800725e:	4770      	bx	lr

08007260 <_fini>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	bf00      	nop
 8007264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007266:	bc08      	pop	{r3}
 8007268:	469e      	mov	lr, r3
 800726a:	4770      	bx	lr
