
Control_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005208  08005208  00015208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005298  08005298  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005298  08005298  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005298  08005298  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005298  08005298  00015298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800529c  0800529c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080052a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000010  080052b0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080052b0  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a99b  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e9b  00000000  00000000  0002aa17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  0002c8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000912  00000000  00000000  0002d488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017905  00000000  00000000  0002dd9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dcaf  00000000  00000000  0004569f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086651  00000000  00000000  0005334e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003244  00000000  00000000  000d99a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000dcbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080051ec 	.word	0x080051ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080051ec 	.word	0x080051ec

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2iz>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a5c:	d215      	bcs.n	8000a8a <__aeabi_d2iz+0x36>
 8000a5e:	d511      	bpl.n	8000a84 <__aeabi_d2iz+0x30>
 8000a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d912      	bls.n	8000a90 <__aeabi_d2iz+0x3c>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7e:	bf18      	it	ne
 8000a80:	4240      	negne	r0, r0
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d105      	bne.n	8000a9c <__aeabi_d2iz+0x48>
 8000a90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	bf08      	it	eq
 8000a96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_d2uiz>:
 8000aa4:	004a      	lsls	r2, r1, #1
 8000aa6:	d211      	bcs.n	8000acc <__aeabi_d2uiz+0x28>
 8000aa8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aac:	d211      	bcs.n	8000ad2 <__aeabi_d2uiz+0x2e>
 8000aae:	d50d      	bpl.n	8000acc <__aeabi_d2uiz+0x28>
 8000ab0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab8:	d40e      	bmi.n	8000ad8 <__aeabi_d2uiz+0x34>
 8000aba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000abe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d102      	bne.n	8000ade <__aeabi_d2uiz+0x3a>
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	4770      	bx	lr
 8000ade:	f04f 0000 	mov.w	r0, #0
 8000ae2:	4770      	bx	lr

08000ae4 <__aeabi_d2f>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aec:	bf24      	itt	cs
 8000aee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af6:	d90d      	bls.n	8000b14 <__aeabi_d2f+0x30>
 8000af8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000afc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b0c:	bf08      	it	eq
 8000b0e:	f020 0001 	biceq.w	r0, r0, #1
 8000b12:	4770      	bx	lr
 8000b14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b18:	d121      	bne.n	8000b5e <__aeabi_d2f+0x7a>
 8000b1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1e:	bfbc      	itt	lt
 8000b20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	4770      	bxlt	lr
 8000b26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2e:	f1c2 0218 	rsb	r2, r2, #24
 8000b32:	f1c2 0c20 	rsb	ip, r2, #32
 8000b36:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3e:	bf18      	it	ne
 8000b40:	f040 0001 	orrne.w	r0, r0, #1
 8000b44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b50:	ea40 000c 	orr.w	r0, r0, ip
 8000b54:	fa23 f302 	lsr.w	r3, r3, r2
 8000b58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b5c:	e7cc      	b.n	8000af8 <__aeabi_d2f+0x14>
 8000b5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b62:	d107      	bne.n	8000b74 <__aeabi_d2f+0x90>
 8000b64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b68:	bf1e      	ittt	ne
 8000b6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b72:	4770      	bxne	lr
 8000b74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <__aeabi_frsub>:
 8000b84:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b88:	e002      	b.n	8000b90 <__addsf3>
 8000b8a:	bf00      	nop

08000b8c <__aeabi_fsub>:
 8000b8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b90 <__addsf3>:
 8000b90:	0042      	lsls	r2, r0, #1
 8000b92:	bf1f      	itttt	ne
 8000b94:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b98:	ea92 0f03 	teqne	r2, r3
 8000b9c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ba0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba4:	d06a      	beq.n	8000c7c <__addsf3+0xec>
 8000ba6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000baa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bae:	bfc1      	itttt	gt
 8000bb0:	18d2      	addgt	r2, r2, r3
 8000bb2:	4041      	eorgt	r1, r0
 8000bb4:	4048      	eorgt	r0, r1
 8000bb6:	4041      	eorgt	r1, r0
 8000bb8:	bfb8      	it	lt
 8000bba:	425b      	neglt	r3, r3
 8000bbc:	2b19      	cmp	r3, #25
 8000bbe:	bf88      	it	hi
 8000bc0:	4770      	bxhi	lr
 8000bc2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bce:	bf18      	it	ne
 8000bd0:	4240      	negne	r0, r0
 8000bd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bda:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bde:	bf18      	it	ne
 8000be0:	4249      	negne	r1, r1
 8000be2:	ea92 0f03 	teq	r2, r3
 8000be6:	d03f      	beq.n	8000c68 <__addsf3+0xd8>
 8000be8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bec:	fa41 fc03 	asr.w	ip, r1, r3
 8000bf0:	eb10 000c 	adds.w	r0, r0, ip
 8000bf4:	f1c3 0320 	rsb	r3, r3, #32
 8000bf8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bfc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	d502      	bpl.n	8000c08 <__addsf3+0x78>
 8000c02:	4249      	negs	r1, r1
 8000c04:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c0c:	d313      	bcc.n	8000c36 <__addsf3+0xa6>
 8000c0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c12:	d306      	bcc.n	8000c22 <__addsf3+0x92>
 8000c14:	0840      	lsrs	r0, r0, #1
 8000c16:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c1a:	f102 0201 	add.w	r2, r2, #1
 8000c1e:	2afe      	cmp	r2, #254	; 0xfe
 8000c20:	d251      	bcs.n	8000cc6 <__addsf3+0x136>
 8000c22:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2a:	bf08      	it	eq
 8000c2c:	f020 0001 	biceq.w	r0, r0, #1
 8000c30:	ea40 0003 	orr.w	r0, r0, r3
 8000c34:	4770      	bx	lr
 8000c36:	0049      	lsls	r1, r1, #1
 8000c38:	eb40 0000 	adc.w	r0, r0, r0
 8000c3c:	3a01      	subs	r2, #1
 8000c3e:	bf28      	it	cs
 8000c40:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c44:	d2ed      	bcs.n	8000c22 <__addsf3+0x92>
 8000c46:	fab0 fc80 	clz	ip, r0
 8000c4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c4e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c52:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c56:	bfaa      	itet	ge
 8000c58:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c5c:	4252      	neglt	r2, r2
 8000c5e:	4318      	orrge	r0, r3
 8000c60:	bfbc      	itt	lt
 8000c62:	40d0      	lsrlt	r0, r2
 8000c64:	4318      	orrlt	r0, r3
 8000c66:	4770      	bx	lr
 8000c68:	f092 0f00 	teq	r2, #0
 8000c6c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c70:	bf06      	itte	eq
 8000c72:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c76:	3201      	addeq	r2, #1
 8000c78:	3b01      	subne	r3, #1
 8000c7a:	e7b5      	b.n	8000be8 <__addsf3+0x58>
 8000c7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c84:	bf18      	it	ne
 8000c86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c8a:	d021      	beq.n	8000cd0 <__addsf3+0x140>
 8000c8c:	ea92 0f03 	teq	r2, r3
 8000c90:	d004      	beq.n	8000c9c <__addsf3+0x10c>
 8000c92:	f092 0f00 	teq	r2, #0
 8000c96:	bf08      	it	eq
 8000c98:	4608      	moveq	r0, r1
 8000c9a:	4770      	bx	lr
 8000c9c:	ea90 0f01 	teq	r0, r1
 8000ca0:	bf1c      	itt	ne
 8000ca2:	2000      	movne	r0, #0
 8000ca4:	4770      	bxne	lr
 8000ca6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000caa:	d104      	bne.n	8000cb6 <__addsf3+0x126>
 8000cac:	0040      	lsls	r0, r0, #1
 8000cae:	bf28      	it	cs
 8000cb0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cb4:	4770      	bx	lr
 8000cb6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cba:	bf3c      	itt	cc
 8000cbc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cc0:	4770      	bxcc	lr
 8000cc2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cc6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cce:	4770      	bx	lr
 8000cd0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cd4:	bf16      	itet	ne
 8000cd6:	4608      	movne	r0, r1
 8000cd8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cdc:	4601      	movne	r1, r0
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	bf06      	itte	eq
 8000ce2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ce6:	ea90 0f01 	teqeq	r0, r1
 8000cea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cee:	4770      	bx	lr

08000cf0 <__aeabi_ui2f>:
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e004      	b.n	8000d00 <__aeabi_i2f+0x8>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_i2f>:
 8000cf8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cfc:	bf48      	it	mi
 8000cfe:	4240      	negmi	r0, r0
 8000d00:	ea5f 0c00 	movs.w	ip, r0
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d0c:	4601      	mov	r1, r0
 8000d0e:	f04f 0000 	mov.w	r0, #0
 8000d12:	e01c      	b.n	8000d4e <__aeabi_l2f+0x2a>

08000d14 <__aeabi_ul2f>:
 8000d14:	ea50 0201 	orrs.w	r2, r0, r1
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	e00a      	b.n	8000d38 <__aeabi_l2f+0x14>
 8000d22:	bf00      	nop

08000d24 <__aeabi_l2f>:
 8000d24:	ea50 0201 	orrs.w	r2, r0, r1
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d30:	d502      	bpl.n	8000d38 <__aeabi_l2f+0x14>
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	ea5f 0c01 	movs.w	ip, r1
 8000d3c:	bf02      	ittt	eq
 8000d3e:	4684      	moveq	ip, r0
 8000d40:	4601      	moveq	r1, r0
 8000d42:	2000      	moveq	r0, #0
 8000d44:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d48:	bf08      	it	eq
 8000d4a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d52:	fabc f28c 	clz	r2, ip
 8000d56:	3a08      	subs	r2, #8
 8000d58:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d5c:	db10      	blt.n	8000d80 <__aeabi_l2f+0x5c>
 8000d5e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d62:	4463      	add	r3, ip
 8000d64:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d70:	fa20 f202 	lsr.w	r2, r0, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	f020 0001 	biceq.w	r0, r0, #1
 8000d7e:	4770      	bx	lr
 8000d80:	f102 0220 	add.w	r2, r2, #32
 8000d84:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d88:	f1c2 0220 	rsb	r2, r2, #32
 8000d8c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d90:	fa21 f202 	lsr.w	r2, r1, r2
 8000d94:	eb43 0002 	adc.w	r0, r3, r2
 8000d98:	bf08      	it	eq
 8000d9a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d9e:	4770      	bx	lr

08000da0 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000da0:	b4b0      	push	{r4, r5, r7}
 8000da2:	b08f      	sub	sp, #60	; 0x3c
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000da8:	f240 13b1 	movw	r3, #433	; 0x1b1
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000dae:	2307      	movs	r3, #7
 8000db0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000db4:	2307      	movs	r3, #7
 8000db6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8000dc0:	23ff      	movs	r3, #255	; 0xff
 8000dc2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000dc6:	2364      	movs	r3, #100	; 0x64
 8000dc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	461d      	mov	r5, r3
 8000dd4:	f107 040c 	add.w	r4, r7, #12
 8000dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000de0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000de4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	373c      	adds	r7, #60	; 0x3c
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bcb0      	pop	{r4, r5, r7}
 8000df0:	4770      	bx	lr

08000df2 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b084      	sub	sp, #16
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f000 f9ff 	bl	8001202 <LoRa_read>
 8000e04:	4603      	mov	r3, r0
 8000e06:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000e08:	7bbb      	ldrb	r3, [r7, #14]
 8000e0a:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d107      	bne.n	8000e22 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000e12:	7bbb      	ldrb	r3, [r7, #14]
 8000e14:	f023 0307 	bic.w	r3, r3, #7
 8000e18:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	61da      	str	r2, [r3, #28]
 8000e20:	e03e      	b.n	8000ea0 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d10c      	bne.n	8000e42 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000e28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e2c:	f023 0307 	bic.w	r3, r3, #7
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	61da      	str	r2, [r3, #28]
 8000e40:	e02e      	b.n	8000ea0 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d10c      	bne.n	8000e62 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000e48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e4c:	f023 0307 	bic.w	r3, r3, #7
 8000e50:	b25b      	sxtb	r3, r3
 8000e52:	f043 0303 	orr.w	r3, r3, #3
 8000e56:	b25b      	sxtb	r3, r3
 8000e58:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	61da      	str	r2, [r3, #28]
 8000e60:	e01e      	b.n	8000ea0 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	2b05      	cmp	r3, #5
 8000e66:	d10c      	bne.n	8000e82 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000e68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e6c:	f023 0307 	bic.w	r3, r3, #7
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	f043 0305 	orr.w	r3, r3, #5
 8000e76:	b25b      	sxtb	r3, r3
 8000e78:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2205      	movs	r2, #5
 8000e7e:	61da      	str	r2, [r3, #28]
 8000e80:	e00e      	b.n	8000ea0 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	2b06      	cmp	r3, #6
 8000e86:	d10b      	bne.n	8000ea0 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000e88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e8c:	f023 0307 	bic.w	r3, r3, #7
 8000e90:	b25b      	sxtb	r3, r3
 8000e92:	f043 0306 	orr.w	r3, r3, #6
 8000e96:	b25b      	sxtb	r3, r3
 8000e98:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2206      	movs	r2, #6
 8000e9e:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f000 f9c5 	bl	8001236 <LoRa_write>
	//HAL_Delay(10);
}
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	889b      	ldrh	r3, [r3, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f001 fe7b 	bl	8002bca <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6998      	ldr	r0, [r3, #24]
 8000ed8:	88fa      	ldrh	r2, [r7, #6]
 8000eda:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ede:	68b9      	ldr	r1, [r7, #8]
 8000ee0:	f003 fc2a 	bl	8004738 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000ee4:	bf00      	nop
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f004 f82a 	bl	8004f44 <HAL_SPI_GetState>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d1f7      	bne.n	8000ee6 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6998      	ldr	r0, [r3, #24]
 8000efa:	8b3a      	ldrh	r2, [r7, #24]
 8000efc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f00:	6839      	ldr	r1, [r7, #0]
 8000f02:	f003 fd5d 	bl	80049c0 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f06:	bf00      	nop
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f004 f819 	bl	8004f44 <HAL_SPI_GetState>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d1f7      	bne.n	8000f08 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	889b      	ldrh	r3, [r3, #4]
 8000f20:	2201      	movs	r2, #1
 8000f22:	4619      	mov	r1, r3
 8000f24:	f001 fe51 	bl	8002bca <HAL_GPIO_WritePin>
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	889b      	ldrh	r3, [r3, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f001 fe3d 	bl	8002bca <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6998      	ldr	r0, [r3, #24]
 8000f54:	88fa      	ldrh	r2, [r7, #6]
 8000f56:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f5a:	68b9      	ldr	r1, [r7, #8]
 8000f5c:	f003 fbec 	bl	8004738 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f60:	bf00      	nop
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f003 ffec 	bl	8004f44 <HAL_SPI_GetState>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d1f7      	bne.n	8000f62 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6998      	ldr	r0, [r3, #24]
 8000f76:	8b3a      	ldrh	r2, [r7, #24]
 8000f78:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f7c:	6839      	ldr	r1, [r7, #0]
 8000f7e:	f003 fbdb 	bl	8004738 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f82:	bf00      	nop
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f003 ffdb 	bl	8004f44 <HAL_SPI_GetState>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d1f7      	bne.n	8000f84 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	889b      	ldrh	r3, [r3, #4]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f001 fe13 	bl	8002bca <HAL_GPIO_WritePin>
}
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000fb8:	2126      	movs	r1, #38	; 0x26
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 f921 	bl	8001202 <LoRa_read>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	73bb      	strb	r3, [r7, #14]

	if(value)
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d004      	beq.n	8000fd4 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	73fb      	strb	r3, [r7, #15]
 8000fd2:	e003      	b.n	8000fdc <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000fd4:	7bbb      	ldrb	r3, [r7, #14]
 8000fd6:	f023 0308 	bic.w	r3, r3, #8
 8000fda:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	2126      	movs	r1, #38	; 0x26
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f927 	bl	8001236 <LoRa_write>
	HAL_Delay(10);
 8000fe8:	200a      	movs	r0, #10
 8000fea:	f001 fb21 	bl	8002630 <HAL_Delay>
}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b096      	sub	sp, #88	; 0x58
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8001000:	4a17      	ldr	r2, [pc, #92]	; (8001060 <LoRa_setAutoLDO+0x68>)
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	4611      	mov	r1, r2
 8001008:	2250      	movs	r2, #80	; 0x50
 800100a:	4618      	mov	r0, r3
 800100c:	f004 f8e0 	bl	80051d0 <memcpy>

	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001016:	461a      	mov	r2, r3
 8001018:	2301      	movs	r3, #1
 800101a:	4093      	lsls	r3, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fa9d 	bl	800055c <__aeabi_i2d>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	3358      	adds	r3, #88	; 0x58
 800102c:	443b      	add	r3, r7
 800102e:	3b50      	subs	r3, #80	; 0x50
 8001030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001034:	f7ff fc26 	bl	8000884 <__aeabi_ddiv>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4610      	mov	r0, r2
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff fd08 	bl	8000a54 <__aeabi_d2iz>
 8001044:	4603      	mov	r3, r0
 8001046:	2b10      	cmp	r3, #16
 8001048:	bfcc      	ite	gt
 800104a:	2301      	movgt	r3, #1
 800104c:	2300      	movle	r3, #0
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4619      	mov	r1, r3
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffaa 	bl	8000fac <LoRa_setLowDaraRateOptimization>
}
 8001058:	bf00      	nop
 800105a:	3758      	adds	r7, #88	; 0x58
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	08005208 	.word	0x08005208

08001064 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	04db      	lsls	r3, r3, #19
 8001072:	115b      	asrs	r3, r3, #5
 8001074:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	0c1b      	lsrs	r3, r3, #16
 800107a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800107c:	7afb      	ldrb	r3, [r7, #11]
 800107e:	461a      	mov	r2, r3
 8001080:	2106      	movs	r1, #6
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 f8d7 	bl	8001236 <LoRa_write>
	HAL_Delay(5);
 8001088:	2005      	movs	r0, #5
 800108a:	f001 fad1 	bl	8002630 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001094:	7afb      	ldrb	r3, [r7, #11]
 8001096:	461a      	mov	r2, r3
 8001098:	2107      	movs	r1, #7
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 f8cb 	bl	8001236 <LoRa_write>
	HAL_Delay(5);
 80010a0:	2005      	movs	r0, #5
 80010a2:	f001 fac5 	bl	8002630 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80010aa:	7afb      	ldrb	r3, [r7, #11]
 80010ac:	461a      	mov	r2, r3
 80010ae:	2108      	movs	r1, #8
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f8c0 	bl	8001236 <LoRa_write>
	HAL_Delay(5);
 80010b6:	2005      	movs	r0, #5
 80010b8:	f001 faba 	bl	8002630 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2b0c      	cmp	r3, #12
 80010d2:	dd01      	ble.n	80010d8 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80010d4:	230c      	movs	r3, #12
 80010d6:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	2b06      	cmp	r3, #6
 80010dc:	dc01      	bgt.n	80010e2 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80010de:	2307      	movs	r3, #7
 80010e0:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80010e2:	211e      	movs	r1, #30
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f88c 	bl	8001202 <LoRa_read>
 80010ea:	4603      	mov	r3, r0
 80010ec:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80010ee:	200a      	movs	r0, #10
 80010f0:	f001 fa9e 	bl	8002630 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	011b      	lsls	r3, r3, #4
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4413      	add	r3, r2
 8001106:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001108:	7bbb      	ldrb	r3, [r7, #14]
 800110a:	461a      	mov	r2, r3
 800110c:	211e      	movs	r1, #30
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f891 	bl	8001236 <LoRa_write>
	HAL_Delay(10);
 8001114:	200a      	movs	r0, #10
 8001116:	f001 fa8b 	bl	8002630 <HAL_Delay>

	LoRa_setAutoLDO(_LoRa);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff6c 	bl	8000ff8 <LoRa_setAutoLDO>
}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	461a      	mov	r2, r3
 8001138:	2109      	movs	r1, #9
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f87b 	bl	8001236 <LoRa_write>
	HAL_Delay(10);
 8001140:	200a      	movs	r0, #10
 8001142:	f001 fa75 	bl	8002630 <HAL_Delay>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	2b2c      	cmp	r3, #44	; 0x2c
 8001164:	d801      	bhi.n	800116a <LoRa_setOCP+0x1a>
		current = 45;
 8001166:	232d      	movs	r3, #45	; 0x2d
 8001168:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	2bf0      	cmp	r3, #240	; 0xf0
 800116e:	d901      	bls.n	8001174 <LoRa_setOCP+0x24>
		current = 240;
 8001170:	23f0      	movs	r3, #240	; 0xf0
 8001172:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001174:	78fb      	ldrb	r3, [r7, #3]
 8001176:	2b78      	cmp	r3, #120	; 0x78
 8001178:	d809      	bhi.n	800118e <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	3b2d      	subs	r3, #45	; 0x2d
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <LoRa_setOCP+0x78>)
 8001180:	fb82 1203 	smull	r1, r2, r2, r3
 8001184:	1052      	asrs	r2, r2, #1
 8001186:	17db      	asrs	r3, r3, #31
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	e00b      	b.n	80011a6 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	2bf0      	cmp	r3, #240	; 0xf0
 8001192:	d808      	bhi.n	80011a6 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	331e      	adds	r3, #30
 8001198:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <LoRa_setOCP+0x78>)
 800119a:	fb82 1203 	smull	r1, r2, r2, r3
 800119e:	1092      	asrs	r2, r2, #2
 80011a0:	17db      	asrs	r3, r3, #31
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	3320      	adds	r3, #32
 80011aa:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	461a      	mov	r2, r3
 80011b0:	210b      	movs	r1, #11
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 f83f 	bl	8001236 <LoRa_write>
	HAL_Delay(10);
 80011b8:	200a      	movs	r0, #10
 80011ba:	f001 fa39 	bl	8002630 <HAL_Delay>
}
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	66666667 	.word	0x66666667

080011cc <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80011d4:	211e      	movs	r1, #30
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 f813 	bl	8001202 <LoRa_read>
 80011dc:	4603      	mov	r3, r0
 80011de:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	f043 0307 	orr.w	r3, r3, #7
 80011e6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80011e8:	7bbb      	ldrb	r3, [r7, #14]
 80011ea:	461a      	mov	r2, r3
 80011ec:	211e      	movs	r1, #30
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f821 	bl	8001236 <LoRa_write>
	HAL_Delay(10);
 80011f4:	200a      	movs	r0, #10
 80011f6:	f001 fa1b 	bl	8002630 <HAL_Delay>
}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af02      	add	r7, sp, #8
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	460b      	mov	r3, r1
 800120c:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800120e:	78fb      	ldrb	r3, [r7, #3]
 8001210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001214:	b2db      	uxtb	r3, r3
 8001216:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001218:	f107 030f 	add.w	r3, r7, #15
 800121c:	f107 010e 	add.w	r1, r7, #14
 8001220:	2201      	movs	r2, #1
 8001222:	9200      	str	r2, [sp, #0]
 8001224:	2201      	movs	r2, #1
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff fe44 	bl	8000eb4 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 800122c:	7bfb      	ldrb	r3, [r7, #15]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af02      	add	r7, sp, #8
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	70fb      	strb	r3, [r7, #3]
 8001242:	4613      	mov	r3, r2
 8001244:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800124c:	b2db      	uxtb	r3, r3
 800124e:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001250:	78bb      	ldrb	r3, [r7, #2]
 8001252:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001254:	f107 030f 	add.w	r3, r7, #15
 8001258:	f107 010e 	add.w	r1, r7, #14
 800125c:	2201      	movs	r2, #1
 800125e:	9200      	str	r2, [sp, #0]
 8001260:	2201      	movs	r2, #1
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fe64 	bl	8000f30 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	461a      	mov	r2, r3
 800127c:	460b      	mov	r3, r1
 800127e:	72fb      	strb	r3, [r7, #11]
 8001280:	4613      	mov	r3, r2
 8001282:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001284:	7afb      	ldrb	r3, [r7, #11]
 8001286:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800128a:	b2db      	uxtb	r3, r3
 800128c:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	889b      	ldrh	r3, [r3, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	4619      	mov	r1, r3
 800129a:	f001 fc96 	bl	8002bca <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6998      	ldr	r0, [r3, #24]
 80012a2:	f107 0117 	add.w	r1, r7, #23
 80012a6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012aa:	2201      	movs	r2, #1
 80012ac:	f003 fa44 	bl	8004738 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80012b0:	bf00      	nop
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f003 fe44 	bl	8004f44 <HAL_SPI_GetState>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d1f7      	bne.n	80012b2 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6998      	ldr	r0, [r3, #24]
 80012c6:	7abb      	ldrb	r3, [r7, #10]
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	f003 fa32 	bl	8004738 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80012d4:	bf00      	nop
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	4618      	mov	r0, r3
 80012dc:	f003 fe32 	bl	8004f44 <HAL_SPI_GetState>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d1f7      	bne.n	80012d6 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	889b      	ldrh	r3, [r3, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	4619      	mov	r1, r3
 80012f2:	f001 fc6a 	bl	8002bca <HAL_GPIO_WritePin>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]

	return 1;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr

08001312 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	4611      	mov	r1, r2
 800131e:	461a      	mov	r2, r3
 8001320:	460b      	mov	r3, r1
 8001322:	71fb      	strb	r3, [r7, #7]
 8001324:	4613      	mov	r3, r2
 8001326:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800132e:	2101      	movs	r1, #1
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f7ff fd5e 	bl	8000df2 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8001336:	210e      	movs	r1, #14
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	f7ff ff62 	bl	8001202 <LoRa_read>
 800133e:	4603      	mov	r3, r0
 8001340:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001342:	7cfb      	ldrb	r3, [r7, #19]
 8001344:	461a      	mov	r2, r3
 8001346:	210d      	movs	r1, #13
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f7ff ff74 	bl	8001236 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	461a      	mov	r2, r3
 8001352:	2122      	movs	r1, #34	; 0x22
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f7ff ff6e 	bl	8001236 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	2100      	movs	r1, #0
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f7ff ff85 	bl	8001270 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8001366:	2103      	movs	r1, #3
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f7ff fd42 	bl	8000df2 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 800136e:	2112      	movs	r1, #18
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f7ff ff46 	bl	8001202 <LoRa_read>
 8001376:	4603      	mov	r3, r0
 8001378:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 800137a:	7cfb      	ldrb	r3, [r7, #19]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00a      	beq.n	800139a <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001384:	22ff      	movs	r2, #255	; 0xff
 8001386:	2112      	movs	r1, #18
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f7ff ff54 	bl	8001236 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 800138e:	6979      	ldr	r1, [r7, #20]
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f7ff fd2e 	bl	8000df2 <LoRa_gotoMode>
			return 1;
 8001396:	2301      	movs	r3, #1
 8001398:	e00f      	b.n	80013ba <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 800139a:	88bb      	ldrh	r3, [r7, #4]
 800139c:	3b01      	subs	r3, #1
 800139e:	80bb      	strh	r3, [r7, #4]
 80013a0:	88bb      	ldrh	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d105      	bne.n	80013b2 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 80013a6:	6979      	ldr	r1, [r7, #20]
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f7ff fd22 	bl	8000df2 <LoRa_gotoMode>
				return 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e003      	b.n	80013ba <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 80013b2:	2001      	movs	r0, #1
 80013b4:	f001 f93c 	bl	8002630 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80013b8:	e7d9      	b.n	800136e <LoRa_transmit+0x5c>
	}
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80013ca:	2105      	movs	r1, #5
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fd10 	bl	8000df2 <LoRa_gotoMode>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80013da:	b590      	push	{r4, r7, lr}
 80013dc:	b089      	sub	sp, #36	; 0x24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	4613      	mov	r3, r2
 80013e6:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80013ec:	2300      	movs	r3, #0
 80013ee:	61bb      	str	r3, [r7, #24]
 80013f0:	e007      	b.n	8001402 <LoRa_receive+0x28>
		data[i]=0;
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	68ba      	ldr	r2, [r7, #8]
 80013f6:	4413      	add	r3, r2
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	3301      	adds	r3, #1
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	429a      	cmp	r2, r3
 8001408:	dbf3      	blt.n	80013f2 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800140a:	2101      	movs	r1, #1
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f7ff fcf0 	bl	8000df2 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8001412:	2112      	movs	r1, #18
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f7ff fef4 	bl	8001202 <LoRa_read>
 800141a:	4603      	mov	r3, r0
 800141c:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 800141e:	7cfb      	ldrb	r3, [r7, #19]
 8001420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001424:	2b00      	cmp	r3, #0
 8001426:	d02f      	beq.n	8001488 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001428:	22ff      	movs	r2, #255	; 0xff
 800142a:	2112      	movs	r1, #18
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f7ff ff02 	bl	8001236 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8001432:	2113      	movs	r1, #19
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f7ff fee4 	bl	8001202 <LoRa_read>
 800143a:	4603      	mov	r3, r0
 800143c:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 800143e:	2110      	movs	r1, #16
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f7ff fede 	bl	8001202 <LoRa_read>
 8001446:	4603      	mov	r3, r0
 8001448:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800144a:	7cfb      	ldrb	r3, [r7, #19]
 800144c:	461a      	mov	r2, r3
 800144e:	210d      	movs	r1, #13
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f7ff fef0 	bl	8001236 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8001456:	7cba      	ldrb	r2, [r7, #18]
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	4293      	cmp	r3, r2
 800145c:	bf28      	it	cs
 800145e:	4613      	movcs	r3, r2
 8001460:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	e00b      	b.n	8001480 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	18d4      	adds	r4, r2, r3
 800146e:	2100      	movs	r1, #0
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f7ff fec6 	bl	8001202 <LoRa_read>
 8001476:	4603      	mov	r3, r0
 8001478:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	3301      	adds	r3, #1
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	7ffb      	ldrb	r3, [r7, #31]
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	429a      	cmp	r2, r3
 8001486:	dbef      	blt.n	8001468 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001488:	2105      	movs	r1, #5
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f7ff fcb1 	bl	8000df2 <LoRa_gotoMode>
    return min;
 8001490:	7ffb      	ldrb	r3, [r7, #31]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd90      	pop	{r4, r7, pc}

0800149a <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800149a:	b580      	push	{r7, lr}
 800149c:	b084      	sub	sp, #16
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ff2b 	bl	80012fe <LoRa_isvalid>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8096 	beq.w	80015dc <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80014b0:	2100      	movs	r1, #0
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fc9d 	bl	8000df2 <LoRa_gotoMode>
			HAL_Delay(10);
 80014b8:	200a      	movs	r0, #10
 80014ba:	f001 f8b9 	bl	8002630 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80014be:	2101      	movs	r1, #1
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff fe9e 	bl	8001202 <LoRa_read>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80014ca:	200a      	movs	r0, #10
 80014cc:	f001 f8b0 	bl	8002630 <HAL_Delay>
			data = read | 0x80;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014d6:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80014d8:	7bbb      	ldrb	r3, [r7, #14]
 80014da:	461a      	mov	r2, r3
 80014dc:	2101      	movs	r1, #1
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff fea9 	bl	8001236 <LoRa_write>
			HAL_Delay(100);
 80014e4:	2064      	movs	r0, #100	; 0x64
 80014e6:	f001 f8a3 	bl	8002630 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	4619      	mov	r1, r3
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff fdb7 	bl	8001064 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80014fc:	4619      	mov	r1, r3
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fe12 	bl	8001128 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800150a:	4619      	mov	r1, r3
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff fe1f 	bl	8001150 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001512:	2223      	movs	r2, #35	; 0x23
 8001514:	210c      	movs	r1, #12
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fe8d 	bl	8001236 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff fe55 	bl	80011cc <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001528:	4619      	mov	r1, r3
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff fdca 	bl	80010c4 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001530:	22ff      	movs	r2, #255	; 0xff
 8001532:	211f      	movs	r1, #31
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fe7e 	bl	8001236 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	b2da      	uxtb	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4413      	add	r3, r2
 8001554:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001556:	7bbb      	ldrb	r3, [r7, #14]
 8001558:	461a      	mov	r2, r3
 800155a:	211d      	movs	r1, #29
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fe6a 	bl	8001236 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fd48 	bl	8000ff8 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	b29b      	uxth	r3, r3
 8001570:	b2db      	uxtb	r3, r3
 8001572:	461a      	mov	r2, r3
 8001574:	2120      	movs	r1, #32
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fe5d 	bl	8001236 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001580:	b2db      	uxtb	r3, r3
 8001582:	461a      	mov	r2, r3
 8001584:	2121      	movs	r1, #33	; 0x21
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff fe55 	bl	8001236 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 800158c:	2140      	movs	r1, #64	; 0x40
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff fe37 	bl	8001202 <LoRa_read>
 8001594:	4603      	mov	r3, r0
 8001596:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800159e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80015a0:	7bbb      	ldrb	r3, [r7, #14]
 80015a2:	461a      	mov	r2, r3
 80015a4:	2140      	movs	r1, #64	; 0x40
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fe45 	bl	8001236 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80015ac:	2101      	movs	r1, #1
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fc1f 	bl	8000df2 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80015ba:	200a      	movs	r0, #10
 80015bc:	f001 f838 	bl	8002630 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80015c0:	2142      	movs	r1, #66	; 0x42
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff fe1d 	bl	8001202 <LoRa_read>
 80015c8:	4603      	mov	r3, r0
 80015ca:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	2b12      	cmp	r3, #18
 80015d0:	d101      	bne.n	80015d6 <LoRa_init+0x13c>
				return LORA_OK;
 80015d2:	23c8      	movs	r3, #200	; 0xc8
 80015d4:	e004      	b.n	80015e0 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 80015d6:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80015da:	e001      	b.n	80015e0 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 80015dc:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e8:	b5b0      	push	{r4, r5, r7, lr}
 80015ea:	b08c      	sub	sp, #48	; 0x30
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ee:	f000 ffbd 	bl	800256c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015f2:	f000 f8a7 	bl	8001744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f6:	f000 f9cb 	bl	8001990 <MX_GPIO_Init>
  MX_I2C1_Init();
 80015fa:	f000 f901 	bl	8001800 <MX_I2C1_Init>
  MX_SPI1_Init();
 80015fe:	f000 f991 	bl	8001924 <MX_SPI1_Init>
  MX_RTC_Init();
 8001602:	f000 f92b 	bl	800185c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //LORA STATUS CONFIG
  myLoRa = newLoRa();
 8001606:	4c47      	ldr	r4, [pc, #284]	; (8001724 <main+0x13c>)
 8001608:	463b      	mov	r3, r7
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fbc8 	bl	8000da0 <newLoRa>
 8001610:	4625      	mov	r5, r4
 8001612:	463c      	mov	r4, r7
 8001614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001618:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001620:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = NSS_GPIO_Port;
 8001624:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <main+0x13c>)
 8001626:	4a40      	ldr	r2, [pc, #256]	; (8001728 <main+0x140>)
 8001628:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 800162a:	4b3e      	ldr	r3, [pc, #248]	; (8001724 <main+0x13c>)
 800162c:	2201      	movs	r2, #1
 800162e:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 8001630:	4b3c      	ldr	r3, [pc, #240]	; (8001724 <main+0x13c>)
 8001632:	4a3d      	ldr	r2, [pc, #244]	; (8001728 <main+0x140>)
 8001634:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 8001636:	4b3b      	ldr	r3, [pc, #236]	; (8001724 <main+0x13c>)
 8001638:	2202      	movs	r2, #2
 800163a:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 800163c:	4b39      	ldr	r3, [pc, #228]	; (8001724 <main+0x13c>)
 800163e:	4a3a      	ldr	r2, [pc, #232]	; (8001728 <main+0x140>)
 8001640:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 8001642:	4b38      	ldr	r3, [pc, #224]	; (8001724 <main+0x13c>)
 8001644:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001648:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 800164a:	4b36      	ldr	r3, [pc, #216]	; (8001724 <main+0x13c>)
 800164c:	4a37      	ldr	r2, [pc, #220]	; (800172c <main+0x144>)
 800164e:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 440;             // default = 433 MHz
 8001650:	4b34      	ldr	r3, [pc, #208]	; (8001724 <main+0x13c>)
 8001652:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8001656:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 8001658:	4b32      	ldr	r3, [pc, #200]	; (8001724 <main+0x13c>)
 800165a:	2207      	movs	r2, #7
 800165c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  myLoRa.bandWidth             = BW_31_25KHz;       // default = BW_125KHz
 8001660:	4b30      	ldr	r3, [pc, #192]	; (8001724 <main+0x13c>)
 8001662:	2204      	movs	r2, #4
 8001664:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 8001668:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <main+0x13c>)
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 8001670:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <main+0x13c>)
 8001672:	22ff      	movs	r2, #255	; 0xff
 8001674:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  myLoRa.overCurrentProtection = 130;             // default = 100 mA
 8001678:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <main+0x13c>)
 800167a:	2282      	movs	r2, #130	; 0x82
 800167c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  myLoRa.preamble              = 9;              // default = 8;
 8001680:	4b28      	ldr	r3, [pc, #160]	; (8001724 <main+0x13c>)
 8001682:	2209      	movs	r2, #9
 8001684:	851a      	strh	r2, [r3, #40]	; 0x28

  if (LoRa_init(&myLoRa) == LORA_OK)
 8001686:	4827      	ldr	r0, [pc, #156]	; (8001724 <main+0x13c>)
 8001688:	f7ff ff07 	bl	800149a <LoRa_init>
 800168c:	4603      	mov	r3, r0
 800168e:	2bc8      	cmp	r3, #200	; 0xc8
 8001690:	d102      	bne.n	8001698 <main+0xb0>
  {
  	LoRa_Status = 1;
 8001692:	4b27      	ldr	r3, [pc, #156]	; (8001730 <main+0x148>)
 8001694:	2201      	movs	r2, #1
 8001696:	801a      	strh	r2, [r3, #0]
  }

  LoRa_startReceiving(&myLoRa);
 8001698:	4822      	ldr	r0, [pc, #136]	; (8001724 <main+0x13c>)
 800169a:	f7ff fe92 	bl	80013c2 <LoRa_startReceiving>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#if new_function == 1
	  Send_Relay_Mode_Status();// Hàm này chỉ được gọi một lần khi RTC wakeup mỗi 12s
 800169e:	f000 fa8f 	bl	8001bc0 <Send_Relay_Mode_Status>

	  if (Received_Data[0] == 0xFF)
 80016a2:	4b24      	ldr	r3, [pc, #144]	; (8001734 <main+0x14c>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2bff      	cmp	r3, #255	; 0xff
 80016a8:	d12c      	bne.n	8001704 <main+0x11c>
	  {
		  //TURNOFF ALL THE RELAYS WHEN GATEWAY OFFER RESTART THE NETWORK
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b0:	4821      	ldr	r0, [pc, #132]	; (8001738 <main+0x150>)
 80016b2:	f001 fa8a 	bl	8002bca <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016bc:	481e      	ldr	r0, [pc, #120]	; (8001738 <main+0x150>)
 80016be:	f001 fa84 	bl	8002bca <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016c8:	481b      	ldr	r0, [pc, #108]	; (8001738 <main+0x150>)
 80016ca:	f001 fa7e 	bl	8002bca <HAL_GPIO_WritePin>
		  while(Received_Data[0] != 0xC0) //0XEE
 80016ce:	bf00      	nop
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <main+0x14c>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2bc0      	cmp	r3, #192	; 0xc0
 80016d6:	d1fb      	bne.n	80016d0 <main+0xe8>
		  {

		  }
		  HAL_Delay(750); //Wait for the other 2 nodes complete transmit
 80016d8:	f240 20ee 	movw	r0, #750	; 0x2ee
 80016dc:	f000 ffa8 	bl	8002630 <HAL_Delay>
		  LoRa_transmit(&myLoRa, &Alarm_set, sizeof(Alarm_set), 500);
 80016e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016e4:	2201      	movs	r2, #1
 80016e6:	4915      	ldr	r1, [pc, #84]	; (800173c <main+0x154>)
 80016e8:	480e      	ldr	r0, [pc, #56]	; (8001724 <main+0x13c>)
 80016ea:	f7ff fe12 	bl	8001312 <LoRa_transmit>
		  LoRa_startReceiving(&myLoRa);
 80016ee:	480d      	ldr	r0, [pc, #52]	; (8001724 <main+0x13c>)
 80016f0:	f7ff fe67 	bl	80013c2 <LoRa_startReceiving>
		  while(Received_Data[0] != 0xB0) //0xDD
 80016f4:	bf00      	nop
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <main+0x14c>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2bb0      	cmp	r3, #176	; 0xb0
 80016fc:	d1fb      	bne.n	80016f6 <main+0x10e>
		  {

		  }
		  MX_RTC_Init();
 80016fe:	f000 f8ad 	bl	800185c <MX_RTC_Init>
 8001702:	e7cc      	b.n	800169e <main+0xb6>
	  }
	  else
	  {
		  switch (control_mode)
 8001704:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <main+0x158>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d002      	beq.n	8001712 <main+0x12a>
 800170c:	2b01      	cmp	r3, #1
 800170e:	d003      	beq.n	8001718 <main+0x130>
				  Fuzzilization_Data();
				  Fuzzy_Check_Relay_Status();
				  break;

		      default:
		    	  break;
 8001710:	e007      	b.n	8001722 <main+0x13a>
		          Relay_Change_State();
 8001712:	f000 f9e9 	bl	8001ae8 <Relay_Change_State>
		          break;
 8001716:	e004      	b.n	8001722 <main+0x13a>
				  Fuzzilization_Data();
 8001718:	f000 fb06 	bl	8001d28 <Fuzzilization_Data>
				  Fuzzy_Check_Relay_Status();
 800171c:	f000 fb66 	bl	8001dec <Fuzzy_Check_Relay_Status>
				  break;
 8001720:	bf00      	nop
	  Send_Relay_Mode_Status();// Hàm này chỉ được gọi một lần khi RTC wakeup mỗi 12s
 8001722:	e7bc      	b.n	800169e <main+0xb6>
 8001724:	2000002c 	.word	0x2000002c
 8001728:	40010c00 	.word	0x40010c00
 800172c:	200000f8 	.word	0x200000f8
 8001730:	20000058 	.word	0x20000058
 8001734:	2000006c 	.word	0x2000006c
 8001738:	40010800 	.word	0x40010800
 800173c:	20000000 	.word	0x20000000
 8001740:	2000008c 	.word	0x2000008c

08001744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b094      	sub	sp, #80	; 0x50
 8001748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800174e:	2228      	movs	r2, #40	; 0x28
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f003 fd0f 	bl	8005176 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001774:	2309      	movs	r3, #9
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001778:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800177e:	2300      	movs	r3, #0
 8001780:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001782:	2301      	movs	r3, #1
 8001784:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001786:	2301      	movs	r3, #1
 8001788:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800178a:	2302      	movs	r3, #2
 800178c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800178e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001792:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001794:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001798:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800179e:	4618      	mov	r0, r3
 80017a0:	f001 fb94 	bl	8002ecc <HAL_RCC_OscConfig>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80017aa:	f000 fd8d 	bl	80022c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ae:	230f      	movs	r3, #15
 80017b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b2:	2302      	movs	r3, #2
 80017b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	2102      	movs	r1, #2
 80017ca:	4618      	mov	r0, r3
 80017cc:	f001 fe00 	bl	80033d0 <HAL_RCC_ClockConfig>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80017d6:	f000 fd77 	bl	80022c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017da:	2301      	movs	r3, #1
 80017dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80017de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017e2:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	4618      	mov	r0, r3
 80017e8:	f001 ff80 	bl	80036ec <HAL_RCCEx_PeriphCLKConfig>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80017f2:	f000 fd69 	bl	80022c8 <Error_Handler>
  }
}
 80017f6:	bf00      	nop
 80017f8:	3750      	adds	r7, #80	; 0x50
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <MX_I2C1_Init+0x50>)
 8001806:	4a13      	ldr	r2, [pc, #76]	; (8001854 <MX_I2C1_Init+0x54>)
 8001808:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <MX_I2C1_Init+0x50>)
 800180c:	4a12      	ldr	r2, [pc, #72]	; (8001858 <MX_I2C1_Init+0x58>)
 800180e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <MX_I2C1_Init+0x50>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <MX_I2C1_Init+0x50>)
 8001818:	2200      	movs	r2, #0
 800181a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <MX_I2C1_Init+0x50>)
 800181e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001822:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <MX_I2C1_Init+0x50>)
 8001826:	2200      	movs	r2, #0
 8001828:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_I2C1_Init+0x50>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <MX_I2C1_Init+0x50>)
 8001832:	2200      	movs	r2, #0
 8001834:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <MX_I2C1_Init+0x50>)
 8001838:	2200      	movs	r2, #0
 800183a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800183c:	4804      	ldr	r0, [pc, #16]	; (8001850 <MX_I2C1_Init+0x50>)
 800183e:	f001 f9f5 	bl	8002c2c <HAL_I2C_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001848:	f000 fd3e 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000090 	.word	0x20000090
 8001854:	40005400 	.word	0x40005400
 8001858:	00061a80 	.word	0x00061a80

0800185c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001862:	f107 030c 	add.w	r3, r7, #12
 8001866:	2100      	movs	r1, #0
 8001868:	460a      	mov	r2, r1
 800186a:	801a      	strh	r2, [r3, #0]
 800186c:	460a      	mov	r2, r1
 800186e:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8001874:	463b      	mov	r3, r7
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800187c:	4b27      	ldr	r3, [pc, #156]	; (800191c <MX_RTC_Init+0xc0>)
 800187e:	4a28      	ldr	r2, [pc, #160]	; (8001920 <MX_RTC_Init+0xc4>)
 8001880:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001882:	4b26      	ldr	r3, [pc, #152]	; (800191c <MX_RTC_Init+0xc0>)
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800188a:	4b24      	ldr	r3, [pc, #144]	; (800191c <MX_RTC_Init+0xc0>)
 800188c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001890:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001892:	4822      	ldr	r0, [pc, #136]	; (800191c <MX_RTC_Init+0xc0>)
 8001894:	f002 f896 	bl	80039c4 <HAL_RTC_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800189e:	f000 fd13 	bl	80022c8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	2201      	movs	r2, #1
 80018b4:	4619      	mov	r1, r3
 80018b6:	4819      	ldr	r0, [pc, #100]	; (800191c <MX_RTC_Init+0xc0>)
 80018b8:	f002 f910 	bl	8003adc <HAL_RTC_SetTime>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 80018c2:	f000 fd01 	bl	80022c8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80018c6:	2301      	movs	r3, #1
 80018c8:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80018ca:	2301      	movs	r3, #1
 80018cc:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 80018ce:	2301      	movs	r3, #1
 80018d0:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80018d6:	f107 0308 	add.w	r3, r7, #8
 80018da:	2201      	movs	r2, #1
 80018dc:	4619      	mov	r1, r3
 80018de:	480f      	ldr	r0, [pc, #60]	; (800191c <MX_RTC_Init+0xc0>)
 80018e0:	f002 fa6c 	bl	8003dbc <HAL_RTC_SetDate>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80018ea:	f000 fced 	bl	80022c8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x12;
 80018f6:	2312      	movs	r3, #18
 80018f8:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80018fe:	463b      	mov	r3, r7
 8001900:	2201      	movs	r2, #1
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_RTC_Init+0xc0>)
 8001906:	f002 fb0f 	bl	8003f28 <HAL_RTC_SetAlarm_IT>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8001910:	f000 fcda 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200000e4 	.word	0x200000e4
 8001920:	40002800 	.word	0x40002800

08001924 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001928:	4b17      	ldr	r3, [pc, #92]	; (8001988 <MX_SPI1_Init+0x64>)
 800192a:	4a18      	ldr	r2, [pc, #96]	; (800198c <MX_SPI1_Init+0x68>)
 800192c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800192e:	4b16      	ldr	r3, [pc, #88]	; (8001988 <MX_SPI1_Init+0x64>)
 8001930:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001934:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <MX_SPI1_Init+0x64>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <MX_SPI1_Init+0x64>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <MX_SPI1_Init+0x64>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <MX_SPI1_Init+0x64>)
 800194a:	2200      	movs	r2, #0
 800194c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_SPI1_Init+0x64>)
 8001950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001954:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <MX_SPI1_Init+0x64>)
 8001958:	2210      	movs	r2, #16
 800195a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800195c:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <MX_SPI1_Init+0x64>)
 800195e:	2200      	movs	r2, #0
 8001960:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <MX_SPI1_Init+0x64>)
 8001964:	2200      	movs	r2, #0
 8001966:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <MX_SPI1_Init+0x64>)
 800196a:	2200      	movs	r2, #0
 800196c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_SPI1_Init+0x64>)
 8001970:	220a      	movs	r2, #10
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001974:	4804      	ldr	r0, [pc, #16]	; (8001988 <MX_SPI1_Init+0x64>)
 8001976:	f002 fe5b 	bl	8004630 <HAL_SPI_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001980:	f000 fca2 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200000f8 	.word	0x200000f8
 800198c:	40013000 	.word	0x40013000

08001990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001996:	f107 0310 	add.w	r3, r7, #16
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a4:	4b3e      	ldr	r3, [pc, #248]	; (8001aa0 <MX_GPIO_Init+0x110>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	4a3d      	ldr	r2, [pc, #244]	; (8001aa0 <MX_GPIO_Init+0x110>)
 80019aa:	f043 0310 	orr.w	r3, r3, #16
 80019ae:	6193      	str	r3, [r2, #24]
 80019b0:	4b3b      	ldr	r3, [pc, #236]	; (8001aa0 <MX_GPIO_Init+0x110>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019bc:	4b38      	ldr	r3, [pc, #224]	; (8001aa0 <MX_GPIO_Init+0x110>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a37      	ldr	r2, [pc, #220]	; (8001aa0 <MX_GPIO_Init+0x110>)
 80019c2:	f043 0320 	orr.w	r3, r3, #32
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	4b35      	ldr	r3, [pc, #212]	; (8001aa0 <MX_GPIO_Init+0x110>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f003 0320 	and.w	r3, r3, #32
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b32      	ldr	r3, [pc, #200]	; (8001aa0 <MX_GPIO_Init+0x110>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a31      	ldr	r2, [pc, #196]	; (8001aa0 <MX_GPIO_Init+0x110>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <MX_GPIO_Init+0x110>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ec:	4b2c      	ldr	r3, [pc, #176]	; (8001aa0 <MX_GPIO_Init+0x110>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a2b      	ldr	r2, [pc, #172]	; (8001aa0 <MX_GPIO_Init+0x110>)
 80019f2:	f043 0308 	orr.w	r3, r3, #8
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b29      	ldr	r3, [pc, #164]	; (8001aa0 <MX_GPIO_Init+0x110>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8001a04:	2201      	movs	r2, #1
 8001a06:	2103      	movs	r1, #3
 8001a08:	4826      	ldr	r0, [pc, #152]	; (8001aa4 <MX_GPIO_Init+0x114>)
 8001a0a:	f001 f8de 	bl	8002bca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, light_relay_Pin|water_relay_Pin|fan_relay_Pin, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8001a14:	4824      	ldr	r0, [pc, #144]	; (8001aa8 <MX_GPIO_Init+0x118>)
 8001a16:	f001 f8d8 	bl	8002bca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NSS_Pin RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2302      	movs	r3, #2
 8001a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2a:	f107 0310 	add.w	r3, r7, #16
 8001a2e:	4619      	mov	r1, r3
 8001a30:	481c      	ldr	r0, [pc, #112]	; (8001aa4 <MX_GPIO_Init+0x114>)
 8001a32:	f000 ff2f 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <MX_GPIO_Init+0x11c>)
 8001a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4816      	ldr	r0, [pc, #88]	; (8001aa4 <MX_GPIO_Init+0x114>)
 8001a4c:	f000 ff22 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pins : light_relay_Pin water_relay_Pin fan_relay_Pin */
  GPIO_InitStruct.Pin = light_relay_Pin|water_relay_Pin|fan_relay_Pin;
 8001a50:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f107 0310 	add.w	r3, r7, #16
 8001a66:	4619      	mov	r1, r3
 8001a68:	480f      	ldr	r0, [pc, #60]	; (8001aa8 <MX_GPIO_Init+0x118>)
 8001a6a:	f000 ff13 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pins : light_sw_Pin water_sw_Pin fan_sw_Pin */
  GPIO_InitStruct.Pin = light_sw_Pin|water_sw_Pin|fan_sw_Pin;
 8001a6e:	2338      	movs	r3, #56	; 0x38
 8001a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4808      	ldr	r0, [pc, #32]	; (8001aa4 <MX_GPIO_Init+0x114>)
 8001a82:	f000 ff07 	bl	8002894 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2028      	movs	r0, #40	; 0x28
 8001a8c:	f000 fecb 	bl	8002826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a90:	2028      	movs	r0, #40	; 0x28
 8001a92:	f000 fee4 	bl	800285e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a96:	bf00      	nop
 8001a98:	3720      	adds	r7, #32
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40010c00 	.word	0x40010c00
 8001aa8:	40010800 	.word	0x40010800
 8001aac:	10110000 	.word	0x10110000

08001ab0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//THIS WAKE UP TRIGGERED BY GPIO DIO0, HAPPENS WHEN A DATA RECEIVED BY SX1278 MODULE
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == DIO0_Pin)
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac0:	d109      	bne.n	8001ad6 <HAL_GPIO_EXTI_Callback+0x26>
    {
    	LoRa_receive(&myLoRa, Received_Data, sizeof(Received_Data));
 8001ac2:	2210      	movs	r2, #16
 8001ac4:	4906      	ldr	r1, [pc, #24]	; (8001ae0 <HAL_GPIO_EXTI_Callback+0x30>)
 8001ac6:	4807      	ldr	r0, [pc, #28]	; (8001ae4 <HAL_GPIO_EXTI_Callback+0x34>)
 8001ac8:	f7ff fc87 	bl	80013da <LoRa_receive>
    	Set_Control_Mode_From_Command(Received_Data[1]);
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <HAL_GPIO_EXTI_Callback+0x30>)
 8001ace:	785b      	ldrb	r3, [r3, #1]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 f85b 	bl	8001b8c <Set_Control_Mode_From_Command>
    }
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	2000006c 	.word	0x2000006c
 8001ae4:	2000002c 	.word	0x2000002c

08001ae8 <Relay_Change_State>:


#if new_function == 1
static void Relay_Change_State(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
    if (Received_Data[0] == 0xA3 && Received_Data[1] == 0xAA)
 8001aec:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <Relay_Change_State+0x98>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2ba3      	cmp	r3, #163	; 0xa3
 8001af2:	d143      	bne.n	8001b7c <Relay_Change_State+0x94>
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <Relay_Change_State+0x98>)
 8001af6:	785b      	ldrb	r3, [r3, #1]
 8001af8:	2baa      	cmp	r3, #170	; 0xaa
 8001afa:	d13f      	bne.n	8001b7c <Relay_Change_State+0x94>
    {
        // Extract relay state from the second byte
        relay_state = Received_Data[2];
 8001afc:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <Relay_Change_State+0x98>)
 8001afe:	789a      	ldrb	r2, [r3, #2]
 8001b00:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <Relay_Change_State+0x9c>)
 8001b02:	701a      	strb	r2, [r3, #0]

        // Control the relays based on the relay state
        if (relay_state & 0x01)  // Check if bit 0 (water pump) is set
 8001b04:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <Relay_Change_State+0x9c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d006      	beq.n	8001b20 <Relay_Change_State+0x38>
        {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); // Turn on water pump
 8001b12:	2201      	movs	r2, #1
 8001b14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b18:	481b      	ldr	r0, [pc, #108]	; (8001b88 <Relay_Change_State+0xa0>)
 8001b1a:	f001 f856 	bl	8002bca <HAL_GPIO_WritePin>
 8001b1e:	e005      	b.n	8001b2c <Relay_Change_State+0x44>
        }
        else
        {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); // Turn off water pump
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b26:	4818      	ldr	r0, [pc, #96]	; (8001b88 <Relay_Change_State+0xa0>)
 8001b28:	f001 f84f 	bl	8002bca <HAL_GPIO_WritePin>
        }

        if (relay_state & 0x02)  // Check if bit 1 (light) is set
 8001b2c:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <Relay_Change_State+0x9c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d006      	beq.n	8001b48 <Relay_Change_State+0x60>
        {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); // Turn on light
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b40:	4811      	ldr	r0, [pc, #68]	; (8001b88 <Relay_Change_State+0xa0>)
 8001b42:	f001 f842 	bl	8002bca <HAL_GPIO_WritePin>
 8001b46:	e005      	b.n	8001b54 <Relay_Change_State+0x6c>
        }
        else
        {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); // Turn off light
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b4e:	480e      	ldr	r0, [pc, #56]	; (8001b88 <Relay_Change_State+0xa0>)
 8001b50:	f001 f83b 	bl	8002bca <HAL_GPIO_WritePin>
        }

        if (relay_state & 0x04)  // Check if bit 2 (fan) is set
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <Relay_Change_State+0x9c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d006      	beq.n	8001b70 <Relay_Change_State+0x88>
        {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // Turn on fan
 8001b62:	2201      	movs	r2, #1
 8001b64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b68:	4807      	ldr	r0, [pc, #28]	; (8001b88 <Relay_Change_State+0xa0>)
 8001b6a:	f001 f82e 	bl	8002bca <HAL_GPIO_WritePin>
        else
        {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Turn off fan
        }
    }
}
 8001b6e:	e005      	b.n	8001b7c <Relay_Change_State+0x94>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Turn off fan
 8001b70:	2200      	movs	r2, #0
 8001b72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b76:	4804      	ldr	r0, [pc, #16]	; (8001b88 <Relay_Change_State+0xa0>)
 8001b78:	f001 f827 	bl	8002bca <HAL_GPIO_WritePin>
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	2000006c 	.word	0x2000006c
 8001b84:	2000007c 	.word	0x2000007c
 8001b88:	40010800 	.word	0x40010800

08001b8c <Set_Control_Mode_From_Command>:

void Set_Control_Mode_From_Command(uint8_t cmd)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
    switch(cmd)
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	2baa      	cmp	r3, #170	; 0xaa
 8001b9a:	d002      	beq.n	8001ba2 <Set_Control_Mode_From_Command+0x16>
 8001b9c:	2bbb      	cmp	r3, #187	; 0xbb
 8001b9e:	d004      	beq.n	8001baa <Set_Control_Mode_From_Command+0x1e>
        case CMD_AUTOMATE:
            control_mode = MODE_AUTOMATE;
            break;
        default:
            // Xử lý nếu cần: giữ nguyên mode cũ hoặc báo lỗi
            break;
 8001ba0:	e007      	b.n	8001bb2 <Set_Control_Mode_From_Command+0x26>
            control_mode = MODE_MANUAL;
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <Set_Control_Mode_From_Command+0x30>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
            break;
 8001ba8:	e003      	b.n	8001bb2 <Set_Control_Mode_From_Command+0x26>
            control_mode = MODE_AUTOMATE;
 8001baa:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <Set_Control_Mode_From_Command+0x30>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
            break;
 8001bb0:	bf00      	nop
    }
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	2000008c 	.word	0x2000008c

08001bc0 <Send_Relay_Mode_Status>:


void Send_Relay_Mode_Status(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
	  if(current_state_flag == 1)
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <Send_Relay_Mode_Status+0x80>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d133      	bne.n	8001c38 <Send_Relay_Mode_Status+0x78>
	  {
		  //transmit back to gateway
		  Transmit_Status_Data[0] = 0xA3; // ID byte
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <Send_Relay_Mode_Status+0x84>)
 8001bd2:	22a3      	movs	r2, #163	; 0xa3
 8001bd4:	701a      	strb	r2, [r3, #0]
		  uint8_t pa9 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8001bd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bda:	481b      	ldr	r0, [pc, #108]	; (8001c48 <Send_Relay_Mode_Status+0x88>)
 8001bdc:	f000 ffde 	bl	8002b9c <HAL_GPIO_ReadPin>
 8001be0:	4603      	mov	r3, r0
 8001be2:	71fb      	strb	r3, [r7, #7]
		  uint8_t pa10 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001be4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001be8:	4817      	ldr	r0, [pc, #92]	; (8001c48 <Send_Relay_Mode_Status+0x88>)
 8001bea:	f000 ffd7 	bl	8002b9c <HAL_GPIO_ReadPin>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71bb      	strb	r3, [r7, #6]
		  uint8_t pa11 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 8001bf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bf6:	4814      	ldr	r0, [pc, #80]	; (8001c48 <Send_Relay_Mode_Status+0x88>)
 8001bf8:	f000 ffd0 	bl	8002b9c <HAL_GPIO_ReadPin>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	717b      	strb	r3, [r7, #5]

		  // Gộp trạng thái lại thành 1 byte:
		  // Ví dụ: PA11 -> bit 2, PA10 -> bit 1, PA9 -> bit 0
		  Transmit_Status_Data[1] = (pa11 << 2) | (pa10 << 1) | pa9;
 8001c00:	797b      	ldrb	r3, [r7, #5]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	b25a      	sxtb	r2, r3
 8001c06:	79bb      	ldrb	r3, [r7, #6]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	b25b      	sxtb	r3, r3
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	b25a      	sxtb	r2, r3
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	b25b      	sxtb	r3, r3
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <Send_Relay_Mode_Status+0x84>)
 8001c1c:	705a      	strb	r2, [r3, #1]
		  LoRa_transmit(&myLoRa, Transmit_Status_Data, sizeof(Transmit_Status_Data), 500);
 8001c1e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c22:	2202      	movs	r2, #2
 8001c24:	4907      	ldr	r1, [pc, #28]	; (8001c44 <Send_Relay_Mode_Status+0x84>)
 8001c26:	4809      	ldr	r0, [pc, #36]	; (8001c4c <Send_Relay_Mode_Status+0x8c>)
 8001c28:	f7ff fb73 	bl	8001312 <LoRa_transmit>
		  LoRa_startReceiving(&myLoRa);
 8001c2c:	4807      	ldr	r0, [pc, #28]	; (8001c4c <Send_Relay_Mode_Status+0x8c>)
 8001c2e:	f7ff fbc8 	bl	80013c2 <LoRa_startReceiving>
		  current_state_flag = 0;
 8001c32:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <Send_Relay_Mode_Status+0x80>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
		  //return to receive state
	  }
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	2000007d 	.word	0x2000007d
 8001c44:	20000080 	.word	0x20000080
 8001c48:	40010800 	.word	0x40010800
 8001c4c:	2000002c 	.word	0x2000002c

08001c50 <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef sTime = {0};
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	460a      	mov	r2, r1
 8001c60:	801a      	strh	r2, [r3, #0]
 8001c62:	460a      	mov	r2, r1
 8001c64:	709a      	strb	r2, [r3, #2]
    RTC_AlarmTypeDef sAlarm = {0};
 8001c66:	f107 0308 	add.w	r3, r7, #8
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]

    // Going to send back current state
    current_state_flag = 1;
 8001c70:	4b29      	ldr	r3, [pc, #164]	; (8001d18 <HAL_RTC_AlarmAEventCallback+0xc8>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	701a      	strb	r2, [r3, #0]

    // Get current time
    HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);  // Chuyển sang RTC_FORMAT_BIN để dễ tính toán
 8001c76:	f107 0310 	add.w	r3, r7, #16
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f001 ffc4 	bl	8003c0c <HAL_RTC_GetTime>

    // Adding 10s to wake up sequence, because first setting of the alarm is 10s so this node will wake up at 10s 20s 30s...
    uint32_t total_seconds = sTime.Hours * 3600 + sTime.Minutes * 60 + sTime.Seconds + 10;
 8001c84:	7c3b      	ldrb	r3, [r7, #16]
 8001c86:	461a      	mov	r2, r3
 8001c88:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001c8c:	fb03 f202 	mul.w	r2, r3, r2
 8001c90:	7c7b      	ldrb	r3, [r7, #17]
 8001c92:	4619      	mov	r1, r3
 8001c94:	460b      	mov	r3, r1
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	1a5b      	subs	r3, r3, r1
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	7cba      	ldrb	r2, [r7, #18]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	330a      	adds	r3, #10
 8001ca4:	617b      	str	r3, [r7, #20]
    sAlarm.AlarmTime.Hours   = (total_seconds / 3600) % 24;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <HAL_RTC_AlarmAEventCallback+0xcc>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	0ad9      	lsrs	r1, r3, #11
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <HAL_RTC_AlarmAEventCallback+0xd0>)
 8001cb2:	fba3 2301 	umull	r2, r3, r3, r1
 8001cb6:	091a      	lsrs	r2, r3, #4
 8001cb8:	4613      	mov	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	1aca      	subs	r2, r1, r3
 8001cc2:	b2d3      	uxtb	r3, r2
 8001cc4:	723b      	strb	r3, [r7, #8]
    sAlarm.AlarmTime.Minutes = (total_seconds / 60) % 60;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <HAL_RTC_AlarmAEventCallback+0xd4>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	0959      	lsrs	r1, r3, #5
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <HAL_RTC_AlarmAEventCallback+0xd4>)
 8001cd2:	fba3 2301 	umull	r2, r3, r3, r1
 8001cd6:	095a      	lsrs	r2, r3, #5
 8001cd8:	4613      	mov	r3, r2
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	1a9b      	subs	r3, r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	1aca      	subs	r2, r1, r3
 8001ce2:	b2d3      	uxtb	r3, r2
 8001ce4:	727b      	strb	r3, [r7, #9]
    sAlarm.AlarmTime.Seconds = total_seconds % 60;
 8001ce6:	6979      	ldr	r1, [r7, #20]
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <HAL_RTC_AlarmAEventCallback+0xd4>)
 8001cea:	fba3 2301 	umull	r2, r3, r3, r1
 8001cee:	095a      	lsrs	r2, r3, #5
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	1aca      	subs	r2, r1, r3
 8001cfa:	b2d3      	uxtb	r3, r2
 8001cfc:	72bb      	strb	r3, [r7, #10]
    sAlarm.Alarm = RTC_ALARM_A;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
    // Re-set alarm with updated wakeup time
    HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN);  // Sử dụng RTC_FORMAT_BIN
 8001d02:	f107 0308 	add.w	r3, r7, #8
 8001d06:	2200      	movs	r2, #0
 8001d08:	4619      	mov	r1, r3
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f002 f90c 	bl	8003f28 <HAL_RTC_SetAlarm_IT>
}
 8001d10:	bf00      	nop
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	2000007d 	.word	0x2000007d
 8001d1c:	91a2b3c5 	.word	0x91a2b3c5
 8001d20:	aaaaaaab 	.word	0xaaaaaaab
 8001d24:	88888889 	.word	0x88888889

08001d28 <Fuzzilization_Data>:



//----------------------------------------------------------------------------FUZZY CONTROL HANDLE FUNCTIONS-----------------------------------------------------------------------------------------------------------//
static void Fuzzilization_Data(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
	if((Received_Data[2] == 0x31) && (Received_Data[3] == 0x32))
 8001d2c:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <Fuzzilization_Data+0xbc>)
 8001d2e:	789b      	ldrb	r3, [r3, #2]
 8001d30:	2b31      	cmp	r3, #49	; 0x31
 8001d32:	d154      	bne.n	8001dde <Fuzzilization_Data+0xb6>
 8001d34:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <Fuzzilization_Data+0xbc>)
 8001d36:	78db      	ldrb	r3, [r3, #3]
 8001d38:	2b32      	cmp	r3, #50	; 0x32
 8001d3a:	d150      	bne.n	8001dde <Fuzzilization_Data+0xb6>
	{
		sensorData.Humidity    = Received_Data[5] | (Received_Data[4] << 8);
 8001d3c:	4b29      	ldr	r3, [pc, #164]	; (8001de4 <Fuzzilization_Data+0xbc>)
 8001d3e:	795b      	ldrb	r3, [r3, #5]
 8001d40:	b21a      	sxth	r2, r3
 8001d42:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <Fuzzilization_Data+0xbc>)
 8001d44:	791b      	ldrb	r3, [r3, #4]
 8001d46:	021b      	lsls	r3, r3, #8
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	b21b      	sxth	r3, r3
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <Fuzzilization_Data+0xc0>)
 8001d52:	805a      	strh	r2, [r3, #2]
		sensorData.Temperature = Received_Data[7] | (Received_Data[6] << 8);
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <Fuzzilization_Data+0xbc>)
 8001d56:	79db      	ldrb	r3, [r3, #7]
 8001d58:	b21a      	sxth	r2, r3
 8001d5a:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <Fuzzilization_Data+0xbc>)
 8001d5c:	799b      	ldrb	r3, [r3, #6]
 8001d5e:	021b      	lsls	r3, r3, #8
 8001d60:	b21b      	sxth	r3, r3
 8001d62:	4313      	orrs	r3, r2
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <Fuzzilization_Data+0xc0>)
 8001d6a:	809a      	strh	r2, [r3, #4]
		sensorData.LUX         = Received_Data[9] | (Received_Data[8] << 8);
 8001d6c:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <Fuzzilization_Data+0xbc>)
 8001d6e:	7a5b      	ldrb	r3, [r3, #9]
 8001d70:	b21a      	sxth	r2, r3
 8001d72:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <Fuzzilization_Data+0xbc>)
 8001d74:	7a1b      	ldrb	r3, [r3, #8]
 8001d76:	021b      	lsls	r3, r3, #8
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <Fuzzilization_Data+0xc0>)
 8001d82:	80da      	strh	r2, [r3, #6]
		sensorData.Data_MQ135  = Received_Data[11] | (Received_Data[10] << 8);
 8001d84:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <Fuzzilization_Data+0xbc>)
 8001d86:	7adb      	ldrb	r3, [r3, #11]
 8001d88:	b21a      	sxth	r2, r3
 8001d8a:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <Fuzzilization_Data+0xbc>)
 8001d8c:	7a9b      	ldrb	r3, [r3, #10]
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	b21b      	sxth	r3, r3
 8001d92:	4313      	orrs	r3, r2
 8001d94:	b21b      	sxth	r3, r3
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <Fuzzilization_Data+0xc0>)
 8001d9a:	811a      	strh	r2, [r3, #8]
	    sensorData.soil_Temp = Received_Data[13] | (Received_Data[12] << 8);
 8001d9c:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <Fuzzilization_Data+0xbc>)
 8001d9e:	7b5b      	ldrb	r3, [r3, #13]
 8001da0:	b21a      	sxth	r2, r3
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <Fuzzilization_Data+0xbc>)
 8001da4:	7b1b      	ldrb	r3, [r3, #12]
 8001da6:	021b      	lsls	r3, r3, #8
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	4313      	orrs	r3, r2
 8001dac:	b21b      	sxth	r3, r3
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <Fuzzilization_Data+0xc0>)
 8001db2:	815a      	strh	r2, [r3, #10]
	    sensorData.soil_Moisture = Received_Data[15] | (Received_Data[14] << 8);
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <Fuzzilization_Data+0xbc>)
 8001db6:	7bdb      	ldrb	r3, [r3, #15]
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <Fuzzilization_Data+0xbc>)
 8001dbc:	7b9b      	ldrb	r3, [r3, #14]
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	b21b      	sxth	r3, r3
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <Fuzzilization_Data+0xc0>)
 8001dca:	819a      	strh	r2, [r3, #12]

	    Fuzzy_Fan_Control();
 8001dcc:	f000 f850 	bl	8001e70 <Fuzzy_Fan_Control>
	    Fuzzy_Pump_Control();
 8001dd0:	f000 f8d6 	bl	8001f80 <Fuzzy_Pump_Control>
	    Light_Control(sensorData.LUX);
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <Fuzzilization_Data+0xc0>)
 8001dd6:	88db      	ldrh	r3, [r3, #6]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 f82d 	bl	8001e38 <Light_Control>
	}
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2000006c 	.word	0x2000006c
 8001de8:	2000005c 	.word	0x2000005c

08001dec <Fuzzy_Check_Relay_Status>:

void Fuzzy_Check_Relay_Status(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
    if (HAL_GetTick() >= relayPumpEndTime)
 8001df0:	f000 fc14 	bl	800261c <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <Fuzzy_Check_Relay_Status+0x40>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d306      	bcc.n	8001e0c <Fuzzy_Check_Relay_Status+0x20>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);  // Relay OFF
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e04:	480a      	ldr	r0, [pc, #40]	; (8001e30 <Fuzzy_Check_Relay_Status+0x44>)
 8001e06:	f000 fee0 	bl	8002bca <HAL_GPIO_WritePin>

    else if (HAL_GetTick() >= relayFanEndTime)
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);  // Relay OFF
    }
}
 8001e0a:	e00c      	b.n	8001e26 <Fuzzy_Check_Relay_Status+0x3a>
    else if (HAL_GetTick() >= relayFanEndTime)
 8001e0c:	f000 fc06 	bl	800261c <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <Fuzzy_Check_Relay_Status+0x48>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d305      	bcc.n	8001e26 <Fuzzy_Check_Relay_Status+0x3a>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);  // Relay OFF
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e20:	4803      	ldr	r0, [pc, #12]	; (8001e30 <Fuzzy_Check_Relay_Status+0x44>)
 8001e22:	f000 fed2 	bl	8002bca <HAL_GPIO_WritePin>
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000088 	.word	0x20000088
 8001e30:	40010800 	.word	0x40010800
 8001e34:	20000084 	.word	0x20000084

08001e38 <Light_Control>:

void Light_Control(uint16_t LUX)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	80fb      	strh	r3, [r7, #6]
    if (LUX <= 2000)
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e48:	d806      	bhi.n	8001e58 <Light_Control+0x20>
    {
        // TurnOff_Light();
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); // Turn on light
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e50:	4806      	ldr	r0, [pc, #24]	; (8001e6c <Light_Control+0x34>)
 8001e52:	f000 feba 	bl	8002bca <HAL_GPIO_WritePin>
    else
    {
        // TurnOn_Light();
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); // Turn off light
    }
}
 8001e56:	e005      	b.n	8001e64 <Light_Control+0x2c>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); // Turn off light
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e5e:	4803      	ldr	r0, [pc, #12]	; (8001e6c <Light_Control+0x34>)
 8001e60:	f000 feb3 	bl	8002bca <HAL_GPIO_WritePin>
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40010800 	.word	0x40010800

08001e70 <Fuzzy_Fan_Control>:

void Fuzzy_Fan_Control(void)
{
 8001e70:	b5b0      	push	{r4, r5, r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
	uint8_t seconds;
	float HUM, MQ135, TEMP;
	HUM = Critical_High_Hum(sensorData.Humidity) * 10;
 8001e76:	4b3c      	ldr	r3, [pc, #240]	; (8001f68 <Fuzzy_Fan_Control+0xf8>)
 8001e78:	885b      	ldrh	r3, [r3, #2]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 f904 	bl	8002088 <Critical_High_Hum>
 8001e80:	4603      	mov	r3, r0
 8001e82:	493a      	ldr	r1, [pc, #232]	; (8001f6c <Fuzzy_Fan_Control+0xfc>)
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe f963 	bl	8000150 <__aeabi_fmul>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	60fb      	str	r3, [r7, #12]
	MQ135 = Critical_High_MQ135(sensorData.Data_MQ135) * 10;
 8001e8e:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <Fuzzy_Fan_Control+0xf8>)
 8001e90:	891b      	ldrh	r3, [r3, #8]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f9f2 	bl	800227c <Critical_High_MQ135>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	4934      	ldr	r1, [pc, #208]	; (8001f6c <Fuzzy_Fan_Control+0xfc>)
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe f957 	bl	8000150 <__aeabi_fmul>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	60bb      	str	r3, [r7, #8]
	TEMP = Critical_High_Temp(sensorData.Temperature) * 10;
 8001ea6:	4b30      	ldr	r3, [pc, #192]	; (8001f68 <Fuzzy_Fan_Control+0xf8>)
 8001ea8:	889b      	ldrh	r3, [r3, #4]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f962 	bl	8002174 <Critical_High_Temp>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	492e      	ldr	r1, [pc, #184]	; (8001f6c <Fuzzy_Fan_Control+0xfc>)
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe f94b 	bl	8000150 <__aeabi_fmul>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	607b      	str	r3, [r7, #4]
	seconds = (int)(0.2*HUM + 0.3*MQ135 + 0.5*TEMP);
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f7fe fb5e 	bl	8000580 <__aeabi_f2d>
 8001ec4:	a324      	add	r3, pc, #144	; (adr r3, 8001f58 <Fuzzy_Fan_Control+0xe8>)
 8001ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eca:	f7fe fbb1 	bl	8000630 <__aeabi_dmul>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4614      	mov	r4, r2
 8001ed4:	461d      	mov	r5, r3
 8001ed6:	68b8      	ldr	r0, [r7, #8]
 8001ed8:	f7fe fb52 	bl	8000580 <__aeabi_f2d>
 8001edc:	a320      	add	r3, pc, #128	; (adr r3, 8001f60 <Fuzzy_Fan_Control+0xf0>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	f7fe fba5 	bl	8000630 <__aeabi_dmul>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4620      	mov	r0, r4
 8001eec:	4629      	mov	r1, r5
 8001eee:	f7fe f9e9 	bl	80002c4 <__adddf3>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4614      	mov	r4, r2
 8001ef8:	461d      	mov	r5, r3
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe fb40 	bl	8000580 <__aeabi_f2d>
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <Fuzzy_Fan_Control+0x100>)
 8001f06:	f7fe fb93 	bl	8000630 <__aeabi_dmul>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4620      	mov	r0, r4
 8001f10:	4629      	mov	r1, r5
 8001f12:	f7fe f9d7 	bl	80002c4 <__adddf3>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f7fe fd99 	bl	8000a54 <__aeabi_d2iz>
 8001f22:	4603      	mov	r3, r0
 8001f24:	70fb      	strb	r3, [r7, #3]
    if (seconds > 0)
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d010      	beq.n	8001f4e <Fuzzy_Fan_Control+0xde>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);  // Relay ON
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f32:	4810      	ldr	r0, [pc, #64]	; (8001f74 <Fuzzy_Fan_Control+0x104>)
 8001f34:	f000 fe49 	bl	8002bca <HAL_GPIO_WritePin>
        relayFanEndTime = HAL_GetTick() + (seconds * 1000); // lưu thời gian tắt (ms)
 8001f38:	f000 fb70 	bl	800261c <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <Fuzzy_Fan_Control+0x108>)
 8001f4c:	6013      	str	r3, [r2, #0]
    }
}
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bdb0      	pop	{r4, r5, r7, pc}
 8001f56:	bf00      	nop
 8001f58:	9999999a 	.word	0x9999999a
 8001f5c:	3fc99999 	.word	0x3fc99999
 8001f60:	33333333 	.word	0x33333333
 8001f64:	3fd33333 	.word	0x3fd33333
 8001f68:	2000005c 	.word	0x2000005c
 8001f6c:	41200000 	.word	0x41200000
 8001f70:	3fe00000 	.word	0x3fe00000
 8001f74:	40010800 	.word	0x40010800
 8001f78:	20000084 	.word	0x20000084
 8001f7c:	00000000 	.word	0x00000000

08001f80 <Fuzzy_Pump_Control>:

void Fuzzy_Pump_Control(void)
{
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
	uint8_t seconds;
	float MOIS, TEMPSOIL, HUM;
	MOIS = Critical_Low_Moisture(sensorData.soil_Moisture) * 10;
 8001f86:	4b3c      	ldr	r3, [pc, #240]	; (8002078 <Fuzzy_Pump_Control+0xf8>)
 8001f88:	899b      	ldrh	r3, [r3, #12]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f92c 	bl	80021e8 <Critical_Low_Moisture>
 8001f90:	4603      	mov	r3, r0
 8001f92:	493a      	ldr	r1, [pc, #232]	; (800207c <Fuzzy_Pump_Control+0xfc>)
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe f8db 	bl	8000150 <__aeabi_fmul>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	60fb      	str	r3, [r7, #12]
	TEMPSOIL = Critical_High_TempSoil(sensorData.soil_Temp) * 10;
 8001f9e:	4b36      	ldr	r3, [pc, #216]	; (8002078 <Fuzzy_Pump_Control+0xf8>)
 8001fa0:	895b      	ldrh	r3, [r3, #10]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f946 	bl	8002234 <Critical_High_TempSoil>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	4934      	ldr	r1, [pc, #208]	; (800207c <Fuzzy_Pump_Control+0xfc>)
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe f8cf 	bl	8000150 <__aeabi_fmul>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	60bb      	str	r3, [r7, #8]
	HUM = Critical_Low_Hum(sensorData.Humidity) * 10;
 8001fb6:	4b30      	ldr	r3, [pc, #192]	; (8002078 <Fuzzy_Pump_Control+0xf8>)
 8001fb8:	885b      	ldrh	r3, [r3, #2]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f89e 	bl	80020fc <Critical_Low_Hum>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	492e      	ldr	r1, [pc, #184]	; (800207c <Fuzzy_Pump_Control+0xfc>)
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe f8c3 	bl	8000150 <__aeabi_fmul>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	607b      	str	r3, [r7, #4]
	seconds = (int)(0.2*HUM + 0.2*TEMPSOIL + 0.6*MOIS);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe fad6 	bl	8000580 <__aeabi_f2d>
 8001fd4:	a324      	add	r3, pc, #144	; (adr r3, 8002068 <Fuzzy_Pump_Control+0xe8>)
 8001fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fda:	f7fe fb29 	bl	8000630 <__aeabi_dmul>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4614      	mov	r4, r2
 8001fe4:	461d      	mov	r5, r3
 8001fe6:	68b8      	ldr	r0, [r7, #8]
 8001fe8:	f7fe faca 	bl	8000580 <__aeabi_f2d>
 8001fec:	a31e      	add	r3, pc, #120	; (adr r3, 8002068 <Fuzzy_Pump_Control+0xe8>)
 8001fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff2:	f7fe fb1d 	bl	8000630 <__aeabi_dmul>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	4629      	mov	r1, r5
 8001ffe:	f7fe f961 	bl	80002c4 <__adddf3>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4614      	mov	r4, r2
 8002008:	461d      	mov	r5, r3
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f7fe fab8 	bl	8000580 <__aeabi_f2d>
 8002010:	a317      	add	r3, pc, #92	; (adr r3, 8002070 <Fuzzy_Pump_Control+0xf0>)
 8002012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002016:	f7fe fb0b 	bl	8000630 <__aeabi_dmul>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4620      	mov	r0, r4
 8002020:	4629      	mov	r1, r5
 8002022:	f7fe f94f 	bl	80002c4 <__adddf3>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	f7fe fd11 	bl	8000a54 <__aeabi_d2iz>
 8002032:	4603      	mov	r3, r0
 8002034:	70fb      	strb	r3, [r7, #3]
    if (seconds > 0)
 8002036:	78fb      	ldrb	r3, [r7, #3]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d010      	beq.n	800205e <Fuzzy_Pump_Control+0xde>
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);  // Relay ON
 800203c:	2201      	movs	r2, #1
 800203e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002042:	480f      	ldr	r0, [pc, #60]	; (8002080 <Fuzzy_Pump_Control+0x100>)
 8002044:	f000 fdc1 	bl	8002bca <HAL_GPIO_WritePin>
        relayPumpEndTime = HAL_GetTick() + (seconds * 1000); // lưu thời gian tắt (ms)
 8002048:	f000 fae8 	bl	800261c <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	4413      	add	r3, r2
 800205a:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <Fuzzy_Pump_Control+0x104>)
 800205c:	6013      	str	r3, [r2, #0]
    }
}
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bdb0      	pop	{r4, r5, r7, pc}
 8002066:	bf00      	nop
 8002068:	9999999a 	.word	0x9999999a
 800206c:	3fc99999 	.word	0x3fc99999
 8002070:	33333333 	.word	0x33333333
 8002074:	3fe33333 	.word	0x3fe33333
 8002078:	2000005c 	.word	0x2000005c
 800207c:	41200000 	.word	0x41200000
 8002080:	40010800 	.word	0x40010800
 8002084:	20000088 	.word	0x20000088

08002088 <Critical_High_Hum>:



float Critical_High_Hum(uint16_t Hum)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	80fb      	strh	r3, [r7, #6]
	Hum = Hum / 10.0;
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fa61 	bl	800055c <__aeabi_i2d>
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <Critical_High_Hum+0x70>)
 80020a0:	f7fe fbf0 	bl	8000884 <__aeabi_ddiv>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	f7fe fcfa 	bl	8000aa4 <__aeabi_d2uiz>
 80020b0:	4603      	mov	r3, r0
 80020b2:	80fb      	strh	r3, [r7, #6]
    if (Hum < 85) return 0;
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	2b54      	cmp	r3, #84	; 0x54
 80020b8:	d802      	bhi.n	80020c0 <Critical_High_Hum+0x38>
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e016      	b.n	80020ee <Critical_High_Hum+0x66>
    else if (Hum >= 95) return 1;
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	2b5e      	cmp	r3, #94	; 0x5e
 80020c4:	d902      	bls.n	80020cc <Critical_High_Hum+0x44>
 80020c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80020ca:	e010      	b.n	80020ee <Critical_High_Hum+0x66>
    else return (Hum - 85) / 10.0;
 80020cc:	88fb      	ldrh	r3, [r7, #6]
 80020ce:	3b55      	subs	r3, #85	; 0x55
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fa43 	bl	800055c <__aeabi_i2d>
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <Critical_High_Hum+0x70>)
 80020dc:	f7fe fbd2 	bl	8000884 <__aeabi_ddiv>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f7fe fcfc 	bl	8000ae4 <__aeabi_d2f>
 80020ec:	4603      	mov	r3, r0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40240000 	.word	0x40240000

080020fc <Critical_Low_Hum>:
float Critical_Low_Hum(uint16_t Hum)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	80fb      	strh	r3, [r7, #6]
	Hum = Hum / 10.0;
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fa27 	bl	800055c <__aeabi_i2d>
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	4b16      	ldr	r3, [pc, #88]	; (800216c <Critical_Low_Hum+0x70>)
 8002114:	f7fe fbb6 	bl	8000884 <__aeabi_ddiv>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4610      	mov	r0, r2
 800211e:	4619      	mov	r1, r3
 8002120:	f7fe fcc0 	bl	8000aa4 <__aeabi_d2uiz>
 8002124:	4603      	mov	r3, r0
 8002126:	80fb      	strh	r3, [r7, #6]
    if (Hum >= 75) return 0;
 8002128:	88fb      	ldrh	r3, [r7, #6]
 800212a:	2b4a      	cmp	r3, #74	; 0x4a
 800212c:	d902      	bls.n	8002134 <Critical_Low_Hum+0x38>
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	e017      	b.n	8002164 <Critical_Low_Hum+0x68>
    else if (Hum <= 60) return 1;
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	2b3c      	cmp	r3, #60	; 0x3c
 8002138:	d802      	bhi.n	8002140 <Critical_Low_Hum+0x44>
 800213a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800213e:	e011      	b.n	8002164 <Critical_Low_Hum+0x68>
    else return (75 - Hum) / 15.0;
 8002140:	88fb      	ldrh	r3, [r7, #6]
 8002142:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe fa08 	bl	800055c <__aeabi_i2d>
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	4b07      	ldr	r3, [pc, #28]	; (8002170 <Critical_Low_Hum+0x74>)
 8002152:	f7fe fb97 	bl	8000884 <__aeabi_ddiv>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4610      	mov	r0, r2
 800215c:	4619      	mov	r1, r3
 800215e:	f7fe fcc1 	bl	8000ae4 <__aeabi_d2f>
 8002162:	4603      	mov	r3, r0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40240000 	.word	0x40240000
 8002170:	402e0000 	.word	0x402e0000

08002174 <Critical_High_Temp>:


float Critical_High_Temp(uint16_t Temp)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	80fb      	strh	r3, [r7, #6]
	Temp = Temp / 10.0;
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe f9eb 	bl	800055c <__aeabi_i2d>
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <Critical_High_Temp+0x70>)
 800218c:	f7fe fb7a 	bl	8000884 <__aeabi_ddiv>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	f7fe fc84 	bl	8000aa4 <__aeabi_d2uiz>
 800219c:	4603      	mov	r3, r0
 800219e:	80fb      	strh	r3, [r7, #6]
    if (Temp <= 30) return 0;
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	2b1e      	cmp	r3, #30
 80021a4:	d802      	bhi.n	80021ac <Critical_High_Temp+0x38>
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	e016      	b.n	80021da <Critical_High_Temp+0x66>
    else if (Temp >= 40) return 1;
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	2b27      	cmp	r3, #39	; 0x27
 80021b0:	d902      	bls.n	80021b8 <Critical_High_Temp+0x44>
 80021b2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80021b6:	e010      	b.n	80021da <Critical_High_Temp+0x66>
    else return (Temp - 30) / 10.0;
 80021b8:	88fb      	ldrh	r3, [r7, #6]
 80021ba:	3b1e      	subs	r3, #30
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe f9cd 	bl	800055c <__aeabi_i2d>
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <Critical_High_Temp+0x70>)
 80021c8:	f7fe fb5c 	bl	8000884 <__aeabi_ddiv>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4610      	mov	r0, r2
 80021d2:	4619      	mov	r1, r3
 80021d4:	f7fe fc86 	bl	8000ae4 <__aeabi_d2f>
 80021d8:	4603      	mov	r3, r0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40240000 	.word	0x40240000

080021e8 <Critical_Low_Moisture>:
    if (Moisture <= 85) return 0;
    else if (Moisture >= 95) return 1;
    else return (Moisture - 85) / 10;
}
float Critical_Low_Moisture(uint16_t Moisture)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	80fb      	strh	r3, [r7, #6]
    if (Moisture <= 50) return 1;
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	2b32      	cmp	r3, #50	; 0x32
 80021f6:	d802      	bhi.n	80021fe <Critical_Low_Moisture+0x16>
 80021f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80021fc:	e013      	b.n	8002226 <Critical_Low_Moisture+0x3e>
    else if (Moisture >= 65) return 0;
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	2b40      	cmp	r3, #64	; 0x40
 8002202:	d902      	bls.n	800220a <Critical_Low_Moisture+0x22>
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	e00d      	b.n	8002226 <Critical_Low_Moisture+0x3e>
    else return (65 - Moisture) / 15;
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <Critical_Low_Moisture+0x48>)
 8002212:	fb82 1203 	smull	r1, r2, r2, r3
 8002216:	441a      	add	r2, r3
 8002218:	10d2      	asrs	r2, r2, #3
 800221a:	17db      	asrs	r3, r3, #31
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fd6a 	bl	8000cf8 <__aeabi_i2f>
 8002224:	4603      	mov	r3, r0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	88888889 	.word	0x88888889

08002234 <Critical_High_TempSoil>:


float Critical_High_TempSoil(uint16_t TempSoil)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	80fb      	strh	r3, [r7, #6]
    if (TempSoil <= 28) return 0;
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	2b1c      	cmp	r3, #28
 8002242:	d802      	bhi.n	800224a <Critical_High_TempSoil+0x16>
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	e011      	b.n	800226e <Critical_High_TempSoil+0x3a>
    else if (TempSoil >= 38) return 1;
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	2b25      	cmp	r3, #37	; 0x25
 800224e:	d902      	bls.n	8002256 <Critical_High_TempSoil+0x22>
 8002250:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002254:	e00b      	b.n	800226e <Critical_High_TempSoil+0x3a>
    else return (TempSoil - 28) / 10;
 8002256:	88fb      	ldrh	r3, [r7, #6]
 8002258:	3b1c      	subs	r3, #28
 800225a:	4a07      	ldr	r2, [pc, #28]	; (8002278 <Critical_High_TempSoil+0x44>)
 800225c:	fb82 1203 	smull	r1, r2, r2, r3
 8002260:	1092      	asrs	r2, r2, #2
 8002262:	17db      	asrs	r3, r3, #31
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe fd46 	bl	8000cf8 <__aeabi_i2f>
 800226c:	4603      	mov	r3, r0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	66666667 	.word	0x66666667

0800227c <Critical_High_MQ135>:
    else if (TempSoil >= 20) return 0;
    else return (20 - TempSoil) / 10;
}

float Critical_High_MQ135(uint16_t MQ135)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	80fb      	strh	r3, [r7, #6]
    if (MQ135 <= 700) return 0;
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800228c:	d802      	bhi.n	8002294 <Critical_High_MQ135+0x18>
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	e013      	b.n	80022bc <Critical_High_MQ135+0x40>
    else if (MQ135 >= 1200) return 1;
 8002294:	88fb      	ldrh	r3, [r7, #6]
 8002296:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800229a:	d302      	bcc.n	80022a2 <Critical_High_MQ135+0x26>
 800229c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80022a0:	e00c      	b.n	80022bc <Critical_High_MQ135+0x40>
    else return (MQ135 - 700) / 500;
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80022a8:	4a06      	ldr	r2, [pc, #24]	; (80022c4 <Critical_High_MQ135+0x48>)
 80022aa:	fb82 1203 	smull	r1, r2, r2, r3
 80022ae:	1152      	asrs	r2, r2, #5
 80022b0:	17db      	asrs	r3, r3, #31
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe fd1f 	bl	8000cf8 <__aeabi_i2f>
 80022ba:	4603      	mov	r3, r0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	10624dd3 	.word	0x10624dd3

080022c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022cc:	b672      	cpsid	i
}
 80022ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <Error_Handler+0x8>
	...

080022d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <HAL_MspInit+0x5c>)
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	4a14      	ldr	r2, [pc, #80]	; (8002330 <HAL_MspInit+0x5c>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6193      	str	r3, [r2, #24]
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_MspInit+0x5c>)
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <HAL_MspInit+0x5c>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <HAL_MspInit+0x5c>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fc:	61d3      	str	r3, [r2, #28]
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <HAL_MspInit+0x5c>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_MspInit+0x60>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	4a04      	ldr	r2, [pc, #16]	; (8002334 <HAL_MspInit+0x60>)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002326:	bf00      	nop
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	40021000 	.word	0x40021000
 8002334:	40010000 	.word	0x40010000

08002338 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 0310 	add.w	r3, r7, #16
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a15      	ldr	r2, [pc, #84]	; (80023a8 <HAL_I2C_MspInit+0x70>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d123      	bne.n	80023a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002358:	4b14      	ldr	r3, [pc, #80]	; (80023ac <HAL_I2C_MspInit+0x74>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4a13      	ldr	r2, [pc, #76]	; (80023ac <HAL_I2C_MspInit+0x74>)
 800235e:	f043 0308 	orr.w	r3, r3, #8
 8002362:	6193      	str	r3, [r2, #24]
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <HAL_I2C_MspInit+0x74>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002370:	23c0      	movs	r3, #192	; 0xc0
 8002372:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002374:	2312      	movs	r3, #18
 8002376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002378:	2303      	movs	r3, #3
 800237a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237c:	f107 0310 	add.w	r3, r7, #16
 8002380:	4619      	mov	r1, r3
 8002382:	480b      	ldr	r0, [pc, #44]	; (80023b0 <HAL_I2C_MspInit+0x78>)
 8002384:	f000 fa86 	bl	8002894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_I2C_MspInit+0x74>)
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	4a07      	ldr	r2, [pc, #28]	; (80023ac <HAL_I2C_MspInit+0x74>)
 800238e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002392:	61d3      	str	r3, [r2, #28]
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <HAL_I2C_MspInit+0x74>)
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023a0:	bf00      	nop
 80023a2:	3720      	adds	r7, #32
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40005400 	.word	0x40005400
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40010c00 	.word	0x40010c00

080023b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0f      	ldr	r2, [pc, #60]	; (8002400 <HAL_RTC_MspInit+0x4c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d118      	bne.n	80023f8 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80023c6:	f000 fd75 	bl	8002eb4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <HAL_RTC_MspInit+0x50>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	4a0d      	ldr	r2, [pc, #52]	; (8002404 <HAL_RTC_MspInit+0x50>)
 80023d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023d4:	61d3      	str	r3, [r2, #28]
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <HAL_RTC_MspInit+0x50>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_RTC_MspInit+0x54>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80023e8:	2200      	movs	r2, #0
 80023ea:	2100      	movs	r1, #0
 80023ec:	2029      	movs	r0, #41	; 0x29
 80023ee:	f000 fa1a 	bl	8002826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80023f2:	2029      	movs	r0, #41	; 0x29
 80023f4:	f000 fa33 	bl	800285e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40002800 	.word	0x40002800
 8002404:	40021000 	.word	0x40021000
 8002408:	4242043c 	.word	0x4242043c

0800240c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 0310 	add.w	r3, r7, #16
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1b      	ldr	r2, [pc, #108]	; (8002494 <HAL_SPI_MspInit+0x88>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d12f      	bne.n	800248c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800242c:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <HAL_SPI_MspInit+0x8c>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	4a19      	ldr	r2, [pc, #100]	; (8002498 <HAL_SPI_MspInit+0x8c>)
 8002432:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002436:	6193      	str	r3, [r2, #24]
 8002438:	4b17      	ldr	r3, [pc, #92]	; (8002498 <HAL_SPI_MspInit+0x8c>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002444:	4b14      	ldr	r3, [pc, #80]	; (8002498 <HAL_SPI_MspInit+0x8c>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	4a13      	ldr	r2, [pc, #76]	; (8002498 <HAL_SPI_MspInit+0x8c>)
 800244a:	f043 0304 	orr.w	r3, r3, #4
 800244e:	6193      	str	r3, [r2, #24]
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_SPI_MspInit+0x8c>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800245c:	23a0      	movs	r3, #160	; 0xa0
 800245e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002468:	f107 0310 	add.w	r3, r7, #16
 800246c:	4619      	mov	r1, r3
 800246e:	480b      	ldr	r0, [pc, #44]	; (800249c <HAL_SPI_MspInit+0x90>)
 8002470:	f000 fa10 	bl	8002894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002474:	2340      	movs	r3, #64	; 0x40
 8002476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002480:	f107 0310 	add.w	r3, r7, #16
 8002484:	4619      	mov	r1, r3
 8002486:	4805      	ldr	r0, [pc, #20]	; (800249c <HAL_SPI_MspInit+0x90>)
 8002488:	f000 fa04 	bl	8002894 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800248c:	bf00      	nop
 800248e:	3720      	adds	r7, #32
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40013000 	.word	0x40013000
 8002498:	40021000 	.word	0x40021000
 800249c:	40010800 	.word	0x40010800

080024a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024a4:	e7fe      	b.n	80024a4 <NMI_Handler+0x4>

080024a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024aa:	e7fe      	b.n	80024aa <HardFault_Handler+0x4>

080024ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b0:	e7fe      	b.n	80024b0 <MemManage_Handler+0x4>

080024b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024b6:	e7fe      	b.n	80024b6 <BusFault_Handler+0x4>

080024b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024bc:	e7fe      	b.n	80024bc <UsageFault_Handler+0x4>

080024be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr

080024e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024e6:	f000 f887 	bl	80025f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}

080024ee <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80024f2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80024f6:	f000 fb81 	bl	8002bfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002504:	4802      	ldr	r0, [pc, #8]	; (8002510 <RTC_Alarm_IRQHandler+0x10>)
 8002506:	f001 fdc7 	bl	8004098 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200000e4 	.word	0x200000e4

08002514 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002520:	f7ff fff8 	bl	8002514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002524:	480b      	ldr	r0, [pc, #44]	; (8002554 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002526:	490c      	ldr	r1, [pc, #48]	; (8002558 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002528:	4a0c      	ldr	r2, [pc, #48]	; (800255c <LoopFillZerobss+0x16>)
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800252c:	e002      	b.n	8002534 <LoopCopyDataInit>

0800252e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800252e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002532:	3304      	adds	r3, #4

08002534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002538:	d3f9      	bcc.n	800252e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800253a:	4a09      	ldr	r2, [pc, #36]	; (8002560 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800253c:	4c09      	ldr	r4, [pc, #36]	; (8002564 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800253e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002540:	e001      	b.n	8002546 <LoopFillZerobss>

08002542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002544:	3204      	adds	r2, #4

08002546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002548:	d3fb      	bcc.n	8002542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800254a:	f002 fe1d 	bl	8005188 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800254e:	f7ff f84b 	bl	80015e8 <main>
  bx lr
 8002552:	4770      	bx	lr
  ldr r0, =_sdata
 8002554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002558:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800255c:	080052a0 	.word	0x080052a0
  ldr r2, =_sbss
 8002560:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002564:	20000154 	.word	0x20000154

08002568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002568:	e7fe      	b.n	8002568 <ADC1_2_IRQHandler>
	...

0800256c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002570:	4b08      	ldr	r3, [pc, #32]	; (8002594 <HAL_Init+0x28>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a07      	ldr	r2, [pc, #28]	; (8002594 <HAL_Init+0x28>)
 8002576:	f043 0310 	orr.w	r3, r3, #16
 800257a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800257c:	2003      	movs	r0, #3
 800257e:	f000 f947 	bl	8002810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002582:	200f      	movs	r0, #15
 8002584:	f000 f808 	bl	8002598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002588:	f7ff fea4 	bl	80022d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40022000 	.word	0x40022000

08002598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_InitTick+0x54>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_InitTick+0x58>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4619      	mov	r1, r3
 80025aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80025b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f95f 	bl	800287a <HAL_SYSTICK_Config>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e00e      	b.n	80025e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b0f      	cmp	r3, #15
 80025ca:	d80a      	bhi.n	80025e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025cc:	2200      	movs	r2, #0
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295
 80025d4:	f000 f927 	bl	8002826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025d8:	4a06      	ldr	r2, [pc, #24]	; (80025f4 <HAL_InitTick+0x5c>)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	e000      	b.n	80025e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20000004 	.word	0x20000004
 80025f0:	2000000c 	.word	0x2000000c
 80025f4:	20000008 	.word	0x20000008

080025f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_IncTick+0x1c>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_IncTick+0x20>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4413      	add	r3, r2
 8002608:	4a03      	ldr	r2, [pc, #12]	; (8002618 <HAL_IncTick+0x20>)
 800260a:	6013      	str	r3, [r2, #0]
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr
 8002614:	2000000c 	.word	0x2000000c
 8002618:	20000150 	.word	0x20000150

0800261c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return uwTick;
 8002620:	4b02      	ldr	r3, [pc, #8]	; (800262c <HAL_GetTick+0x10>)
 8002622:	681b      	ldr	r3, [r3, #0]
}
 8002624:	4618      	mov	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	20000150 	.word	0x20000150

08002630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002638:	f7ff fff0 	bl	800261c <HAL_GetTick>
 800263c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d005      	beq.n	8002656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_Delay+0x44>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4413      	add	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002656:	bf00      	nop
 8002658:	f7ff ffe0 	bl	800261c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	429a      	cmp	r2, r3
 8002666:	d8f7      	bhi.n	8002658 <HAL_Delay+0x28>
  {
  }
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	2000000c 	.word	0x2000000c

08002678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002694:	4013      	ands	r3, r2
 8002696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026aa:	4a04      	ldr	r2, [pc, #16]	; (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	60d3      	str	r3, [r2, #12]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <__NVIC_GetPriorityGrouping+0x18>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	f003 0307 	and.w	r3, r3, #7
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	db0b      	blt.n	8002706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	f003 021f 	and.w	r2, r3, #31
 80026f4:	4906      	ldr	r1, [pc, #24]	; (8002710 <__NVIC_EnableIRQ+0x34>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	2001      	movs	r0, #1
 80026fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr
 8002710:	e000e100 	.word	0xe000e100

08002714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	6039      	str	r1, [r7, #0]
 800271e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002724:	2b00      	cmp	r3, #0
 8002726:	db0a      	blt.n	800273e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	b2da      	uxtb	r2, r3
 800272c:	490c      	ldr	r1, [pc, #48]	; (8002760 <__NVIC_SetPriority+0x4c>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	0112      	lsls	r2, r2, #4
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	440b      	add	r3, r1
 8002738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800273c:	e00a      	b.n	8002754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4908      	ldr	r1, [pc, #32]	; (8002764 <__NVIC_SetPriority+0x50>)
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	3b04      	subs	r3, #4
 800274c:	0112      	lsls	r2, r2, #4
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	440b      	add	r3, r1
 8002752:	761a      	strb	r2, [r3, #24]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	e000e100 	.word	0xe000e100
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002768:	b480      	push	{r7}
 800276a:	b089      	sub	sp, #36	; 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f1c3 0307 	rsb	r3, r3, #7
 8002782:	2b04      	cmp	r3, #4
 8002784:	bf28      	it	cs
 8002786:	2304      	movcs	r3, #4
 8002788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3304      	adds	r3, #4
 800278e:	2b06      	cmp	r3, #6
 8002790:	d902      	bls.n	8002798 <NVIC_EncodePriority+0x30>
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3b03      	subs	r3, #3
 8002796:	e000      	b.n	800279a <NVIC_EncodePriority+0x32>
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800279c:	f04f 32ff 	mov.w	r2, #4294967295
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43da      	mvns	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	401a      	ands	r2, r3
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b0:	f04f 31ff 	mov.w	r1, #4294967295
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ba:	43d9      	mvns	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c0:	4313      	orrs	r3, r2
         );
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3724      	adds	r7, #36	; 0x24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027dc:	d301      	bcc.n	80027e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027de:	2301      	movs	r3, #1
 80027e0:	e00f      	b.n	8002802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027e2:	4a0a      	ldr	r2, [pc, #40]	; (800280c <SysTick_Config+0x40>)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ea:	210f      	movs	r1, #15
 80027ec:	f04f 30ff 	mov.w	r0, #4294967295
 80027f0:	f7ff ff90 	bl	8002714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <SysTick_Config+0x40>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027fa:	4b04      	ldr	r3, [pc, #16]	; (800280c <SysTick_Config+0x40>)
 80027fc:	2207      	movs	r2, #7
 80027fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	e000e010 	.word	0xe000e010

08002810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff ff2d 	bl	8002678 <__NVIC_SetPriorityGrouping>
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002826:	b580      	push	{r7, lr}
 8002828:	b086      	sub	sp, #24
 800282a:	af00      	add	r7, sp, #0
 800282c:	4603      	mov	r3, r0
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
 8002832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002838:	f7ff ff42 	bl	80026c0 <__NVIC_GetPriorityGrouping>
 800283c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	6978      	ldr	r0, [r7, #20]
 8002844:	f7ff ff90 	bl	8002768 <NVIC_EncodePriority>
 8002848:	4602      	mov	r2, r0
 800284a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284e:	4611      	mov	r1, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff5f 	bl	8002714 <__NVIC_SetPriority>
}
 8002856:	bf00      	nop
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	4603      	mov	r3, r0
 8002866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff ff35 	bl	80026dc <__NVIC_EnableIRQ>
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff ffa2 	bl	80027cc <SysTick_Config>
 8002888:	4603      	mov	r3, r0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002894:	b480      	push	{r7}
 8002896:	b08b      	sub	sp, #44	; 0x2c
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028a6:	e169      	b.n	8002b7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028a8:	2201      	movs	r2, #1
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	f040 8158 	bne.w	8002b76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4a9a      	ldr	r2, [pc, #616]	; (8002b34 <HAL_GPIO_Init+0x2a0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d05e      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 80028d0:	4a98      	ldr	r2, [pc, #608]	; (8002b34 <HAL_GPIO_Init+0x2a0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d875      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 80028d6:	4a98      	ldr	r2, [pc, #608]	; (8002b38 <HAL_GPIO_Init+0x2a4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d058      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 80028dc:	4a96      	ldr	r2, [pc, #600]	; (8002b38 <HAL_GPIO_Init+0x2a4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d86f      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 80028e2:	4a96      	ldr	r2, [pc, #600]	; (8002b3c <HAL_GPIO_Init+0x2a8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d052      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 80028e8:	4a94      	ldr	r2, [pc, #592]	; (8002b3c <HAL_GPIO_Init+0x2a8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d869      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 80028ee:	4a94      	ldr	r2, [pc, #592]	; (8002b40 <HAL_GPIO_Init+0x2ac>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d04c      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 80028f4:	4a92      	ldr	r2, [pc, #584]	; (8002b40 <HAL_GPIO_Init+0x2ac>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d863      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 80028fa:	4a92      	ldr	r2, [pc, #584]	; (8002b44 <HAL_GPIO_Init+0x2b0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d046      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 8002900:	4a90      	ldr	r2, [pc, #576]	; (8002b44 <HAL_GPIO_Init+0x2b0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d85d      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 8002906:	2b12      	cmp	r3, #18
 8002908:	d82a      	bhi.n	8002960 <HAL_GPIO_Init+0xcc>
 800290a:	2b12      	cmp	r3, #18
 800290c:	d859      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 800290e:	a201      	add	r2, pc, #4	; (adr r2, 8002914 <HAL_GPIO_Init+0x80>)
 8002910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002914:	0800298f 	.word	0x0800298f
 8002918:	08002969 	.word	0x08002969
 800291c:	0800297b 	.word	0x0800297b
 8002920:	080029bd 	.word	0x080029bd
 8002924:	080029c3 	.word	0x080029c3
 8002928:	080029c3 	.word	0x080029c3
 800292c:	080029c3 	.word	0x080029c3
 8002930:	080029c3 	.word	0x080029c3
 8002934:	080029c3 	.word	0x080029c3
 8002938:	080029c3 	.word	0x080029c3
 800293c:	080029c3 	.word	0x080029c3
 8002940:	080029c3 	.word	0x080029c3
 8002944:	080029c3 	.word	0x080029c3
 8002948:	080029c3 	.word	0x080029c3
 800294c:	080029c3 	.word	0x080029c3
 8002950:	080029c3 	.word	0x080029c3
 8002954:	080029c3 	.word	0x080029c3
 8002958:	08002971 	.word	0x08002971
 800295c:	08002985 	.word	0x08002985
 8002960:	4a79      	ldr	r2, [pc, #484]	; (8002b48 <HAL_GPIO_Init+0x2b4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002966:	e02c      	b.n	80029c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	623b      	str	r3, [r7, #32]
          break;
 800296e:	e029      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	3304      	adds	r3, #4
 8002976:	623b      	str	r3, [r7, #32]
          break;
 8002978:	e024      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	3308      	adds	r3, #8
 8002980:	623b      	str	r3, [r7, #32]
          break;
 8002982:	e01f      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	330c      	adds	r3, #12
 800298a:	623b      	str	r3, [r7, #32]
          break;
 800298c:	e01a      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d102      	bne.n	800299c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002996:	2304      	movs	r3, #4
 8002998:	623b      	str	r3, [r7, #32]
          break;
 800299a:	e013      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d105      	bne.n	80029b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029a4:	2308      	movs	r3, #8
 80029a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	611a      	str	r2, [r3, #16]
          break;
 80029ae:	e009      	b.n	80029c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029b0:	2308      	movs	r3, #8
 80029b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	615a      	str	r2, [r3, #20]
          break;
 80029ba:	e003      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029bc:	2300      	movs	r3, #0
 80029be:	623b      	str	r3, [r7, #32]
          break;
 80029c0:	e000      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          break;
 80029c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2bff      	cmp	r3, #255	; 0xff
 80029c8:	d801      	bhi.n	80029ce <HAL_GPIO_Init+0x13a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	e001      	b.n	80029d2 <HAL_GPIO_Init+0x13e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3304      	adds	r3, #4
 80029d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2bff      	cmp	r3, #255	; 0xff
 80029d8:	d802      	bhi.n	80029e0 <HAL_GPIO_Init+0x14c>
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	e002      	b.n	80029e6 <HAL_GPIO_Init+0x152>
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	3b08      	subs	r3, #8
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	210f      	movs	r1, #15
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	fa01 f303 	lsl.w	r3, r1, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	401a      	ands	r2, r3
 80029f8:	6a39      	ldr	r1, [r7, #32]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002a00:	431a      	orrs	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 80b1 	beq.w	8002b76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a14:	4b4d      	ldr	r3, [pc, #308]	; (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	4a4c      	ldr	r2, [pc, #304]	; (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	6193      	str	r3, [r2, #24]
 8002a20:	4b4a      	ldr	r3, [pc, #296]	; (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a2c:	4a48      	ldr	r2, [pc, #288]	; (8002b50 <HAL_GPIO_Init+0x2bc>)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	3302      	adds	r3, #2
 8002a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	220f      	movs	r2, #15
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a40      	ldr	r2, [pc, #256]	; (8002b54 <HAL_GPIO_Init+0x2c0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d013      	beq.n	8002a80 <HAL_GPIO_Init+0x1ec>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a3f      	ldr	r2, [pc, #252]	; (8002b58 <HAL_GPIO_Init+0x2c4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00d      	beq.n	8002a7c <HAL_GPIO_Init+0x1e8>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a3e      	ldr	r2, [pc, #248]	; (8002b5c <HAL_GPIO_Init+0x2c8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d007      	beq.n	8002a78 <HAL_GPIO_Init+0x1e4>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a3d      	ldr	r2, [pc, #244]	; (8002b60 <HAL_GPIO_Init+0x2cc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d101      	bne.n	8002a74 <HAL_GPIO_Init+0x1e0>
 8002a70:	2303      	movs	r3, #3
 8002a72:	e006      	b.n	8002a82 <HAL_GPIO_Init+0x1ee>
 8002a74:	2304      	movs	r3, #4
 8002a76:	e004      	b.n	8002a82 <HAL_GPIO_Init+0x1ee>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e002      	b.n	8002a82 <HAL_GPIO_Init+0x1ee>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <HAL_GPIO_Init+0x1ee>
 8002a80:	2300      	movs	r3, #0
 8002a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a84:	f002 0203 	and.w	r2, r2, #3
 8002a88:	0092      	lsls	r2, r2, #2
 8002a8a:	4093      	lsls	r3, r2
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a92:	492f      	ldr	r1, [pc, #188]	; (8002b50 <HAL_GPIO_Init+0x2bc>)
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	089b      	lsrs	r3, r3, #2
 8002a98:	3302      	adds	r3, #2
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d006      	beq.n	8002aba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002aac:	4b2d      	ldr	r3, [pc, #180]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	492c      	ldr	r1, [pc, #176]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	608b      	str	r3, [r1, #8]
 8002ab8:	e006      	b.n	8002ac8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002aba:	4b2a      	ldr	r3, [pc, #168]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	4928      	ldr	r1, [pc, #160]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d006      	beq.n	8002ae2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ad4:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	4922      	ldr	r1, [pc, #136]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60cb      	str	r3, [r1, #12]
 8002ae0:	e006      	b.n	8002af0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ae2:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	491e      	ldr	r1, [pc, #120]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d006      	beq.n	8002b0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002afc:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	4918      	ldr	r1, [pc, #96]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]
 8002b08:	e006      	b.n	8002b18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b0a:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	4914      	ldr	r1, [pc, #80]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d021      	beq.n	8002b68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	490e      	ldr	r1, [pc, #56]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]
 8002b30:	e021      	b.n	8002b76 <HAL_GPIO_Init+0x2e2>
 8002b32:	bf00      	nop
 8002b34:	10320000 	.word	0x10320000
 8002b38:	10310000 	.word	0x10310000
 8002b3c:	10220000 	.word	0x10220000
 8002b40:	10210000 	.word	0x10210000
 8002b44:	10120000 	.word	0x10120000
 8002b48:	10110000 	.word	0x10110000
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40010800 	.word	0x40010800
 8002b58:	40010c00 	.word	0x40010c00
 8002b5c:	40011000 	.word	0x40011000
 8002b60:	40011400 	.word	0x40011400
 8002b64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	4909      	ldr	r1, [pc, #36]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	3301      	adds	r3, #1
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	fa22 f303 	lsr.w	r3, r2, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f47f ae8e 	bne.w	80028a8 <HAL_GPIO_Init+0x14>
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	372c      	adds	r7, #44	; 0x2c
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	40010400 	.word	0x40010400

08002b9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	887b      	ldrh	r3, [r7, #2]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
 8002bb8:	e001      	b.n	8002bbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	807b      	strh	r3, [r7, #2]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bda:	787b      	ldrb	r3, [r7, #1]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002be0:	887a      	ldrh	r2, [r7, #2]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002be6:	e003      	b.n	8002bf0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002be8:	887b      	ldrh	r3, [r7, #2]
 8002bea:	041a      	lsls	r2, r3, #16
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	611a      	str	r2, [r3, #16]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
	...

08002bfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c06:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c08:	695a      	ldr	r2, [r3, #20]
 8002c0a:	88fb      	ldrh	r3, [r7, #6]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d006      	beq.n	8002c20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c12:	4a05      	ldr	r2, [pc, #20]	; (8002c28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe ff48 	bl	8001ab0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40010400 	.word	0x40010400

08002c2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e12b      	b.n	8002e96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff fb70 	bl	8002338 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2224      	movs	r2, #36	; 0x24
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c90:	f000 fce6 	bl	8003660 <HAL_RCC_GetPCLK1Freq>
 8002c94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4a81      	ldr	r2, [pc, #516]	; (8002ea0 <HAL_I2C_Init+0x274>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d807      	bhi.n	8002cb0 <HAL_I2C_Init+0x84>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4a80      	ldr	r2, [pc, #512]	; (8002ea4 <HAL_I2C_Init+0x278>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	bf94      	ite	ls
 8002ca8:	2301      	movls	r3, #1
 8002caa:	2300      	movhi	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e006      	b.n	8002cbe <HAL_I2C_Init+0x92>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4a7d      	ldr	r2, [pc, #500]	; (8002ea8 <HAL_I2C_Init+0x27c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	bf94      	ite	ls
 8002cb8:	2301      	movls	r3, #1
 8002cba:	2300      	movhi	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e0e7      	b.n	8002e96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4a78      	ldr	r2, [pc, #480]	; (8002eac <HAL_I2C_Init+0x280>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	0c9b      	lsrs	r3, r3, #18
 8002cd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4a6a      	ldr	r2, [pc, #424]	; (8002ea0 <HAL_I2C_Init+0x274>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d802      	bhi.n	8002d00 <HAL_I2C_Init+0xd4>
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	e009      	b.n	8002d14 <HAL_I2C_Init+0xe8>
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d06:	fb02 f303 	mul.w	r3, r2, r3
 8002d0a:	4a69      	ldr	r2, [pc, #420]	; (8002eb0 <HAL_I2C_Init+0x284>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	099b      	lsrs	r3, r3, #6
 8002d12:	3301      	adds	r3, #1
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	495c      	ldr	r1, [pc, #368]	; (8002ea0 <HAL_I2C_Init+0x274>)
 8002d30:	428b      	cmp	r3, r1
 8002d32:	d819      	bhi.n	8002d68 <HAL_I2C_Init+0x13c>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1e59      	subs	r1, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d42:	1c59      	adds	r1, r3, #1
 8002d44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d48:	400b      	ands	r3, r1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <HAL_I2C_Init+0x138>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1e59      	subs	r1, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d62:	e051      	b.n	8002e08 <HAL_I2C_Init+0x1dc>
 8002d64:	2304      	movs	r3, #4
 8002d66:	e04f      	b.n	8002e08 <HAL_I2C_Init+0x1dc>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d111      	bne.n	8002d94 <HAL_I2C_Init+0x168>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1e58      	subs	r0, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	440b      	add	r3, r1
 8002d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d82:	3301      	adds	r3, #1
 8002d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e012      	b.n	8002dba <HAL_I2C_Init+0x18e>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	1e58      	subs	r0, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6859      	ldr	r1, [r3, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	0099      	lsls	r1, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002daa:	3301      	adds	r3, #1
 8002dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_I2C_Init+0x196>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e022      	b.n	8002e08 <HAL_I2C_Init+0x1dc>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10e      	bne.n	8002de8 <HAL_I2C_Init+0x1bc>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1e58      	subs	r0, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6859      	ldr	r1, [r3, #4]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	440b      	add	r3, r1
 8002dd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ddc:	3301      	adds	r3, #1
 8002dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002de6:	e00f      	b.n	8002e08 <HAL_I2C_Init+0x1dc>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1e58      	subs	r0, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6859      	ldr	r1, [r3, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	0099      	lsls	r1, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	6809      	ldr	r1, [r1, #0]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69da      	ldr	r2, [r3, #28]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6911      	ldr	r1, [r2, #16]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68d2      	ldr	r2, [r2, #12]
 8002e42:	4311      	orrs	r1, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	000186a0 	.word	0x000186a0
 8002ea4:	001e847f 	.word	0x001e847f
 8002ea8:	003d08ff 	.word	0x003d08ff
 8002eac:	431bde83 	.word	0x431bde83
 8002eb0:	10624dd3 	.word	0x10624dd3

08002eb4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002eb8:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]
}
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	420e0020 	.word	0x420e0020

08002ecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e272      	b.n	80033c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 8087 	beq.w	8002ffa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eec:	4b92      	ldr	r3, [pc, #584]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d00c      	beq.n	8002f12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ef8:	4b8f      	ldr	r3, [pc, #572]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d112      	bne.n	8002f2a <HAL_RCC_OscConfig+0x5e>
 8002f04:	4b8c      	ldr	r3, [pc, #560]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f10:	d10b      	bne.n	8002f2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f12:	4b89      	ldr	r3, [pc, #548]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d06c      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x12c>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d168      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e24c      	b.n	80033c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f32:	d106      	bne.n	8002f42 <HAL_RCC_OscConfig+0x76>
 8002f34:	4b80      	ldr	r3, [pc, #512]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a7f      	ldr	r2, [pc, #508]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	e02e      	b.n	8002fa0 <HAL_RCC_OscConfig+0xd4>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0x98>
 8002f4a:	4b7b      	ldr	r3, [pc, #492]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a7a      	ldr	r2, [pc, #488]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	4b78      	ldr	r3, [pc, #480]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a77      	ldr	r2, [pc, #476]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e01d      	b.n	8002fa0 <HAL_RCC_OscConfig+0xd4>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCC_OscConfig+0xbc>
 8002f6e:	4b72      	ldr	r3, [pc, #456]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a71      	ldr	r2, [pc, #452]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	4b6f      	ldr	r3, [pc, #444]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a6e      	ldr	r2, [pc, #440]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e00b      	b.n	8002fa0 <HAL_RCC_OscConfig+0xd4>
 8002f88:	4b6b      	ldr	r3, [pc, #428]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a6a      	ldr	r2, [pc, #424]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	4b68      	ldr	r3, [pc, #416]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a67      	ldr	r2, [pc, #412]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d013      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7ff fb38 	bl	800261c <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7ff fb34 	bl	800261c <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	; 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e200      	b.n	80033c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b5d      	ldr	r3, [pc, #372]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xe4>
 8002fce:	e014      	b.n	8002ffa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7ff fb24 	bl	800261c <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7ff fb20 	bl	800261c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	; 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e1ec      	b.n	80033c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fea:	4b53      	ldr	r3, [pc, #332]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x10c>
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d063      	beq.n	80030ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003006:	4b4c      	ldr	r3, [pc, #304]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003012:	4b49      	ldr	r3, [pc, #292]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b08      	cmp	r3, #8
 800301c:	d11c      	bne.n	8003058 <HAL_RCC_OscConfig+0x18c>
 800301e:	4b46      	ldr	r3, [pc, #280]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d116      	bne.n	8003058 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302a:	4b43      	ldr	r3, [pc, #268]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <HAL_RCC_OscConfig+0x176>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d001      	beq.n	8003042 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e1c0      	b.n	80033c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003042:	4b3d      	ldr	r3, [pc, #244]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4939      	ldr	r1, [pc, #228]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003056:	e03a      	b.n	80030ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d020      	beq.n	80030a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003060:	4b36      	ldr	r3, [pc, #216]	; (800313c <HAL_RCC_OscConfig+0x270>)
 8003062:	2201      	movs	r2, #1
 8003064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003066:	f7ff fad9 	bl	800261c <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800306e:	f7ff fad5 	bl	800261c <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e1a1      	b.n	80033c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003080:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0f0      	beq.n	800306e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308c:	4b2a      	ldr	r3, [pc, #168]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4927      	ldr	r1, [pc, #156]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 800309c:	4313      	orrs	r3, r2
 800309e:	600b      	str	r3, [r1, #0]
 80030a0:	e015      	b.n	80030ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a2:	4b26      	ldr	r3, [pc, #152]	; (800313c <HAL_RCC_OscConfig+0x270>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7ff fab8 	bl	800261c <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b0:	f7ff fab4 	bl	800261c <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e180      	b.n	80033c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c2:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d03a      	beq.n	8003150 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d019      	beq.n	8003116 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e2:	4b17      	ldr	r3, [pc, #92]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e8:	f7ff fa98 	bl	800261c <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f0:	f7ff fa94 	bl	800261c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e160      	b.n	80033c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003102:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800310e:	2001      	movs	r0, #1
 8003110:	f000 face 	bl	80036b0 <RCC_Delay>
 8003114:	e01c      	b.n	8003150 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311c:	f7ff fa7e 	bl	800261c <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003122:	e00f      	b.n	8003144 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003124:	f7ff fa7a 	bl	800261c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d908      	bls.n	8003144 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e146      	b.n	80033c4 <HAL_RCC_OscConfig+0x4f8>
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000
 800313c:	42420000 	.word	0x42420000
 8003140:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003144:	4b92      	ldr	r3, [pc, #584]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e9      	bne.n	8003124 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80a6 	beq.w	80032aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800315e:	2300      	movs	r3, #0
 8003160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003162:	4b8b      	ldr	r3, [pc, #556]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10d      	bne.n	800318a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800316e:	4b88      	ldr	r3, [pc, #544]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	4a87      	ldr	r2, [pc, #540]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003178:	61d3      	str	r3, [r2, #28]
 800317a:	4b85      	ldr	r3, [pc, #532]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003186:	2301      	movs	r3, #1
 8003188:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318a:	4b82      	ldr	r3, [pc, #520]	; (8003394 <HAL_RCC_OscConfig+0x4c8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	2b00      	cmp	r3, #0
 8003194:	d118      	bne.n	80031c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003196:	4b7f      	ldr	r3, [pc, #508]	; (8003394 <HAL_RCC_OscConfig+0x4c8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a7e      	ldr	r2, [pc, #504]	; (8003394 <HAL_RCC_OscConfig+0x4c8>)
 800319c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a2:	f7ff fa3b 	bl	800261c <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031aa:	f7ff fa37 	bl	800261c <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b64      	cmp	r3, #100	; 0x64
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e103      	b.n	80033c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031bc:	4b75      	ldr	r3, [pc, #468]	; (8003394 <HAL_RCC_OscConfig+0x4c8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d106      	bne.n	80031de <HAL_RCC_OscConfig+0x312>
 80031d0:	4b6f      	ldr	r3, [pc, #444]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	4a6e      	ldr	r2, [pc, #440]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6213      	str	r3, [r2, #32]
 80031dc:	e02d      	b.n	800323a <HAL_RCC_OscConfig+0x36e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10c      	bne.n	8003200 <HAL_RCC_OscConfig+0x334>
 80031e6:	4b6a      	ldr	r3, [pc, #424]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	4a69      	ldr	r2, [pc, #420]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 80031ec:	f023 0301 	bic.w	r3, r3, #1
 80031f0:	6213      	str	r3, [r2, #32]
 80031f2:	4b67      	ldr	r3, [pc, #412]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	4a66      	ldr	r2, [pc, #408]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 80031f8:	f023 0304 	bic.w	r3, r3, #4
 80031fc:	6213      	str	r3, [r2, #32]
 80031fe:	e01c      	b.n	800323a <HAL_RCC_OscConfig+0x36e>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b05      	cmp	r3, #5
 8003206:	d10c      	bne.n	8003222 <HAL_RCC_OscConfig+0x356>
 8003208:	4b61      	ldr	r3, [pc, #388]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	4a60      	ldr	r2, [pc, #384]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 800320e:	f043 0304 	orr.w	r3, r3, #4
 8003212:	6213      	str	r3, [r2, #32]
 8003214:	4b5e      	ldr	r3, [pc, #376]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	4a5d      	ldr	r2, [pc, #372]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	6213      	str	r3, [r2, #32]
 8003220:	e00b      	b.n	800323a <HAL_RCC_OscConfig+0x36e>
 8003222:	4b5b      	ldr	r3, [pc, #364]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	4a5a      	ldr	r2, [pc, #360]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	6213      	str	r3, [r2, #32]
 800322e:	4b58      	ldr	r3, [pc, #352]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	4a57      	ldr	r2, [pc, #348]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003234:	f023 0304 	bic.w	r3, r3, #4
 8003238:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d015      	beq.n	800326e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003242:	f7ff f9eb 	bl	800261c <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003248:	e00a      	b.n	8003260 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324a:	f7ff f9e7 	bl	800261c <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	f241 3288 	movw	r2, #5000	; 0x1388
 8003258:	4293      	cmp	r3, r2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e0b1      	b.n	80033c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003260:	4b4b      	ldr	r3, [pc, #300]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0ee      	beq.n	800324a <HAL_RCC_OscConfig+0x37e>
 800326c:	e014      	b.n	8003298 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326e:	f7ff f9d5 	bl	800261c <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003274:	e00a      	b.n	800328c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003276:	f7ff f9d1 	bl	800261c <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	f241 3288 	movw	r2, #5000	; 0x1388
 8003284:	4293      	cmp	r3, r2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e09b      	b.n	80033c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328c:	4b40      	ldr	r3, [pc, #256]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ee      	bne.n	8003276 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003298:	7dfb      	ldrb	r3, [r7, #23]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d105      	bne.n	80032aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329e:	4b3c      	ldr	r3, [pc, #240]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	4a3b      	ldr	r2, [pc, #236]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 8087 	beq.w	80033c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032b4:	4b36      	ldr	r3, [pc, #216]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d061      	beq.n	8003384 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d146      	bne.n	8003356 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c8:	4b33      	ldr	r3, [pc, #204]	; (8003398 <HAL_RCC_OscConfig+0x4cc>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ce:	f7ff f9a5 	bl	800261c <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d6:	f7ff f9a1 	bl	800261c <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e06d      	b.n	80033c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032e8:	4b29      	ldr	r3, [pc, #164]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f0      	bne.n	80032d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032fc:	d108      	bne.n	8003310 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032fe:	4b24      	ldr	r3, [pc, #144]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	4921      	ldr	r1, [pc, #132]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 800330c:	4313      	orrs	r3, r2
 800330e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003310:	4b1f      	ldr	r3, [pc, #124]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a19      	ldr	r1, [r3, #32]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	430b      	orrs	r3, r1
 8003322:	491b      	ldr	r1, [pc, #108]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003328:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <HAL_RCC_OscConfig+0x4cc>)
 800332a:	2201      	movs	r2, #1
 800332c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332e:	f7ff f975 	bl	800261c <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003336:	f7ff f971 	bl	800261c <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e03d      	b.n	80033c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003348:	4b11      	ldr	r3, [pc, #68]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x46a>
 8003354:	e035      	b.n	80033c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003356:	4b10      	ldr	r3, [pc, #64]	; (8003398 <HAL_RCC_OscConfig+0x4cc>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335c:	f7ff f95e 	bl	800261c <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003364:	f7ff f95a 	bl	800261c <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e026      	b.n	80033c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f0      	bne.n	8003364 <HAL_RCC_OscConfig+0x498>
 8003382:	e01e      	b.n	80033c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d107      	bne.n	800339c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e019      	b.n	80033c4 <HAL_RCC_OscConfig+0x4f8>
 8003390:	40021000 	.word	0x40021000
 8003394:	40007000 	.word	0x40007000
 8003398:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800339c:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_RCC_OscConfig+0x500>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d106      	bne.n	80033be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d001      	beq.n	80033c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40021000 	.word	0x40021000

080033d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0d0      	b.n	8003586 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033e4:	4b6a      	ldr	r3, [pc, #424]	; (8003590 <HAL_RCC_ClockConfig+0x1c0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d910      	bls.n	8003414 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f2:	4b67      	ldr	r3, [pc, #412]	; (8003590 <HAL_RCC_ClockConfig+0x1c0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 0207 	bic.w	r2, r3, #7
 80033fa:	4965      	ldr	r1, [pc, #404]	; (8003590 <HAL_RCC_ClockConfig+0x1c0>)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003402:	4b63      	ldr	r3, [pc, #396]	; (8003590 <HAL_RCC_ClockConfig+0x1c0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d001      	beq.n	8003414 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0b8      	b.n	8003586 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d020      	beq.n	8003462 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800342c:	4b59      	ldr	r3, [pc, #356]	; (8003594 <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	4a58      	ldr	r2, [pc, #352]	; (8003594 <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003436:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003444:	4b53      	ldr	r3, [pc, #332]	; (8003594 <HAL_RCC_ClockConfig+0x1c4>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	4a52      	ldr	r2, [pc, #328]	; (8003594 <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800344e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003450:	4b50      	ldr	r3, [pc, #320]	; (8003594 <HAL_RCC_ClockConfig+0x1c4>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	494d      	ldr	r1, [pc, #308]	; (8003594 <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d040      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d107      	bne.n	8003486 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003476:	4b47      	ldr	r3, [pc, #284]	; (8003594 <HAL_RCC_ClockConfig+0x1c4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d115      	bne.n	80034ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e07f      	b.n	8003586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d107      	bne.n	800349e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348e:	4b41      	ldr	r3, [pc, #260]	; (8003594 <HAL_RCC_ClockConfig+0x1c4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e073      	b.n	8003586 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349e:	4b3d      	ldr	r3, [pc, #244]	; (8003594 <HAL_RCC_ClockConfig+0x1c4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e06b      	b.n	8003586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ae:	4b39      	ldr	r3, [pc, #228]	; (8003594 <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f023 0203 	bic.w	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4936      	ldr	r1, [pc, #216]	; (8003594 <HAL_RCC_ClockConfig+0x1c4>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c0:	f7ff f8ac 	bl	800261c <HAL_GetTick>
 80034c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c6:	e00a      	b.n	80034de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c8:	f7ff f8a8 	bl	800261c <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e053      	b.n	8003586 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034de:	4b2d      	ldr	r3, [pc, #180]	; (8003594 <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f003 020c 	and.w	r2, r3, #12
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d1eb      	bne.n	80034c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034f0:	4b27      	ldr	r3, [pc, #156]	; (8003590 <HAL_RCC_ClockConfig+0x1c0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d210      	bcs.n	8003520 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fe:	4b24      	ldr	r3, [pc, #144]	; (8003590 <HAL_RCC_ClockConfig+0x1c0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 0207 	bic.w	r2, r3, #7
 8003506:	4922      	ldr	r1, [pc, #136]	; (8003590 <HAL_RCC_ClockConfig+0x1c0>)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800350e:	4b20      	ldr	r3, [pc, #128]	; (8003590 <HAL_RCC_ClockConfig+0x1c0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e032      	b.n	8003586 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d008      	beq.n	800353e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800352c:	4b19      	ldr	r3, [pc, #100]	; (8003594 <HAL_RCC_ClockConfig+0x1c4>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	4916      	ldr	r1, [pc, #88]	; (8003594 <HAL_RCC_ClockConfig+0x1c4>)
 800353a:	4313      	orrs	r3, r2
 800353c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d009      	beq.n	800355e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800354a:	4b12      	ldr	r3, [pc, #72]	; (8003594 <HAL_RCC_ClockConfig+0x1c4>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	490e      	ldr	r1, [pc, #56]	; (8003594 <HAL_RCC_ClockConfig+0x1c4>)
 800355a:	4313      	orrs	r3, r2
 800355c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800355e:	f000 f821 	bl	80035a4 <HAL_RCC_GetSysClockFreq>
 8003562:	4602      	mov	r2, r0
 8003564:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <HAL_RCC_ClockConfig+0x1c4>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	091b      	lsrs	r3, r3, #4
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	490a      	ldr	r1, [pc, #40]	; (8003598 <HAL_RCC_ClockConfig+0x1c8>)
 8003570:	5ccb      	ldrb	r3, [r1, r3]
 8003572:	fa22 f303 	lsr.w	r3, r2, r3
 8003576:	4a09      	ldr	r2, [pc, #36]	; (800359c <HAL_RCC_ClockConfig+0x1cc>)
 8003578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800357a:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <HAL_RCC_ClockConfig+0x1d0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff f80a 	bl	8002598 <HAL_InitTick>

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40022000 	.word	0x40022000
 8003594:	40021000 	.word	0x40021000
 8003598:	08005258 	.word	0x08005258
 800359c:	20000004 	.word	0x20000004
 80035a0:	20000008 	.word	0x20000008

080035a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	2300      	movs	r3, #0
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	2300      	movs	r3, #0
 80035b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035be:	4b1e      	ldr	r3, [pc, #120]	; (8003638 <HAL_RCC_GetSysClockFreq+0x94>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f003 030c 	and.w	r3, r3, #12
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d002      	beq.n	80035d4 <HAL_RCC_GetSysClockFreq+0x30>
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d003      	beq.n	80035da <HAL_RCC_GetSysClockFreq+0x36>
 80035d2:	e027      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035d4:	4b19      	ldr	r3, [pc, #100]	; (800363c <HAL_RCC_GetSysClockFreq+0x98>)
 80035d6:	613b      	str	r3, [r7, #16]
      break;
 80035d8:	e027      	b.n	800362a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	0c9b      	lsrs	r3, r3, #18
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	4a17      	ldr	r2, [pc, #92]	; (8003640 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035e4:	5cd3      	ldrb	r3, [r2, r3]
 80035e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d010      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035f2:	4b11      	ldr	r3, [pc, #68]	; (8003638 <HAL_RCC_GetSysClockFreq+0x94>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	0c5b      	lsrs	r3, r3, #17
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	4a11      	ldr	r2, [pc, #68]	; (8003644 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035fe:	5cd3      	ldrb	r3, [r2, r3]
 8003600:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a0d      	ldr	r2, [pc, #52]	; (800363c <HAL_RCC_GetSysClockFreq+0x98>)
 8003606:	fb03 f202 	mul.w	r2, r3, r2
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	e004      	b.n	800361e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a0c      	ldr	r2, [pc, #48]	; (8003648 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003618:	fb02 f303 	mul.w	r3, r2, r3
 800361c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	613b      	str	r3, [r7, #16]
      break;
 8003622:	e002      	b.n	800362a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003624:	4b05      	ldr	r3, [pc, #20]	; (800363c <HAL_RCC_GetSysClockFreq+0x98>)
 8003626:	613b      	str	r3, [r7, #16]
      break;
 8003628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800362a:	693b      	ldr	r3, [r7, #16]
}
 800362c:	4618      	mov	r0, r3
 800362e:	371c      	adds	r7, #28
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000
 800363c:	007a1200 	.word	0x007a1200
 8003640:	08005270 	.word	0x08005270
 8003644:	08005280 	.word	0x08005280
 8003648:	003d0900 	.word	0x003d0900

0800364c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003650:	4b02      	ldr	r3, [pc, #8]	; (800365c <HAL_RCC_GetHCLKFreq+0x10>)
 8003652:	681b      	ldr	r3, [r3, #0]
}
 8003654:	4618      	mov	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr
 800365c:	20000004 	.word	0x20000004

08003660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003664:	f7ff fff2 	bl	800364c <HAL_RCC_GetHCLKFreq>
 8003668:	4602      	mov	r2, r0
 800366a:	4b05      	ldr	r3, [pc, #20]	; (8003680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	0a1b      	lsrs	r3, r3, #8
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	4903      	ldr	r1, [pc, #12]	; (8003684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003676:	5ccb      	ldrb	r3, [r1, r3]
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800367c:	4618      	mov	r0, r3
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40021000 	.word	0x40021000
 8003684:	08005268 	.word	0x08005268

08003688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800368c:	f7ff ffde 	bl	800364c <HAL_RCC_GetHCLKFreq>
 8003690:	4602      	mov	r2, r0
 8003692:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	0adb      	lsrs	r3, r3, #11
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	4903      	ldr	r1, [pc, #12]	; (80036ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800369e:	5ccb      	ldrb	r3, [r1, r3]
 80036a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021000 	.word	0x40021000
 80036ac:	08005268 	.word	0x08005268

080036b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036b8:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <RCC_Delay+0x34>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a0a      	ldr	r2, [pc, #40]	; (80036e8 <RCC_Delay+0x38>)
 80036be:	fba2 2303 	umull	r2, r3, r2, r3
 80036c2:	0a5b      	lsrs	r3, r3, #9
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	fb02 f303 	mul.w	r3, r2, r3
 80036ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036cc:	bf00      	nop
  }
  while (Delay --);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1e5a      	subs	r2, r3, #1
 80036d2:	60fa      	str	r2, [r7, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1f9      	bne.n	80036cc <RCC_Delay+0x1c>
}
 80036d8:	bf00      	nop
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr
 80036e4:	20000004 	.word	0x20000004
 80036e8:	10624dd3 	.word	0x10624dd3

080036ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d07d      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003708:	2300      	movs	r3, #0
 800370a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800370c:	4b4f      	ldr	r3, [pc, #316]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10d      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003718:	4b4c      	ldr	r3, [pc, #304]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	4a4b      	ldr	r2, [pc, #300]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003722:	61d3      	str	r3, [r2, #28]
 8003724:	4b49      	ldr	r3, [pc, #292]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003730:	2301      	movs	r3, #1
 8003732:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003734:	4b46      	ldr	r3, [pc, #280]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d118      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003740:	4b43      	ldr	r3, [pc, #268]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a42      	ldr	r2, [pc, #264]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374c:	f7fe ff66 	bl	800261c <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003752:	e008      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003754:	f7fe ff62 	bl	800261c <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b64      	cmp	r3, #100	; 0x64
 8003760:	d901      	bls.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e06d      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003766:	4b3a      	ldr	r3, [pc, #232]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003772:	4b36      	ldr	r3, [pc, #216]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d02e      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	429a      	cmp	r2, r3
 800378e:	d027      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003790:	4b2e      	ldr	r3, [pc, #184]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003798:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800379a:	4b2e      	ldr	r3, [pc, #184]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800379c:	2201      	movs	r2, #1
 800379e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037a0:	4b2c      	ldr	r3, [pc, #176]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037a6:	4a29      	ldr	r2, [pc, #164]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d014      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b6:	f7fe ff31 	bl	800261c <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037bc:	e00a      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037be:	f7fe ff2d 	bl	800261c <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e036      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d4:	4b1d      	ldr	r3, [pc, #116]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0ee      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037e0:	4b1a      	ldr	r3, [pc, #104]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	4917      	ldr	r1, [pc, #92]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037f2:	7dfb      	ldrb	r3, [r7, #23]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d105      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f8:	4b14      	ldr	r3, [pc, #80]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	4a13      	ldr	r2, [pc, #76]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003802:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d008      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003810:	4b0e      	ldr	r3, [pc, #56]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	490b      	ldr	r1, [pc, #44]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381e:	4313      	orrs	r3, r2
 8003820:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b00      	cmp	r3, #0
 800382c:	d008      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800382e:	4b07      	ldr	r3, [pc, #28]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	4904      	ldr	r1, [pc, #16]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383c:	4313      	orrs	r3, r2
 800383e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000
 8003850:	40007000 	.word	0x40007000
 8003854:	42420440 	.word	0x42420440

08003858 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	2300      	movs	r3, #0
 8003866:	61fb      	str	r3, [r7, #28]
 8003868:	2300      	movs	r3, #0
 800386a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	2300      	movs	r3, #0
 8003872:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b10      	cmp	r3, #16
 8003878:	d00a      	beq.n	8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b10      	cmp	r3, #16
 800387e:	f200 808a 	bhi.w	8003996 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d045      	beq.n	8003914 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d075      	beq.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800388e:	e082      	b.n	8003996 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003890:	4b46      	ldr	r3, [pc, #280]	; (80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003896:	4b45      	ldr	r3, [pc, #276]	; (80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d07b      	beq.n	800399a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	0c9b      	lsrs	r3, r3, #18
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	4a41      	ldr	r2, [pc, #260]	; (80039b0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80038ac:	5cd3      	ldrb	r3, [r2, r3]
 80038ae:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d015      	beq.n	80038e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038ba:	4b3c      	ldr	r3, [pc, #240]	; (80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	0c5b      	lsrs	r3, r3, #17
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	4a3b      	ldr	r2, [pc, #236]	; (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80038c6:	5cd3      	ldrb	r3, [r2, r3]
 80038c8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00d      	beq.n	80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80038d4:	4a38      	ldr	r2, [pc, #224]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	fb02 f303 	mul.w	r3, r2, r3
 80038e2:	61fb      	str	r3, [r7, #28]
 80038e4:	e004      	b.n	80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4a34      	ldr	r2, [pc, #208]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80038ea:	fb02 f303 	mul.w	r3, r2, r3
 80038ee:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80038f0:	4b2e      	ldr	r3, [pc, #184]	; (80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038fc:	d102      	bne.n	8003904 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	61bb      	str	r3, [r7, #24]
      break;
 8003902:	e04a      	b.n	800399a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	4a2d      	ldr	r2, [pc, #180]	; (80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	085b      	lsrs	r3, r3, #1
 8003910:	61bb      	str	r3, [r7, #24]
      break;
 8003912:	e042      	b.n	800399a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003914:	4b25      	ldr	r3, [pc, #148]	; (80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003924:	d108      	bne.n	8003938 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	e01f      	b.n	8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003942:	d109      	bne.n	8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003944:	4b19      	ldr	r3, [pc, #100]	; (80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003950:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	e00f      	b.n	8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003962:	d11c      	bne.n	800399e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003964:	4b11      	ldr	r3, [pc, #68]	; (80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d016      	beq.n	800399e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003970:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003974:	61bb      	str	r3, [r7, #24]
      break;
 8003976:	e012      	b.n	800399e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003978:	e011      	b.n	800399e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800397a:	f7ff fe85 	bl	8003688 <HAL_RCC_GetPCLK2Freq>
 800397e:	4602      	mov	r2, r0
 8003980:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	0b9b      	lsrs	r3, r3, #14
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	3301      	adds	r3, #1
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003992:	61bb      	str	r3, [r7, #24]
      break;
 8003994:	e004      	b.n	80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003996:	bf00      	nop
 8003998:	e002      	b.n	80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800399a:	bf00      	nop
 800399c:	e000      	b.n	80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800399e:	bf00      	nop
    }
  }
  return (frequency);
 80039a0:	69bb      	ldr	r3, [r7, #24]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3720      	adds	r7, #32
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
 80039b0:	08005284 	.word	0x08005284
 80039b4:	08005294 	.word	0x08005294
 80039b8:	007a1200 	.word	0x007a1200
 80039bc:	003d0900 	.word	0x003d0900
 80039c0:	aaaaaaab 	.word	0xaaaaaaab

080039c4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e07a      	b.n	8003ad0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	7c5b      	ldrb	r3, [r3, #17]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d105      	bne.n	80039f0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fe fce2 	bl	80023b4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fb78 	bl	80040ec <HAL_RTC_WaitForSynchro>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d004      	beq.n	8003a0c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2204      	movs	r2, #4
 8003a06:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e061      	b.n	8003ad0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fc31 	bl	8004274 <RTC_EnterInitMode>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d004      	beq.n	8003a22 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e056      	b.n	8003ad0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0207 	bic.w	r2, r2, #7
 8003a30:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003a3a:	4b27      	ldr	r3, [pc, #156]	; (8003ad8 <HAL_RTC_Init+0x114>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	4a26      	ldr	r2, [pc, #152]	; (8003ad8 <HAL_RTC_Init+0x114>)
 8003a40:	f023 0301 	bic.w	r3, r3, #1
 8003a44:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003a46:	4b24      	ldr	r3, [pc, #144]	; (8003ad8 <HAL_RTC_Init+0x114>)
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	4921      	ldr	r1, [pc, #132]	; (8003ad8 <HAL_RTC_Init+0x114>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a60:	d003      	beq.n	8003a6a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	e00e      	b.n	8003a88 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	f7ff fef4 	bl	8003858 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a70:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d104      	bne.n	8003a82 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e026      	b.n	8003ad0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	3b01      	subs	r3, #1
 8003a86:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	0c1a      	lsrs	r2, r3, #16
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f002 020f 	and.w	r2, r2, #15
 8003a94:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	b292      	uxth	r2, r2
 8003a9e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fc0f 	bl	80042c4 <RTC_ExitInitMode>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d004      	beq.n	8003ab6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2204      	movs	r2, #4
 8003ab0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e00c      	b.n	8003ad0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003ace:	2300      	movs	r3, #0
  }
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40006c00 	.word	0x40006c00

08003adc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003adc:	b590      	push	{r4, r7, lr}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <HAL_RTC_SetTime+0x20>
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e080      	b.n	8003c02 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	7c1b      	ldrb	r3, [r3, #16]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_RTC_SetTime+0x30>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e07a      	b.n	8003c02 <HAL_RTC_SetTime+0x126>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2202      	movs	r2, #2
 8003b16:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d113      	bne.n	8003b46 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003b28:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	785b      	ldrb	r3, [r3, #1]
 8003b30:	4619      	mov	r1, r3
 8003b32:	460b      	mov	r3, r1
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	1a5b      	subs	r3, r3, r1
 8003b38:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003b3a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003b40:	4413      	add	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	e01e      	b.n	8003b84 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fbff 	bl	800434e <RTC_Bcd2ToByte>
 8003b50:	4603      	mov	r3, r0
 8003b52:	461a      	mov	r2, r3
 8003b54:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003b58:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	785b      	ldrb	r3, [r3, #1]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 fbf4 	bl	800434e <RTC_Bcd2ToByte>
 8003b66:	4603      	mov	r3, r0
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003b72:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	789b      	ldrb	r3, [r3, #2]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fbe8 	bl	800434e <RTC_Bcd2ToByte>
 8003b7e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003b80:	4423      	add	r3, r4
 8003b82:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003b84:	6979      	ldr	r1, [r7, #20]
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fb0d 	bl	80041a6 <RTC_WriteTimeCounter>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d007      	beq.n	8003ba2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2204      	movs	r2, #4
 8003b96:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e02f      	b.n	8003c02 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0205 	bic.w	r2, r2, #5
 8003bb0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 fb1e 	bl	80041f4 <RTC_ReadAlarmCounter>
 8003bb8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc0:	d018      	beq.n	8003bf4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d214      	bcs.n	8003bf4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003bd0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003bd4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003bd6:	6939      	ldr	r1, [r7, #16]
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 fb24 	bl	8004226 <RTC_WriteAlarmCounter>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d007      	beq.n	8003bf4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2204      	movs	r2, #4
 8003be8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e006      	b.n	8003c02 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003c00:	2300      	movs	r3, #0
  }
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd90      	pop	{r4, r7, pc}
	...

08003c0c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61bb      	str	r3, [r7, #24]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61fb      	str	r3, [r7, #28]
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	2300      	movs	r3, #0
 8003c26:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_RTC_GetTime+0x28>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0b5      	b.n	8003da4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e0ac      	b.n	8003da4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 fa7b 	bl	8004146 <RTC_ReadTimeCounter>
 8003c50:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	4a55      	ldr	r2, [pc, #340]	; (8003dac <HAL_RTC_GetTime+0x1a0>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	0adb      	lsrs	r3, r3, #11
 8003c5c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4b52      	ldr	r3, [pc, #328]	; (8003dac <HAL_RTC_GetTime+0x1a0>)
 8003c62:	fba3 1302 	umull	r1, r3, r3, r2
 8003c66:	0adb      	lsrs	r3, r3, #11
 8003c68:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003c6c:	fb01 f303 	mul.w	r3, r1, r3
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	4a4f      	ldr	r2, [pc, #316]	; (8003db0 <HAL_RTC_GetTime+0x1a4>)
 8003c74:	fba2 2303 	umull	r2, r3, r2, r3
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	4a4a      	ldr	r2, [pc, #296]	; (8003dac <HAL_RTC_GetTime+0x1a0>)
 8003c84:	fba2 1203 	umull	r1, r2, r2, r3
 8003c88:	0ad2      	lsrs	r2, r2, #11
 8003c8a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003c8e:	fb01 f202 	mul.w	r2, r1, r2
 8003c92:	1a9a      	subs	r2, r3, r2
 8003c94:	4b46      	ldr	r3, [pc, #280]	; (8003db0 <HAL_RTC_GetTime+0x1a4>)
 8003c96:	fba3 1302 	umull	r1, r3, r3, r2
 8003c9a:	0959      	lsrs	r1, r3, #5
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	1a5b      	subs	r3, r3, r1
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	1ad1      	subs	r1, r2, r3
 8003ca6:	b2ca      	uxtb	r2, r1
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b17      	cmp	r3, #23
 8003cb0:	d955      	bls.n	8003d5e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4a3f      	ldr	r2, [pc, #252]	; (8003db4 <HAL_RTC_GetTime+0x1a8>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	091b      	lsrs	r3, r3, #4
 8003cbc:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003cbe:	6939      	ldr	r1, [r7, #16]
 8003cc0:	4b3c      	ldr	r3, [pc, #240]	; (8003db4 <HAL_RTC_GetTime+0x1a8>)
 8003cc2:	fba3 2301 	umull	r2, r3, r3, r1
 8003cc6:	091a      	lsrs	r2, r3, #4
 8003cc8:	4613      	mov	r3, r2
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	4413      	add	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	1aca      	subs	r2, r1, r3
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 fa8b 	bl	80041f4 <RTC_ReadAlarmCounter>
 8003cde:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce6:	d008      	beq.n	8003cfa <HAL_RTC_GetTime+0xee>
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d904      	bls.n	8003cfa <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	e002      	b.n	8003d00 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfe:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	4a2d      	ldr	r2, [pc, #180]	; (8003db8 <HAL_RTC_GetTime+0x1ac>)
 8003d04:	fb02 f303 	mul.w	r3, r2, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003d0e:	69b9      	ldr	r1, [r7, #24]
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 fa48 	bl	80041a6 <RTC_WriteTimeCounter>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e041      	b.n	8003da4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d26:	d00c      	beq.n	8003d42 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003d30:	69f9      	ldr	r1, [r7, #28]
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 fa77 	bl	8004226 <RTC_WriteAlarmCounter>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e030      	b.n	8003da4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003d42:	69f9      	ldr	r1, [r7, #28]
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 fa6e 	bl	8004226 <RTC_WriteAlarmCounter>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e027      	b.n	8003da4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003d54:	6979      	ldr	r1, [r7, #20]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 fb16 	bl	8004388 <RTC_DateUpdate>
 8003d5c:	e003      	b.n	8003d66 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01a      	beq.n	8003da2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 facf 	bl	8004314 <RTC_ByteToBcd2>
 8003d76:	4603      	mov	r3, r0
 8003d78:	461a      	mov	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	785b      	ldrb	r3, [r3, #1]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fac6 	bl	8004314 <RTC_ByteToBcd2>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	789b      	ldrb	r3, [r3, #2]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fabd 	bl	8004314 <RTC_ByteToBcd2>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3720      	adds	r7, #32
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	91a2b3c5 	.word	0x91a2b3c5
 8003db0:	88888889 	.word	0x88888889
 8003db4:	aaaaaaab 	.word	0xaaaaaaab
 8003db8:	00015180 	.word	0x00015180

08003dbc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	61fb      	str	r3, [r7, #28]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_RTC_SetDate+0x24>
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e097      	b.n	8003f14 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	7c1b      	ldrb	r3, [r3, #16]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_RTC_SetDate+0x34>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e091      	b.n	8003f14 <HAL_RTC_SetDate+0x158>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2201      	movs	r2, #1
 8003df4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10c      	bne.n	8003e1c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	78da      	ldrb	r2, [r3, #3]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	785a      	ldrb	r2, [r3, #1]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	789a      	ldrb	r2, [r3, #2]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	739a      	strb	r2, [r3, #14]
 8003e1a:	e01a      	b.n	8003e52 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	78db      	ldrb	r3, [r3, #3]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 fa94 	bl	800434e <RTC_Bcd2ToByte>
 8003e26:	4603      	mov	r3, r0
 8003e28:	461a      	mov	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	785b      	ldrb	r3, [r3, #1]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fa8b 	bl	800434e <RTC_Bcd2ToByte>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	789b      	ldrb	r3, [r3, #2]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fa82 	bl	800434e <RTC_Bcd2ToByte>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	7bdb      	ldrb	r3, [r3, #15]
 8003e56:	4618      	mov	r0, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	7b59      	ldrb	r1, [r3, #13]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	7b9b      	ldrb	r3, [r3, #14]
 8003e60:	461a      	mov	r2, r3
 8003e62:	f000 fb6d 	bl	8004540 <RTC_WeekDayNum>
 8003e66:	4603      	mov	r3, r0
 8003e68:	461a      	mov	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	7b1a      	ldrb	r2, [r3, #12]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f965 	bl	8004146 <RTC_ReadTimeCounter>
 8003e7c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	4a26      	ldr	r2, [pc, #152]	; (8003f1c <HAL_RTC_SetDate+0x160>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	0adb      	lsrs	r3, r3, #11
 8003e88:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2b18      	cmp	r3, #24
 8003e8e:	d93a      	bls.n	8003f06 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	4a23      	ldr	r2, [pc, #140]	; (8003f20 <HAL_RTC_SetDate+0x164>)
 8003e94:	fba2 2303 	umull	r2, r3, r2, r3
 8003e98:	091b      	lsrs	r3, r3, #4
 8003e9a:	4a22      	ldr	r2, [pc, #136]	; (8003f24 <HAL_RTC_SetDate+0x168>)
 8003e9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003ea6:	69f9      	ldr	r1, [r7, #28]
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 f97c 	bl	80041a6 <RTC_WriteTimeCounter>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d007      	beq.n	8003ec4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2204      	movs	r2, #4
 8003eb8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e027      	b.n	8003f14 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 f995 	bl	80041f4 <RTC_ReadAlarmCounter>
 8003eca:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed2:	d018      	beq.n	8003f06 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d214      	bcs.n	8003f06 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003ee2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003ee6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003ee8:	69b9      	ldr	r1, [r7, #24]
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 f99b 	bl	8004226 <RTC_WriteAlarmCounter>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d007      	beq.n	8003f06 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2204      	movs	r2, #4
 8003efa:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e006      	b.n	8003f14 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3720      	adds	r7, #32
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	91a2b3c5 	.word	0x91a2b3c5
 8003f20:	aaaaaaab 	.word	0xaaaaaaab
 8003f24:	00015180 	.word	0x00015180

08003f28 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003f28:	b590      	push	{r4, r7, lr}
 8003f2a:	b089      	sub	sp, #36	; 0x24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8003f34:	2300      	movs	r3, #0
 8003f36:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8003f38:	f107 0314 	add.w	r3, r7, #20
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	460a      	mov	r2, r1
 8003f40:	801a      	strh	r2, [r3, #0]
 8003f42:	460a      	mov	r2, r1
 8003f44:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <HAL_RTC_SetAlarm_IT+0x2a>
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e099      	b.n	800408a <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	7c1b      	ldrb	r3, [r3, #16]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_RTC_SetAlarm_IT+0x3a>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e093      	b.n	800408a <HAL_RTC_SetAlarm_IT+0x162>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2201      	movs	r2, #1
 8003f66:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003f6e:	f107 0314 	add.w	r3, r7, #20
 8003f72:	2200      	movs	r2, #0
 8003f74:	4619      	mov	r1, r3
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f7ff fe48 	bl	8003c0c <HAL_RTC_GetTime>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e081      	b.n	800408a <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003f86:	7d3b      	ldrb	r3, [r7, #20]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003f8e:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8003f92:	7d7b      	ldrb	r3, [r7, #21]
 8003f94:	4619      	mov	r1, r3
 8003f96:	460b      	mov	r3, r1
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	1a5b      	subs	r3, r3, r1
 8003f9c:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003f9e:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8003fa0:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003fa2:	4413      	add	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d113      	bne.n	8003fd4 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003fb6:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	785b      	ldrb	r3, [r3, #1]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	1a5b      	subs	r3, r3, r1
 8003fc6:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003fc8:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003fce:	4413      	add	r3, r2
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	e01e      	b.n	8004012 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 f9b8 	bl	800434e <RTC_Bcd2ToByte>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003fe6:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	785b      	ldrb	r3, [r3, #1]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 f9ad 	bl	800434e <RTC_Bcd2ToByte>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	1a9b      	subs	r3, r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004000:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	789b      	ldrb	r3, [r3, #2]
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f9a1 	bl	800434e <RTC_Bcd2ToByte>
 800400c:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800400e:	4423      	add	r3, r4
 8004010:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	429a      	cmp	r2, r3
 8004018:	d205      	bcs.n	8004026 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004020:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004024:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004026:	69f9      	ldr	r1, [r7, #28]
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f8fc 	bl	8004226 <RTC_WriteAlarmCounter>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2204      	movs	r2, #4
 8004038:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e022      	b.n	800408a <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0202 	bic.w	r2, r2, #2
 8004052:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0202 	orr.w	r2, r2, #2
 8004062:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004064:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <HAL_RTC_SetAlarm_IT+0x16c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a0a      	ldr	r2, [pc, #40]	; (8004094 <HAL_RTC_SetAlarm_IT+0x16c>)
 800406a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406e:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004070:	4b08      	ldr	r3, [pc, #32]	; (8004094 <HAL_RTC_SetAlarm_IT+0x16c>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	4a07      	ldr	r2, [pc, #28]	; (8004094 <HAL_RTC_SetAlarm_IT+0x16c>)
 8004076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800407a:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2201      	movs	r2, #1
 8004080:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004088:	2300      	movs	r3, #0
  }
}
 800408a:	4618      	mov	r0, r3
 800408c:	3724      	adds	r7, #36	; 0x24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd90      	pop	{r4, r7, pc}
 8004092:	bf00      	nop
 8004094:	40010400 	.word	0x40010400

08004098 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d011      	beq.n	80040d2 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7fd fdc7 	bl	8001c50 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0202 	bic.w	r2, r2, #2
 80040d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <HAL_RTC_AlarmIRQHandler+0x50>)
 80040d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040d8:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	745a      	strb	r2, [r3, #17]
}
 80040e0:	bf00      	nop
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40010400 	.word	0x40010400

080040ec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e01d      	b.n	800413e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0208 	bic.w	r2, r2, #8
 8004110:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004112:	f7fe fa83 	bl	800261c <HAL_GetTick>
 8004116:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004118:	e009      	b.n	800412e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800411a:	f7fe fa7f 	bl	800261c <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004128:	d901      	bls.n	800412e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e007      	b.n	800413e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0ee      	beq.n	800411a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004146:	b480      	push	{r7}
 8004148:	b087      	sub	sp, #28
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	827b      	strh	r3, [r7, #18]
 8004152:	2300      	movs	r3, #0
 8004154:	823b      	strh	r3, [r7, #16]
 8004156:	2300      	movs	r3, #0
 8004158:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004176:	8a7a      	ldrh	r2, [r7, #18]
 8004178:	8a3b      	ldrh	r3, [r7, #16]
 800417a:	429a      	cmp	r2, r3
 800417c:	d008      	beq.n	8004190 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800417e:	8a3b      	ldrh	r3, [r7, #16]
 8004180:	041a      	lsls	r2, r3, #16
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	b29b      	uxth	r3, r3
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	e004      	b.n	800419a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004190:	8a7b      	ldrh	r3, [r7, #18]
 8004192:	041a      	lsls	r2, r3, #16
 8004194:	89fb      	ldrh	r3, [r7, #14]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800419a:	697b      	ldr	r3, [r7, #20]
}
 800419c:	4618      	mov	r0, r3
 800419e:	371c      	adds	r7, #28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr

080041a6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b084      	sub	sp, #16
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f85d 	bl	8004274 <RTC_EnterInitMode>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
 80041c4:	e011      	b.n	80041ea <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	0c12      	lsrs	r2, r2, #16
 80041ce:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	b292      	uxth	r2, r2
 80041d8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f872 	bl	80042c4 <RTC_ExitInitMode>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	81fb      	strh	r3, [r7, #14]
 8004200:	2300      	movs	r3, #0
 8004202:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004214:	89fb      	ldrh	r3, [r7, #14]
 8004216:	041a      	lsls	r2, r3, #16
 8004218:	89bb      	ldrh	r3, [r7, #12]
 800421a:	4313      	orrs	r3, r2
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f81d 	bl	8004274 <RTC_EnterInitMode>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	73fb      	strb	r3, [r7, #15]
 8004244:	e011      	b.n	800426a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	0c12      	lsrs	r2, r2, #16
 800424e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	b292      	uxth	r2, r2
 8004258:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f832 	bl	80042c4 <RTC_ExitInitMode>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800426a:	7bfb      	ldrb	r3, [r7, #15]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004280:	f7fe f9cc 	bl	800261c <HAL_GetTick>
 8004284:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004286:	e009      	b.n	800429c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004288:	f7fe f9c8 	bl	800261c <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004296:	d901      	bls.n	800429c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e00f      	b.n	80042bc <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f003 0320 	and.w	r3, r3, #32
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0ee      	beq.n	8004288 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0210 	orr.w	r2, r2, #16
 80042b8:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0210 	bic.w	r2, r2, #16
 80042de:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80042e0:	f7fe f99c 	bl	800261c <HAL_GetTick>
 80042e4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80042e6:	e009      	b.n	80042fc <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80042e8:	f7fe f998 	bl	800261c <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042f6:	d901      	bls.n	80042fc <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e007      	b.n	800430c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0ee      	beq.n	80042e8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004322:	e005      	b.n	8004330 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3301      	adds	r3, #1
 8004328:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	3b0a      	subs	r3, #10
 800432e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	2b09      	cmp	r3, #9
 8004334:	d8f6      	bhi.n	8004324 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	b2da      	uxtb	r2, r3
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	4313      	orrs	r3, r2
 8004342:	b2db      	uxtb	r3, r3
}
 8004344:	4618      	mov	r0, r3
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr

0800434e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800434e:	b480      	push	{r7}
 8004350:	b085      	sub	sp, #20
 8004352:	af00      	add	r7, sp, #0
 8004354:	4603      	mov	r3, r0
 8004356:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800435c:	79fb      	ldrb	r3, [r7, #7]
 800435e:	091b      	lsrs	r3, r3, #4
 8004360:	b2db      	uxtb	r3, r3
 8004362:	461a      	mov	r2, r3
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800436e:	79fb      	ldrb	r3, [r7, #7]
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	b2da      	uxtb	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	4413      	add	r3, r2
 800437c:	b2db      	uxtb	r3, r3
}
 800437e:	4618      	mov	r0, r3
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr

08004388 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	2300      	movs	r3, #0
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	7bdb      	ldrb	r3, [r3, #15]
 80043a6:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	7b5b      	ldrb	r3, [r3, #13]
 80043ac:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	7b9b      	ldrb	r3, [r3, #14]
 80043b2:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80043b4:	2300      	movs	r3, #0
 80043b6:	60bb      	str	r3, [r7, #8]
 80043b8:	e06f      	b.n	800449a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d011      	beq.n	80043e4 <RTC_DateUpdate+0x5c>
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	d00e      	beq.n	80043e4 <RTC_DateUpdate+0x5c>
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2b05      	cmp	r3, #5
 80043ca:	d00b      	beq.n	80043e4 <RTC_DateUpdate+0x5c>
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b07      	cmp	r3, #7
 80043d0:	d008      	beq.n	80043e4 <RTC_DateUpdate+0x5c>
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d005      	beq.n	80043e4 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	2b0a      	cmp	r3, #10
 80043dc:	d002      	beq.n	80043e4 <RTC_DateUpdate+0x5c>
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b0c      	cmp	r3, #12
 80043e2:	d117      	bne.n	8004414 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b1e      	cmp	r3, #30
 80043e8:	d803      	bhi.n	80043f2 <RTC_DateUpdate+0x6a>
      {
        day++;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	3301      	adds	r3, #1
 80043ee:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80043f0:	e050      	b.n	8004494 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2b0c      	cmp	r3, #12
 80043f6:	d005      	beq.n	8004404 <RTC_DateUpdate+0x7c>
        {
          month++;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	3301      	adds	r3, #1
 80043fc:	613b      	str	r3, [r7, #16]
          day = 1U;
 80043fe:	2301      	movs	r3, #1
 8004400:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004402:	e047      	b.n	8004494 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004404:	2301      	movs	r3, #1
 8004406:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004408:	2301      	movs	r3, #1
 800440a:	60fb      	str	r3, [r7, #12]
          year++;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	3301      	adds	r3, #1
 8004410:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004412:	e03f      	b.n	8004494 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	2b04      	cmp	r3, #4
 8004418:	d008      	beq.n	800442c <RTC_DateUpdate+0xa4>
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b06      	cmp	r3, #6
 800441e:	d005      	beq.n	800442c <RTC_DateUpdate+0xa4>
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	2b09      	cmp	r3, #9
 8004424:	d002      	beq.n	800442c <RTC_DateUpdate+0xa4>
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	2b0b      	cmp	r3, #11
 800442a:	d10c      	bne.n	8004446 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b1d      	cmp	r3, #29
 8004430:	d803      	bhi.n	800443a <RTC_DateUpdate+0xb2>
      {
        day++;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	3301      	adds	r3, #1
 8004436:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004438:	e02c      	b.n	8004494 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	3301      	adds	r3, #1
 800443e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004440:	2301      	movs	r3, #1
 8004442:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004444:	e026      	b.n	8004494 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d123      	bne.n	8004494 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b1b      	cmp	r3, #27
 8004450:	d803      	bhi.n	800445a <RTC_DateUpdate+0xd2>
      {
        day++;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	3301      	adds	r3, #1
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	e01c      	b.n	8004494 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b1c      	cmp	r3, #28
 800445e:	d111      	bne.n	8004484 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	b29b      	uxth	r3, r3
 8004464:	4618      	mov	r0, r3
 8004466:	f000 f839 	bl	80044dc <RTC_IsLeapYear>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <RTC_DateUpdate+0xf0>
        {
          day++;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	3301      	adds	r3, #1
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	e00d      	b.n	8004494 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	3301      	adds	r3, #1
 800447c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800447e:	2301      	movs	r3, #1
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	e007      	b.n	8004494 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b1d      	cmp	r3, #29
 8004488:	d104      	bne.n	8004494 <RTC_DateUpdate+0x10c>
      {
        month++;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	3301      	adds	r3, #1
 800448e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004490:	2301      	movs	r3, #1
 8004492:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	3301      	adds	r3, #1
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d38b      	bcc.n	80043ba <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	4619      	mov	r1, r3
 80044c4:	6978      	ldr	r0, [r7, #20]
 80044c6:	f000 f83b 	bl	8004540 <RTC_WeekDayNum>
 80044ca:	4603      	mov	r3, r0
 80044cc:	461a      	mov	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	731a      	strb	r2, [r3, #12]
}
 80044d2:	bf00      	nop
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	e01d      	b.n	8004532 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80044f6:	88fb      	ldrh	r3, [r7, #6]
 80044f8:	4a10      	ldr	r2, [pc, #64]	; (800453c <RTC_IsLeapYear+0x60>)
 80044fa:	fba2 1203 	umull	r1, r2, r2, r3
 80044fe:	0952      	lsrs	r2, r2, #5
 8004500:	2164      	movs	r1, #100	; 0x64
 8004502:	fb01 f202 	mul.w	r2, r1, r2
 8004506:	1a9b      	subs	r3, r3, r2
 8004508:	b29b      	uxth	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800450e:	2301      	movs	r3, #1
 8004510:	e00f      	b.n	8004532 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004512:	88fb      	ldrh	r3, [r7, #6]
 8004514:	4a09      	ldr	r2, [pc, #36]	; (800453c <RTC_IsLeapYear+0x60>)
 8004516:	fba2 1203 	umull	r1, r2, r2, r3
 800451a:	09d2      	lsrs	r2, r2, #7
 800451c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004520:	fb01 f202 	mul.w	r2, r1, r2
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800452c:	2301      	movs	r3, #1
 800452e:	e000      	b.n	8004532 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004530:	2300      	movs	r3, #0
  }
}
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr
 800453c:	51eb851f 	.word	0x51eb851f

08004540 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	70fb      	strb	r3, [r7, #3]
 800454c:	4613      	mov	r3, r2
 800454e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	60bb      	str	r3, [r7, #8]
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800455e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d82d      	bhi.n	80045c2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004566:	78fa      	ldrb	r2, [r7, #3]
 8004568:	4613      	mov	r3, r2
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	4413      	add	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	4a2c      	ldr	r2, [pc, #176]	; (8004624 <RTC_WeekDayNum+0xe4>)
 8004574:	fba2 2303 	umull	r2, r3, r2, r3
 8004578:	085a      	lsrs	r2, r3, #1
 800457a:	78bb      	ldrb	r3, [r7, #2]
 800457c:	441a      	add	r2, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	441a      	add	r2, r3
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	3b01      	subs	r3, #1
 8004586:	089b      	lsrs	r3, r3, #2
 8004588:	441a      	add	r2, r3
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	3b01      	subs	r3, #1
 800458e:	4926      	ldr	r1, [pc, #152]	; (8004628 <RTC_WeekDayNum+0xe8>)
 8004590:	fba1 1303 	umull	r1, r3, r1, r3
 8004594:	095b      	lsrs	r3, r3, #5
 8004596:	1ad2      	subs	r2, r2, r3
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	3b01      	subs	r3, #1
 800459c:	4922      	ldr	r1, [pc, #136]	; (8004628 <RTC_WeekDayNum+0xe8>)
 800459e:	fba1 1303 	umull	r1, r3, r1, r3
 80045a2:	09db      	lsrs	r3, r3, #7
 80045a4:	4413      	add	r3, r2
 80045a6:	1d1a      	adds	r2, r3, #4
 80045a8:	4b20      	ldr	r3, [pc, #128]	; (800462c <RTC_WeekDayNum+0xec>)
 80045aa:	fba3 1302 	umull	r1, r3, r3, r2
 80045ae:	1ad1      	subs	r1, r2, r3
 80045b0:	0849      	lsrs	r1, r1, #1
 80045b2:	440b      	add	r3, r1
 80045b4:	0899      	lsrs	r1, r3, #2
 80045b6:	460b      	mov	r3, r1
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	1a5b      	subs	r3, r3, r1
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	e029      	b.n	8004616 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80045c2:	78fa      	ldrb	r2, [r7, #3]
 80045c4:	4613      	mov	r3, r2
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	4413      	add	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	4a15      	ldr	r2, [pc, #84]	; (8004624 <RTC_WeekDayNum+0xe4>)
 80045d0:	fba2 2303 	umull	r2, r3, r2, r3
 80045d4:	085a      	lsrs	r2, r3, #1
 80045d6:	78bb      	ldrb	r3, [r7, #2]
 80045d8:	441a      	add	r2, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	441a      	add	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	089b      	lsrs	r3, r3, #2
 80045e2:	441a      	add	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4910      	ldr	r1, [pc, #64]	; (8004628 <RTC_WeekDayNum+0xe8>)
 80045e8:	fba1 1303 	umull	r1, r3, r1, r3
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	1ad2      	subs	r2, r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	490d      	ldr	r1, [pc, #52]	; (8004628 <RTC_WeekDayNum+0xe8>)
 80045f4:	fba1 1303 	umull	r1, r3, r1, r3
 80045f8:	09db      	lsrs	r3, r3, #7
 80045fa:	4413      	add	r3, r2
 80045fc:	1c9a      	adds	r2, r3, #2
 80045fe:	4b0b      	ldr	r3, [pc, #44]	; (800462c <RTC_WeekDayNum+0xec>)
 8004600:	fba3 1302 	umull	r1, r3, r3, r2
 8004604:	1ad1      	subs	r1, r2, r3
 8004606:	0849      	lsrs	r1, r1, #1
 8004608:	440b      	add	r3, r1
 800460a:	0899      	lsrs	r1, r3, #2
 800460c:	460b      	mov	r3, r1
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	1a5b      	subs	r3, r3, r1
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	b2db      	uxtb	r3, r3
}
 800461a:	4618      	mov	r0, r3
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr
 8004624:	38e38e39 	.word	0x38e38e39
 8004628:	51eb851f 	.word	0x51eb851f
 800462c:	24924925 	.word	0x24924925

08004630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e076      	b.n	8004730 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	2b00      	cmp	r3, #0
 8004648:	d108      	bne.n	800465c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004652:	d009      	beq.n	8004668 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	61da      	str	r2, [r3, #28]
 800465a:	e005      	b.n	8004668 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fd fec2 	bl	800240c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800469e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ec:	ea42 0103 	orr.w	r1, r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	0c1a      	lsrs	r2, r3, #16
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f002 0204 	and.w	r2, r2, #4
 800470e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	69da      	ldr	r2, [r3, #28]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800471e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004748:	f7fd ff68 	bl	800261c <HAL_GetTick>
 800474c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800474e:	88fb      	ldrh	r3, [r7, #6]
 8004750:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b01      	cmp	r3, #1
 800475c:	d001      	beq.n	8004762 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800475e:	2302      	movs	r3, #2
 8004760:	e12a      	b.n	80049b8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <HAL_SPI_Transmit+0x36>
 8004768:	88fb      	ldrh	r3, [r7, #6]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e122      	b.n	80049b8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_SPI_Transmit+0x48>
 800477c:	2302      	movs	r3, #2
 800477e:	e11b      	b.n	80049b8 <HAL_SPI_Transmit+0x280>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2203      	movs	r2, #3
 800478c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	88fa      	ldrh	r2, [r7, #6]
 80047a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	88fa      	ldrh	r2, [r7, #6]
 80047a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ce:	d10f      	bne.n	80047f0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fa:	2b40      	cmp	r3, #64	; 0x40
 80047fc:	d007      	beq.n	800480e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800480c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004816:	d152      	bne.n	80048be <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <HAL_SPI_Transmit+0xee>
 8004820:	8b7b      	ldrh	r3, [r7, #26]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d145      	bne.n	80048b2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	881a      	ldrh	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	1c9a      	adds	r2, r3, #2
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800484a:	e032      	b.n	80048b2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b02      	cmp	r3, #2
 8004858:	d112      	bne.n	8004880 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	881a      	ldrh	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	1c9a      	adds	r2, r3, #2
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	86da      	strh	r2, [r3, #54]	; 0x36
 800487e:	e018      	b.n	80048b2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004880:	f7fd fecc 	bl	800261c <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d803      	bhi.n	8004898 <HAL_SPI_Transmit+0x160>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004896:	d102      	bne.n	800489e <HAL_SPI_Transmit+0x166>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d109      	bne.n	80048b2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e082      	b.n	80049b8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1c7      	bne.n	800484c <HAL_SPI_Transmit+0x114>
 80048bc:	e053      	b.n	8004966 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <HAL_SPI_Transmit+0x194>
 80048c6:	8b7b      	ldrh	r3, [r7, #26]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d147      	bne.n	800495c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	330c      	adds	r3, #12
 80048d6:	7812      	ldrb	r2, [r2, #0]
 80048d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048f2:	e033      	b.n	800495c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d113      	bne.n	800492a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	330c      	adds	r3, #12
 800490c:	7812      	ldrb	r2, [r2, #0]
 800490e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	86da      	strh	r2, [r3, #54]	; 0x36
 8004928:	e018      	b.n	800495c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800492a:	f7fd fe77 	bl	800261c <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d803      	bhi.n	8004942 <HAL_SPI_Transmit+0x20a>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004940:	d102      	bne.n	8004948 <HAL_SPI_Transmit+0x210>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d109      	bne.n	800495c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e02d      	b.n	80049b8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1c6      	bne.n	80048f4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	6839      	ldr	r1, [r7, #0]
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 fbd2 	bl	8005114 <SPI_EndRxTxTransaction>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2220      	movs	r2, #32
 800497a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10a      	bne.n	800499a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004984:	2300      	movs	r3, #0
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80049b6:	2300      	movs	r3, #0
  }
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3720      	adds	r7, #32
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af02      	add	r7, sp, #8
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	4613      	mov	r3, r2
 80049ce:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d001      	beq.n	80049e0 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80049dc:	2302      	movs	r3, #2
 80049de:	e104      	b.n	8004bea <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049e8:	d112      	bne.n	8004a10 <HAL_SPI_Receive+0x50>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10e      	bne.n	8004a10 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2204      	movs	r2, #4
 80049f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80049fa:	88fa      	ldrh	r2, [r7, #6]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	4613      	mov	r3, r2
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f8f3 	bl	8004bf2 <HAL_SPI_TransmitReceive>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	e0ec      	b.n	8004bea <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a10:	f7fd fe04 	bl	800261c <HAL_GetTick>
 8004a14:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <HAL_SPI_Receive+0x62>
 8004a1c:	88fb      	ldrh	r3, [r7, #6]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e0e1      	b.n	8004bea <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_SPI_Receive+0x74>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e0da      	b.n	8004bea <HAL_SPI_Receive+0x22a>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2204      	movs	r2, #4
 8004a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	88fa      	ldrh	r2, [r7, #6]
 8004a54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	88fa      	ldrh	r2, [r7, #6]
 8004a5a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a82:	d10f      	bne.n	8004aa4 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004aa2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aae:	2b40      	cmp	r3, #64	; 0x40
 8004ab0:	d007      	beq.n	8004ac2 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ac0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d170      	bne.n	8004bac <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004aca:	e035      	b.n	8004b38 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d115      	bne.n	8004b06 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f103 020c 	add.w	r2, r3, #12
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae6:	7812      	ldrb	r2, [r2, #0]
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b04:	e018      	b.n	8004b38 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b06:	f7fd fd89 	bl	800261c <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d803      	bhi.n	8004b1e <HAL_SPI_Receive+0x15e>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1c:	d102      	bne.n	8004b24 <HAL_SPI_Receive+0x164>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d109      	bne.n	8004b38 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e058      	b.n	8004bea <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1c4      	bne.n	8004acc <HAL_SPI_Receive+0x10c>
 8004b42:	e038      	b.n	8004bb6 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d113      	bne.n	8004b7a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	b292      	uxth	r2, r2
 8004b5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	1c9a      	adds	r2, r3, #2
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b78:	e018      	b.n	8004bac <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b7a:	f7fd fd4f 	bl	800261c <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d803      	bhi.n	8004b92 <HAL_SPI_Receive+0x1d2>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b90:	d102      	bne.n	8004b98 <HAL_SPI_Receive+0x1d8>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d109      	bne.n	8004bac <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e01e      	b.n	8004bea <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1c6      	bne.n	8004b44 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	6839      	ldr	r1, [r7, #0]
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 fa58 	bl	8005070 <SPI_EndRxTransaction>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e000      	b.n	8004bea <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004be8:	2300      	movs	r3, #0
  }
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b08a      	sub	sp, #40	; 0x28
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	607a      	str	r2, [r7, #4]
 8004bfe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c00:	2301      	movs	r3, #1
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c04:	f7fd fd0a 	bl	800261c <HAL_GetTick>
 8004c08:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c10:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004c18:	887b      	ldrh	r3, [r7, #2]
 8004c1a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c1c:	7ffb      	ldrb	r3, [r7, #31]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d00c      	beq.n	8004c3c <HAL_SPI_TransmitReceive+0x4a>
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c28:	d106      	bne.n	8004c38 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d102      	bne.n	8004c38 <HAL_SPI_TransmitReceive+0x46>
 8004c32:	7ffb      	ldrb	r3, [r7, #31]
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d001      	beq.n	8004c3c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e17f      	b.n	8004f3c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d005      	beq.n	8004c4e <HAL_SPI_TransmitReceive+0x5c>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <HAL_SPI_TransmitReceive+0x5c>
 8004c48:	887b      	ldrh	r3, [r7, #2]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e174      	b.n	8004f3c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_SPI_TransmitReceive+0x6e>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e16d      	b.n	8004f3c <HAL_SPI_TransmitReceive+0x34a>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d003      	beq.n	8004c7c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2205      	movs	r2, #5
 8004c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	887a      	ldrh	r2, [r7, #2]
 8004c8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	887a      	ldrh	r2, [r7, #2]
 8004c92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	887a      	ldrh	r2, [r7, #2]
 8004c9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	887a      	ldrh	r2, [r7, #2]
 8004ca4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbc:	2b40      	cmp	r3, #64	; 0x40
 8004cbe:	d007      	beq.n	8004cd0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cd8:	d17e      	bne.n	8004dd8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <HAL_SPI_TransmitReceive+0xf6>
 8004ce2:	8afb      	ldrh	r3, [r7, #22]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d16c      	bne.n	8004dc2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	881a      	ldrh	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	1c9a      	adds	r2, r3, #2
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d0c:	e059      	b.n	8004dc2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d11b      	bne.n	8004d54 <HAL_SPI_TransmitReceive+0x162>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d016      	beq.n	8004d54 <HAL_SPI_TransmitReceive+0x162>
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d113      	bne.n	8004d54 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	881a      	ldrh	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	1c9a      	adds	r2, r3, #2
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d119      	bne.n	8004d96 <HAL_SPI_TransmitReceive+0x1a4>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d014      	beq.n	8004d96 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	b292      	uxth	r2, r2
 8004d78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7e:	1c9a      	adds	r2, r3, #2
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d92:	2301      	movs	r3, #1
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d96:	f7fd fc41 	bl	800261c <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d80d      	bhi.n	8004dc2 <HAL_SPI_TransmitReceive+0x1d0>
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dac:	d009      	beq.n	8004dc2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e0bc      	b.n	8004f3c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1a0      	bne.n	8004d0e <HAL_SPI_TransmitReceive+0x11c>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d19b      	bne.n	8004d0e <HAL_SPI_TransmitReceive+0x11c>
 8004dd6:	e082      	b.n	8004ede <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <HAL_SPI_TransmitReceive+0x1f4>
 8004de0:	8afb      	ldrh	r3, [r7, #22]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d171      	bne.n	8004eca <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	330c      	adds	r3, #12
 8004df0:	7812      	ldrb	r2, [r2, #0]
 8004df2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e0c:	e05d      	b.n	8004eca <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d11c      	bne.n	8004e56 <HAL_SPI_TransmitReceive+0x264>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d017      	beq.n	8004e56 <HAL_SPI_TransmitReceive+0x264>
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d114      	bne.n	8004e56 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	330c      	adds	r3, #12
 8004e36:	7812      	ldrb	r2, [r2, #0]
 8004e38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d119      	bne.n	8004e98 <HAL_SPI_TransmitReceive+0x2a6>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d014      	beq.n	8004e98 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e94:	2301      	movs	r3, #1
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e98:	f7fd fbc0 	bl	800261c <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d803      	bhi.n	8004eb0 <HAL_SPI_TransmitReceive+0x2be>
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eae:	d102      	bne.n	8004eb6 <HAL_SPI_TransmitReceive+0x2c4>
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e038      	b.n	8004f3c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d19c      	bne.n	8004e0e <HAL_SPI_TransmitReceive+0x21c>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d197      	bne.n	8004e0e <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ede:	6a3a      	ldr	r2, [r7, #32]
 8004ee0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 f916 	bl	8005114 <SPI_EndRxTxTransaction>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d008      	beq.n	8004f00 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e01d      	b.n	8004f3c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10a      	bne.n	8004f1e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f08:	2300      	movs	r3, #0
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
  }
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3728      	adds	r7, #40	; 0x28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f52:	b2db      	uxtb	r3, r3
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bc80      	pop	{r7}
 8004f5c:	4770      	bx	lr
	...

08004f60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b088      	sub	sp, #32
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f70:	f7fd fb54 	bl	800261c <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	1a9b      	subs	r3, r3, r2
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f80:	f7fd fb4c 	bl	800261c <HAL_GetTick>
 8004f84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f86:	4b39      	ldr	r3, [pc, #228]	; (800506c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	015b      	lsls	r3, r3, #5
 8004f8c:	0d1b      	lsrs	r3, r3, #20
 8004f8e:	69fa      	ldr	r2, [r7, #28]
 8004f90:	fb02 f303 	mul.w	r3, r2, r3
 8004f94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f96:	e054      	b.n	8005042 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9e:	d050      	beq.n	8005042 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fa0:	f7fd fb3c 	bl	800261c <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d902      	bls.n	8004fb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d13d      	bne.n	8005032 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fce:	d111      	bne.n	8004ff4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fd8:	d004      	beq.n	8004fe4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe2:	d107      	bne.n	8004ff4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ffc:	d10f      	bne.n	800501e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800501c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e017      	b.n	8005062 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	3b01      	subs	r3, #1
 8005040:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4013      	ands	r3, r2
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	429a      	cmp	r2, r3
 8005050:	bf0c      	ite	eq
 8005052:	2301      	moveq	r3, #1
 8005054:	2300      	movne	r3, #0
 8005056:	b2db      	uxtb	r3, r3
 8005058:	461a      	mov	r2, r3
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	429a      	cmp	r2, r3
 800505e:	d19b      	bne.n	8004f98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3720      	adds	r7, #32
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	20000004 	.word	0x20000004

08005070 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af02      	add	r7, sp, #8
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005084:	d111      	bne.n	80050aa <SPI_EndRxTransaction+0x3a>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800508e:	d004      	beq.n	800509a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005098:	d107      	bne.n	80050aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050b2:	d117      	bne.n	80050e4 <SPI_EndRxTransaction+0x74>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050bc:	d112      	bne.n	80050e4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2200      	movs	r2, #0
 80050c6:	2101      	movs	r1, #1
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f7ff ff49 	bl	8004f60 <SPI_WaitFlagStateUntilTimeout>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01a      	beq.n	800510a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d8:	f043 0220 	orr.w	r2, r3, #32
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e013      	b.n	800510c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2200      	movs	r2, #0
 80050ec:	2180      	movs	r1, #128	; 0x80
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f7ff ff36 	bl	8004f60 <SPI_WaitFlagStateUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d007      	beq.n	800510a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fe:	f043 0220 	orr.w	r2, r3, #32
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e000      	b.n	800510c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af02      	add	r7, sp, #8
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2201      	movs	r2, #1
 8005128:	2102      	movs	r1, #2
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f7ff ff18 	bl	8004f60 <SPI_WaitFlagStateUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d007      	beq.n	8005146 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513a:	f043 0220 	orr.w	r2, r3, #32
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e013      	b.n	800516e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2200      	movs	r2, #0
 800514e:	2180      	movs	r1, #128	; 0x80
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f7ff ff05 	bl	8004f60 <SPI_WaitFlagStateUntilTimeout>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d007      	beq.n	800516c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005160:	f043 0220 	orr.w	r2, r3, #32
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e000      	b.n	800516e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <memset>:
 8005176:	4603      	mov	r3, r0
 8005178:	4402      	add	r2, r0
 800517a:	4293      	cmp	r3, r2
 800517c:	d100      	bne.n	8005180 <memset+0xa>
 800517e:	4770      	bx	lr
 8005180:	f803 1b01 	strb.w	r1, [r3], #1
 8005184:	e7f9      	b.n	800517a <memset+0x4>
	...

08005188 <__libc_init_array>:
 8005188:	b570      	push	{r4, r5, r6, lr}
 800518a:	2600      	movs	r6, #0
 800518c:	4d0c      	ldr	r5, [pc, #48]	; (80051c0 <__libc_init_array+0x38>)
 800518e:	4c0d      	ldr	r4, [pc, #52]	; (80051c4 <__libc_init_array+0x3c>)
 8005190:	1b64      	subs	r4, r4, r5
 8005192:	10a4      	asrs	r4, r4, #2
 8005194:	42a6      	cmp	r6, r4
 8005196:	d109      	bne.n	80051ac <__libc_init_array+0x24>
 8005198:	f000 f828 	bl	80051ec <_init>
 800519c:	2600      	movs	r6, #0
 800519e:	4d0a      	ldr	r5, [pc, #40]	; (80051c8 <__libc_init_array+0x40>)
 80051a0:	4c0a      	ldr	r4, [pc, #40]	; (80051cc <__libc_init_array+0x44>)
 80051a2:	1b64      	subs	r4, r4, r5
 80051a4:	10a4      	asrs	r4, r4, #2
 80051a6:	42a6      	cmp	r6, r4
 80051a8:	d105      	bne.n	80051b6 <__libc_init_array+0x2e>
 80051aa:	bd70      	pop	{r4, r5, r6, pc}
 80051ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80051b0:	4798      	blx	r3
 80051b2:	3601      	adds	r6, #1
 80051b4:	e7ee      	b.n	8005194 <__libc_init_array+0xc>
 80051b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ba:	4798      	blx	r3
 80051bc:	3601      	adds	r6, #1
 80051be:	e7f2      	b.n	80051a6 <__libc_init_array+0x1e>
 80051c0:	08005298 	.word	0x08005298
 80051c4:	08005298 	.word	0x08005298
 80051c8:	08005298 	.word	0x08005298
 80051cc:	0800529c 	.word	0x0800529c

080051d0 <memcpy>:
 80051d0:	440a      	add	r2, r1
 80051d2:	4291      	cmp	r1, r2
 80051d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80051d8:	d100      	bne.n	80051dc <memcpy+0xc>
 80051da:	4770      	bx	lr
 80051dc:	b510      	push	{r4, lr}
 80051de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051e2:	4291      	cmp	r1, r2
 80051e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051e8:	d1f9      	bne.n	80051de <memcpy+0xe>
 80051ea:	bd10      	pop	{r4, pc}

080051ec <_init>:
 80051ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ee:	bf00      	nop
 80051f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051f2:	bc08      	pop	{r3}
 80051f4:	469e      	mov	lr, r3
 80051f6:	4770      	bx	lr

080051f8 <_fini>:
 80051f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fa:	bf00      	nop
 80051fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051fe:	bc08      	pop	{r3}
 8005200:	469e      	mov	lr, r3
 8005202:	4770      	bx	lr
