
GateWay_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ddc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08005ee8  08005ee8  00015ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060c0  080060c0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080060c0  080060c0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060c0  080060c0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060c0  080060c0  000160c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060c4  080060c4  000160c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080060c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000060  08006128  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08006128  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d3d5  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020b4  00000000  00000000  0002d4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  0002f558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e2  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b2f  00000000  00000000  00030be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fdea  00000000  00000000  00048711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086d4d  00000000  00000000  000584fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a9c  00000000  00000000  000df248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000e2ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08005ed0 	.word	0x08005ed0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08005ed0 	.word	0x08005ed0

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000938:	b4b0      	push	{r4, r5, r7}
 800093a:	b08f      	sub	sp, #60	; 0x3c
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000940:	f240 13b1 	movw	r3, #433	; 0x1b1
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000946:	2307      	movs	r3, #7
 8000948:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 800094c:	2307      	movs	r3, #7
 800094e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000952:	2301      	movs	r3, #1
 8000954:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8000958:	23ff      	movs	r3, #255	; 0xff
 800095a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 800095e:	2364      	movs	r3, #100	; 0x64
 8000960:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8000964:	2308      	movs	r3, #8
 8000966:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	461d      	mov	r5, r3
 800096c:	f107 040c 	add.w	r4, r7, #12
 8000970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000976:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000978:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800097c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	373c      	adds	r7, #60	; 0x3c
 8000984:	46bd      	mov	sp, r7
 8000986:	bcb0      	pop	{r4, r5, r7}
 8000988:	4770      	bx	lr

0800098a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800098a:	b580      	push	{r7, lr}
 800098c:	b084      	sub	sp, #16
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000994:	2101      	movs	r1, #1
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 f9ff 	bl	8000d9a <LoRa_read>
 800099c:	4603      	mov	r3, r0
 800099e:	73bb      	strb	r3, [r7, #14]
	data = read;
 80009a0:	7bbb      	ldrb	r3, [r7, #14]
 80009a2:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d107      	bne.n	80009ba <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80009aa:	7bbb      	ldrb	r3, [r7, #14]
 80009ac:	f023 0307 	bic.w	r3, r3, #7
 80009b0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
 80009b8:	e03e      	b.n	8000a38 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d10c      	bne.n	80009da <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80009c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009c4:	f023 0307 	bic.w	r3, r3, #7
 80009c8:	b25b      	sxtb	r3, r3
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	b25b      	sxtb	r3, r3
 80009d0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2201      	movs	r2, #1
 80009d6:	61da      	str	r2, [r3, #28]
 80009d8:	e02e      	b.n	8000a38 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	2b03      	cmp	r3, #3
 80009de:	d10c      	bne.n	80009fa <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80009e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009e4:	f023 0307 	bic.w	r3, r3, #7
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	f043 0303 	orr.w	r3, r3, #3
 80009ee:	b25b      	sxtb	r3, r3
 80009f0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2203      	movs	r2, #3
 80009f6:	61da      	str	r2, [r3, #28]
 80009f8:	e01e      	b.n	8000a38 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	2b05      	cmp	r3, #5
 80009fe:	d10c      	bne.n	8000a1a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000a00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a04:	f023 0307 	bic.w	r3, r3, #7
 8000a08:	b25b      	sxtb	r3, r3
 8000a0a:	f043 0305 	orr.w	r3, r3, #5
 8000a0e:	b25b      	sxtb	r3, r3
 8000a10:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2205      	movs	r2, #5
 8000a16:	61da      	str	r2, [r3, #28]
 8000a18:	e00e      	b.n	8000a38 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	2b06      	cmp	r3, #6
 8000a1e:	d10b      	bne.n	8000a38 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000a20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a24:	f023 0307 	bic.w	r3, r3, #7
 8000a28:	b25b      	sxtb	r3, r3
 8000a2a:	f043 0306 	orr.w	r3, r3, #6
 8000a2e:	b25b      	sxtb	r3, r3
 8000a30:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2206      	movs	r2, #6
 8000a36:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f000 f9c5 	bl	8000dce <LoRa_write>
	//HAL_Delay(10);
}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	889b      	ldrh	r3, [r3, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	4619      	mov	r1, r3
 8000a68:	f002 f944 	bl	8002cf4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	6998      	ldr	r0, [r3, #24]
 8000a70:	88fa      	ldrh	r2, [r7, #6]
 8000a72:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a76:	68b9      	ldr	r1, [r7, #8]
 8000a78:	f003 fa9c 	bl	8003fb4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000a7c:	bf00      	nop
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f003 fe9c 	bl	80047c0 <HAL_SPI_GetState>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d1f7      	bne.n	8000a7e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	6998      	ldr	r0, [r3, #24]
 8000a92:	8b3a      	ldrh	r2, [r7, #24]
 8000a94:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a98:	6839      	ldr	r1, [r7, #0]
 8000a9a:	f003 fbcf 	bl	800423c <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000a9e:	bf00      	nop
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f003 fe8b 	bl	80047c0 <HAL_SPI_GetState>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d1f7      	bne.n	8000aa0 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	6818      	ldr	r0, [r3, #0]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	889b      	ldrh	r3, [r3, #4]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4619      	mov	r1, r3
 8000abc:	f002 f91a 	bl	8002cf4 <HAL_GPIO_WritePin>
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	6818      	ldr	r0, [r3, #0]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	889b      	ldrh	r3, [r3, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f002 f906 	bl	8002cf4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	6998      	ldr	r0, [r3, #24]
 8000aec:	88fa      	ldrh	r2, [r7, #6]
 8000aee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000af2:	68b9      	ldr	r1, [r7, #8]
 8000af4:	f003 fa5e 	bl	8003fb4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000af8:	bf00      	nop
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f003 fe5e 	bl	80047c0 <HAL_SPI_GetState>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d1f7      	bne.n	8000afa <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	6998      	ldr	r0, [r3, #24]
 8000b0e:	8b3a      	ldrh	r2, [r7, #24]
 8000b10:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b14:	6839      	ldr	r1, [r7, #0]
 8000b16:	f003 fa4d 	bl	8003fb4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000b1a:	bf00      	nop
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f003 fe4d 	bl	80047c0 <HAL_SPI_GetState>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d1f7      	bne.n	8000b1c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	6818      	ldr	r0, [r3, #0]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	889b      	ldrh	r3, [r3, #4]
 8000b34:	2201      	movs	r2, #1
 8000b36:	4619      	mov	r1, r3
 8000b38:	f002 f8dc 	bl	8002cf4 <HAL_GPIO_WritePin>
}
 8000b3c:	bf00      	nop
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000b50:	2126      	movs	r1, #38	; 0x26
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f000 f921 	bl	8000d9a <LoRa_read>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	73bb      	strb	r3, [r7, #14]

	if(value)
 8000b5c:	78fb      	ldrb	r3, [r7, #3]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d004      	beq.n	8000b6c <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000b62:	7bbb      	ldrb	r3, [r7, #14]
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	73fb      	strb	r3, [r7, #15]
 8000b6a:	e003      	b.n	8000b74 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000b6c:	7bbb      	ldrb	r3, [r7, #14]
 8000b6e:	f023 0308 	bic.w	r3, r3, #8
 8000b72:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	461a      	mov	r2, r3
 8000b78:	2126      	movs	r1, #38	; 0x26
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f000 f927 	bl	8000dce <LoRa_write>
	HAL_Delay(10);
 8000b80:	200a      	movs	r0, #10
 8000b82:	f001 fd4f 	bl	8002624 <HAL_Delay>
}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b096      	sub	sp, #88	; 0x58
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000b98:	4a17      	ldr	r2, [pc, #92]	; (8000bf8 <LoRa_setAutoLDO+0x68>)
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	2250      	movs	r2, #80	; 0x50
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f004 fd36 	bl	8005614 <memcpy>

	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bae:	461a      	mov	r2, r3
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	4093      	lsls	r3, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fc1b 	bl	80003f0 <__aeabi_i2d>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	3358      	adds	r3, #88	; 0x58
 8000bc4:	443b      	add	r3, r7
 8000bc6:	3b50      	subs	r3, #80	; 0x50
 8000bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bcc:	f7ff fda4 	bl	8000718 <__aeabi_ddiv>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	4610      	mov	r0, r2
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f7ff fe86 	bl	80008e8 <__aeabi_d2iz>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b10      	cmp	r3, #16
 8000be0:	bfcc      	ite	gt
 8000be2:	2301      	movgt	r3, #1
 8000be4:	2300      	movle	r3, #0
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	4619      	mov	r1, r3
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ffaa 	bl	8000b44 <LoRa_setLowDaraRateOptimization>
}
 8000bf0:	bf00      	nop
 8000bf2:	3758      	adds	r7, #88	; 0x58
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	08005ee8 	.word	0x08005ee8

08000bfc <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	04db      	lsls	r3, r3, #19
 8000c0a:	115b      	asrs	r3, r3, #5
 8000c0c:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	0c1b      	lsrs	r3, r3, #16
 8000c12:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000c14:	7afb      	ldrb	r3, [r7, #11]
 8000c16:	461a      	mov	r2, r3
 8000c18:	2106      	movs	r1, #6
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 f8d7 	bl	8000dce <LoRa_write>
	HAL_Delay(5);
 8000c20:	2005      	movs	r0, #5
 8000c22:	f001 fcff 	bl	8002624 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000c2c:	7afb      	ldrb	r3, [r7, #11]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	2107      	movs	r1, #7
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f000 f8cb 	bl	8000dce <LoRa_write>
	HAL_Delay(5);
 8000c38:	2005      	movs	r0, #5
 8000c3a:	f001 fcf3 	bl	8002624 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000c42:	7afb      	ldrb	r3, [r7, #11]
 8000c44:	461a      	mov	r2, r3
 8000c46:	2108      	movs	r1, #8
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f000 f8c0 	bl	8000dce <LoRa_write>
	HAL_Delay(5);
 8000c4e:	2005      	movs	r0, #5
 8000c50:	f001 fce8 	bl	8002624 <HAL_Delay>
}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	2b0c      	cmp	r3, #12
 8000c6a:	dd01      	ble.n	8000c70 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	dc01      	bgt.n	8000c7a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000c76:	2307      	movs	r3, #7
 8000c78:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000c7a:	211e      	movs	r1, #30
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f000 f88c 	bl	8000d9a <LoRa_read>
 8000c82:	4603      	mov	r3, r0
 8000c84:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000c86:	200a      	movs	r0, #10
 8000c88:	f001 fccc 	bl	8002624 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	011b      	lsls	r3, r3, #4
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	4413      	add	r3, r2
 8000c9e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000ca0:	7bbb      	ldrb	r3, [r7, #14]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	211e      	movs	r1, #30
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f000 f891 	bl	8000dce <LoRa_write>
	HAL_Delay(10);
 8000cac:	200a      	movs	r0, #10
 8000cae:	f001 fcb9 	bl	8002624 <HAL_Delay>

	LoRa_setAutoLDO(_LoRa);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff ff6c 	bl	8000b90 <LoRa_setAutoLDO>
}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	2109      	movs	r1, #9
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 f87b 	bl	8000dce <LoRa_write>
	HAL_Delay(10);
 8000cd8:	200a      	movs	r0, #10
 8000cda:	f001 fca3 	bl	8002624 <HAL_Delay>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000cf8:	78fb      	ldrb	r3, [r7, #3]
 8000cfa:	2b2c      	cmp	r3, #44	; 0x2c
 8000cfc:	d801      	bhi.n	8000d02 <LoRa_setOCP+0x1a>
		current = 45;
 8000cfe:	232d      	movs	r3, #45	; 0x2d
 8000d00:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000d02:	78fb      	ldrb	r3, [r7, #3]
 8000d04:	2bf0      	cmp	r3, #240	; 0xf0
 8000d06:	d901      	bls.n	8000d0c <LoRa_setOCP+0x24>
		current = 240;
 8000d08:	23f0      	movs	r3, #240	; 0xf0
 8000d0a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8000d0c:	78fb      	ldrb	r3, [r7, #3]
 8000d0e:	2b78      	cmp	r3, #120	; 0x78
 8000d10:	d809      	bhi.n	8000d26 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000d12:	78fb      	ldrb	r3, [r7, #3]
 8000d14:	3b2d      	subs	r3, #45	; 0x2d
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <LoRa_setOCP+0x78>)
 8000d18:	fb82 1203 	smull	r1, r2, r2, r3
 8000d1c:	1052      	asrs	r2, r2, #1
 8000d1e:	17db      	asrs	r3, r3, #31
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	73fb      	strb	r3, [r7, #15]
 8000d24:	e00b      	b.n	8000d3e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000d26:	78fb      	ldrb	r3, [r7, #3]
 8000d28:	2bf0      	cmp	r3, #240	; 0xf0
 8000d2a:	d808      	bhi.n	8000d3e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	331e      	adds	r3, #30
 8000d30:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <LoRa_setOCP+0x78>)
 8000d32:	fb82 1203 	smull	r1, r2, r2, r3
 8000d36:	1092      	asrs	r2, r2, #2
 8000d38:	17db      	asrs	r3, r3, #31
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	3320      	adds	r3, #32
 8000d42:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	461a      	mov	r2, r3
 8000d48:	210b      	movs	r1, #11
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 f83f 	bl	8000dce <LoRa_write>
	HAL_Delay(10);
 8000d50:	200a      	movs	r0, #10
 8000d52:	f001 fc67 	bl	8002624 <HAL_Delay>
}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	66666667 	.word	0x66666667

08000d64 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000d6c:	211e      	movs	r1, #30
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 f813 	bl	8000d9a <LoRa_read>
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	f043 0307 	orr.w	r3, r3, #7
 8000d7e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000d80:	7bbb      	ldrb	r3, [r7, #14]
 8000d82:	461a      	mov	r2, r3
 8000d84:	211e      	movs	r1, #30
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f821 	bl	8000dce <LoRa_write>
	HAL_Delay(10);
 8000d8c:	200a      	movs	r0, #10
 8000d8e:	f001 fc49 	bl	8002624 <HAL_Delay>
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af02      	add	r7, sp, #8
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	460b      	mov	r3, r1
 8000da4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000da6:	78fb      	ldrb	r3, [r7, #3]
 8000da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000db0:	f107 030f 	add.w	r3, r7, #15
 8000db4:	f107 010e 	add.w	r1, r7, #14
 8000db8:	2201      	movs	r2, #1
 8000dba:	9200      	str	r2, [sp, #0]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff fe44 	bl	8000a4c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af02      	add	r7, sp, #8
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	70fb      	strb	r3, [r7, #3]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000dde:	78fb      	ldrb	r3, [r7, #3]
 8000de0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000de8:	78bb      	ldrb	r3, [r7, #2]
 8000dea:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000dec:	f107 030f 	add.w	r3, r7, #15
 8000df0:	f107 010e 	add.w	r1, r7, #14
 8000df4:	2201      	movs	r2, #1
 8000df6:	9200      	str	r2, [sp, #0]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff fe64 	bl	8000ac8 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	607a      	str	r2, [r7, #4]
 8000e12:	461a      	mov	r2, r3
 8000e14:	460b      	mov	r3, r1
 8000e16:	72fb      	strb	r3, [r7, #11]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8000e1c:	7afb      	ldrb	r3, [r7, #11]
 8000e1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	889b      	ldrh	r3, [r3, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	4619      	mov	r1, r3
 8000e32:	f001 ff5f 	bl	8002cf4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6998      	ldr	r0, [r3, #24]
 8000e3a:	f107 0117 	add.w	r1, r7, #23
 8000e3e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e42:	2201      	movs	r2, #1
 8000e44:	f003 f8b6 	bl	8003fb4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e48:	bf00      	nop
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 fcb6 	bl	80047c0 <HAL_SPI_GetState>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d1f7      	bne.n	8000e4a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6998      	ldr	r0, [r3, #24]
 8000e5e:	7abb      	ldrb	r3, [r7, #10]
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f003 f8a4 	bl	8003fb4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e6c:	bf00      	nop
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 fca4 	bl	80047c0 <HAL_SPI_GetState>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d1f7      	bne.n	8000e6e <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	6818      	ldr	r0, [r3, #0]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	889b      	ldrh	r3, [r3, #4]
 8000e86:	2201      	movs	r2, #1
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f001 ff33 	bl	8002cf4 <HAL_GPIO_WritePin>
}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]

	return 1;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b086      	sub	sp, #24
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	60f8      	str	r0, [r7, #12]
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	460b      	mov	r3, r1
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	69db      	ldr	r3, [r3, #28]
 8000ec4:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f7ff fd5e 	bl	800098a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000ece:	210e      	movs	r1, #14
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f7ff ff62 	bl	8000d9a <LoRa_read>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000eda:	7cfb      	ldrb	r3, [r7, #19]
 8000edc:	461a      	mov	r2, r3
 8000ede:	210d      	movs	r1, #13
 8000ee0:	68f8      	ldr	r0, [r7, #12]
 8000ee2:	f7ff ff74 	bl	8000dce <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	2122      	movs	r1, #34	; 0x22
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f7ff ff6e 	bl	8000dce <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f7ff ff85 	bl	8000e08 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000efe:	2103      	movs	r1, #3
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f7ff fd42 	bl	800098a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000f06:	2112      	movs	r1, #18
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f7ff ff46 	bl	8000d9a <LoRa_read>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8000f12:	7cfb      	ldrb	r3, [r7, #19]
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d00a      	beq.n	8000f32 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000f1c:	22ff      	movs	r2, #255	; 0xff
 8000f1e:	2112      	movs	r1, #18
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f7ff ff54 	bl	8000dce <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000f26:	6979      	ldr	r1, [r7, #20]
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f7ff fd2e 	bl	800098a <LoRa_gotoMode>
			return 1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00f      	b.n	8000f52 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	80bb      	strh	r3, [r7, #4]
 8000f38:	88bb      	ldrh	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d105      	bne.n	8000f4a <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8000f3e:	6979      	ldr	r1, [r7, #20]
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f7ff fd22 	bl	800098a <LoRa_gotoMode>
				return 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e003      	b.n	8000f52 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f001 fb6a 	bl	8002624 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000f50:	e7d9      	b.n	8000f06 <LoRa_transmit+0x5c>
	}
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000f62:	2105      	movs	r1, #5
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff fd10 	bl	800098a <LoRa_gotoMode>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000f72:	b590      	push	{r4, r7, lr}
 8000f74:	b089      	sub	sp, #36	; 0x24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
 8000f88:	e007      	b.n	8000f9a <LoRa_receive+0x28>
		data[i]=0;
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	4413      	add	r3, r2
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	3301      	adds	r3, #1
 8000f98:	61bb      	str	r3, [r7, #24]
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	dbf3      	blt.n	8000f8a <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f7ff fcf0 	bl	800098a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000faa:	2112      	movs	r1, #18
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f7ff fef4 	bl	8000d9a <LoRa_read>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000fb6:	7cfb      	ldrb	r3, [r7, #19]
 8000fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d02f      	beq.n	8001020 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000fc0:	22ff      	movs	r2, #255	; 0xff
 8000fc2:	2112      	movs	r1, #18
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f7ff ff02 	bl	8000dce <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000fca:	2113      	movs	r1, #19
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f7ff fee4 	bl	8000d9a <LoRa_read>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f7ff fede 	bl	8000d9a <LoRa_read>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000fe2:	7cfb      	ldrb	r3, [r7, #19]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	210d      	movs	r1, #13
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f7ff fef0 	bl	8000dce <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000fee:	7cba      	ldrb	r2, [r7, #18]
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	bf28      	it	cs
 8000ff6:	4613      	movcs	r3, r2
 8000ff8:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	e00b      	b.n	8001018 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	18d4      	adds	r4, r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f7ff fec6 	bl	8000d9a <LoRa_read>
 800100e:	4603      	mov	r3, r0
 8001010:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	7ffb      	ldrb	r3, [r7, #31]
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbef      	blt.n	8001000 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001020:	2105      	movs	r1, #5
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f7ff fcb1 	bl	800098a <LoRa_gotoMode>
    return min;
 8001028:	7ffb      	ldrb	r3, [r7, #31]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd90      	pop	{r4, r7, pc}

08001032 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001032:	b580      	push	{r7, lr}
 8001034:	b084      	sub	sp, #16
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ff2b 	bl	8000e96 <LoRa_isvalid>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 8096 	beq.w	8001174 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001048:	2100      	movs	r1, #0
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff fc9d 	bl	800098a <LoRa_gotoMode>
			HAL_Delay(10);
 8001050:	200a      	movs	r0, #10
 8001052:	f001 fae7 	bl	8002624 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001056:	2101      	movs	r1, #1
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff fe9e 	bl	8000d9a <LoRa_read>
 800105e:	4603      	mov	r3, r0
 8001060:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001062:	200a      	movs	r0, #10
 8001064:	f001 fade 	bl	8002624 <HAL_Delay>
			data = read | 0x80;
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800106e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001070:	7bbb      	ldrb	r3, [r7, #14]
 8001072:	461a      	mov	r2, r3
 8001074:	2101      	movs	r1, #1
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fea9 	bl	8000dce <LoRa_write>
			HAL_Delay(100);
 800107c:	2064      	movs	r0, #100	; 0x64
 800107e:	f001 fad1 	bl	8002624 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4619      	mov	r1, r3
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff fdb7 	bl	8000bfc <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001094:	4619      	mov	r1, r3
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fe12 	bl	8000cc0 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80010a2:	4619      	mov	r1, r3
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff fe1f 	bl	8000ce8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80010aa:	2223      	movs	r2, #35	; 0x23
 80010ac:	210c      	movs	r1, #12
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fe8d 	bl	8000dce <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff fe55 	bl	8000d64 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff fdca 	bl	8000c5c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80010c8:	22ff      	movs	r2, #255	; 0xff
 80010ca:	211f      	movs	r1, #31
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff fe7e 	bl	8000dce <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010dc:	011b      	lsls	r3, r3, #4
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	4413      	add	r3, r2
 80010ec:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	461a      	mov	r2, r3
 80010f2:	211d      	movs	r1, #29
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff fe6a 	bl	8000dce <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff fd48 	bl	8000b90 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	b29b      	uxth	r3, r3
 8001108:	b2db      	uxtb	r3, r3
 800110a:	461a      	mov	r2, r3
 800110c:	2120      	movs	r1, #32
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fe5d 	bl	8000dce <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001118:	b2db      	uxtb	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	2121      	movs	r1, #33	; 0x21
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fe55 	bl	8000dce <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001124:	2140      	movs	r1, #64	; 0x40
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff fe37 	bl	8000d9a <LoRa_read>
 800112c:	4603      	mov	r3, r0
 800112e:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001136:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001138:	7bbb      	ldrb	r3, [r7, #14]
 800113a:	461a      	mov	r2, r3
 800113c:	2140      	movs	r1, #64	; 0x40
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff fe45 	bl	8000dce <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001144:	2101      	movs	r1, #1
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fc1f 	bl	800098a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001152:	200a      	movs	r0, #10
 8001154:	f001 fa66 	bl	8002624 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001158:	2142      	movs	r1, #66	; 0x42
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff fe1d 	bl	8000d9a <LoRa_read>
 8001160:	4603      	mov	r3, r0
 8001162:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	2b12      	cmp	r3, #18
 8001168:	d101      	bne.n	800116e <LoRa_init+0x13c>
				return LORA_OK;
 800116a:	23c8      	movs	r3, #200	; 0xc8
 800116c:	e004      	b.n	8001178 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 800116e:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8001172:	e001      	b.n	8001178 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8001174:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af02      	add	r7, sp, #8
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	f023 030f 	bic.w	r3, r3, #15
 8001190:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f043 030c 	orr.w	r3, r3, #12
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 80011ac:	7bbb      	ldrb	r3, [r7, #14]
 80011ae:	f043 030c 	orr.w	r3, r3, #12
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011c0:	f107 0208 	add.w	r2, r7, #8
 80011c4:	2364      	movs	r3, #100	; 0x64
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2304      	movs	r3, #4
 80011ca:	214e      	movs	r1, #78	; 0x4e
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <lcd_send_cmd+0x5c>)
 80011ce:	f001 ff05 	bl	8002fdc <HAL_I2C_Master_Transmit>
}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200000e8 	.word	0x200000e8

080011e0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f023 030f 	bic.w	r3, r3, #15
 80011f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	f043 030d 	orr.w	r3, r3, #13
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	f043 0309 	orr.w	r3, r3, #9
 8001208:	b2db      	uxtb	r3, r3
 800120a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 800120c:	7bbb      	ldrb	r3, [r7, #14]
 800120e:	f043 030d 	orr.w	r3, r3, #13
 8001212:	b2db      	uxtb	r3, r3
 8001214:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 8001216:	7bbb      	ldrb	r3, [r7, #14]
 8001218:	f043 0309 	orr.w	r3, r3, #9
 800121c:	b2db      	uxtb	r3, r3
 800121e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001220:	f107 0208 	add.w	r2, r7, #8
 8001224:	2364      	movs	r3, #100	; 0x64
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2304      	movs	r3, #4
 800122a:	214e      	movs	r1, #78	; 0x4e
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <lcd_send_data+0x5c>)
 800122e:	f001 fed5 	bl	8002fdc <HAL_I2C_Master_Transmit>
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200000e8 	.word	0x200000e8

08001240 <lcd_clear>:


void lcd_clear(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);  // Lệnh "clear display"
 8001244:	2001      	movs	r0, #1
 8001246:	f7ff ff9b 	bl	8001180 <lcd_send_cmd>
    HAL_Delay(2);        // Delay khoảng 2ms để LCD xử lý
 800124a:	2002      	movs	r0, #2
 800124c:	f001 f9ea 	bl	8002624 <HAL_Delay>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}

08001254 <lcd_put_cur>:
//		lcd_send_data (' ');
//	}
//}

void lcd_put_cur(int row, int col)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
    switch (row)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b03      	cmp	r3, #3
 8001262:	d81f      	bhi.n	80012a4 <lcd_put_cur+0x50>
 8001264:	a201      	add	r2, pc, #4	; (adr r2, 800126c <lcd_put_cur+0x18>)
 8001266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126a:	bf00      	nop
 800126c:	0800127d 	.word	0x0800127d
 8001270:	08001287 	.word	0x08001287
 8001274:	08001291 	.word	0x08001291
 8001278:	0800129b 	.word	0x0800129b
    {
        case 0:
            col |= 0x80;  // Dòng 1
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001282:	603b      	str	r3, [r7, #0]
            break;
 8001284:	e00e      	b.n	80012a4 <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;  // Dòng 2
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800128c:	603b      	str	r3, [r7, #0]
            break;
 800128e:	e009      	b.n	80012a4 <lcd_put_cur+0x50>
        case 2:
            col |= 0x94;  // Dòng 3
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	f043 0394 	orr.w	r3, r3, #148	; 0x94
 8001296:	603b      	str	r3, [r7, #0]
            break;
 8001298:	e004      	b.n	80012a4 <lcd_put_cur+0x50>
        case 3:
            col |= 0xD4;  // Dòng 4
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	f043 03d4 	orr.w	r3, r3, #212	; 0xd4
 80012a0:	603b      	str	r3, [r7, #0]
            break;
 80012a2:	bf00      	nop
    }

    lcd_send_cmd (col);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff69 	bl	8001180 <lcd_send_cmd>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop

080012b8 <lcd_init>:


void lcd_init (void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80012bc:	2032      	movs	r0, #50	; 0x32
 80012be:	f001 f9b1 	bl	8002624 <HAL_Delay>
	lcd_send_cmd (0x30);
 80012c2:	2030      	movs	r0, #48	; 0x30
 80012c4:	f7ff ff5c 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80012c8:	2005      	movs	r0, #5
 80012ca:	f001 f9ab 	bl	8002624 <HAL_Delay>
	lcd_send_cmd (0x30);
 80012ce:	2030      	movs	r0, #48	; 0x30
 80012d0:	f7ff ff56 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80012d4:	2001      	movs	r0, #1
 80012d6:	f001 f9a5 	bl	8002624 <HAL_Delay>
	lcd_send_cmd (0x30);
 80012da:	2030      	movs	r0, #48	; 0x30
 80012dc:	f7ff ff50 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(10);
 80012e0:	200a      	movs	r0, #10
 80012e2:	f001 f99f 	bl	8002624 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80012e6:	2020      	movs	r0, #32
 80012e8:	f7ff ff4a 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(10);
 80012ec:	200a      	movs	r0, #10
 80012ee:	f001 f999 	bl	8002624 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80012f2:	2028      	movs	r0, #40	; 0x28
 80012f4:	f7ff ff44 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(1);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f001 f993 	bl	8002624 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80012fe:	2008      	movs	r0, #8
 8001300:	f7ff ff3e 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(1);
 8001304:	2001      	movs	r0, #1
 8001306:	f001 f98d 	bl	8002624 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800130a:	2001      	movs	r0, #1
 800130c:	f7ff ff38 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(1);
 8001310:	2001      	movs	r0, #1
 8001312:	f001 f987 	bl	8002624 <HAL_Delay>
	HAL_Delay(1);
 8001316:	2001      	movs	r0, #1
 8001318:	f001 f984 	bl	8002624 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800131c:	2006      	movs	r0, #6
 800131e:	f7ff ff2f 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(1);
 8001322:	2001      	movs	r0, #1
 8001324:	f001 f97e 	bl	8002624 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001328:	200c      	movs	r0, #12
 800132a:	f7ff ff29 	bl	8001180 <lcd_send_cmd>
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}

08001332 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800133a:	e006      	b.n	800134a <lcd_send_string+0x18>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff4b 	bl	80011e0 <lcd_send_data>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f4      	bne.n	800133c <lcd_send_string+0xa>
}
 8001352:	bf00      	nop
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800135c:	b5b0      	push	{r4, r5, r7, lr}
 800135e:	b08e      	sub	sp, #56	; 0x38
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001362:	f001 f8fd 	bl	8002560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001366:	f000 f975 	bl	8001654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800136a:	f000 fa47 	bl	80017fc <MX_GPIO_Init>
  MX_I2C1_Init();
 800136e:	f000 f9b7 	bl	80016e0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001372:	f000 f9e3 	bl	800173c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001376:	f000 fa17 	bl	80017a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800137a:	f7ff ff9d 	bl	80012b8 <lcd_init>
  water_relay = 0; // 0: OFF, 1: ON
 800137e:	4b9d      	ldr	r3, [pc, #628]	; (80015f4 <main+0x298>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
  light_relay = 0; // 0: OFF, 1: ON
 8001384:	4b9c      	ldr	r3, [pc, #624]	; (80015f8 <main+0x29c>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
  fan_relay = 0; // 0: OFF, 1: ON
 800138a:	4b9c      	ldr	r3, [pc, #624]	; (80015fc <main+0x2a0>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
  relay_state = 0;
 8001390:	4b9b      	ldr	r3, [pc, #620]	; (8001600 <main+0x2a4>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]

//LORA STATUS CONFIG
  myLoRa = newLoRa();
 8001396:	4c9b      	ldr	r4, [pc, #620]	; (8001604 <main+0x2a8>)
 8001398:	463b      	mov	r3, r7
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff facc 	bl	8000938 <newLoRa>
 80013a0:	4625      	mov	r5, r4
 80013a2:	463c      	mov	r4, r7
 80013a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ac:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80013b0:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = NSS_GPIO_Port;
 80013b4:	4b93      	ldr	r3, [pc, #588]	; (8001604 <main+0x2a8>)
 80013b6:	4a94      	ldr	r2, [pc, #592]	; (8001608 <main+0x2ac>)
 80013b8:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 80013ba:	4b92      	ldr	r3, [pc, #584]	; (8001604 <main+0x2a8>)
 80013bc:	2201      	movs	r2, #1
 80013be:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 80013c0:	4b90      	ldr	r3, [pc, #576]	; (8001604 <main+0x2a8>)
 80013c2:	4a91      	ldr	r2, [pc, #580]	; (8001608 <main+0x2ac>)
 80013c4:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 80013c6:	4b8f      	ldr	r3, [pc, #572]	; (8001604 <main+0x2a8>)
 80013c8:	2202      	movs	r2, #2
 80013ca:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 80013cc:	4b8d      	ldr	r3, [pc, #564]	; (8001604 <main+0x2a8>)
 80013ce:	4a8e      	ldr	r2, [pc, #568]	; (8001608 <main+0x2ac>)
 80013d0:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 80013d2:	4b8c      	ldr	r3, [pc, #560]	; (8001604 <main+0x2a8>)
 80013d4:	2204      	movs	r2, #4
 80013d6:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 80013d8:	4b8a      	ldr	r3, [pc, #552]	; (8001604 <main+0x2a8>)
 80013da:	4a8c      	ldr	r2, [pc, #560]	; (800160c <main+0x2b0>)
 80013dc:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 440;             // default = 433 MHz
 80013de:	4b89      	ldr	r3, [pc, #548]	; (8001604 <main+0x2a8>)
 80013e0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80013e4:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 80013e6:	4b87      	ldr	r3, [pc, #540]	; (8001604 <main+0x2a8>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  myLoRa.bandWidth             = BW_31_25KHz;       // default = BW_125KHz
 80013ee:	4b85      	ldr	r3, [pc, #532]	; (8001604 <main+0x2a8>)
 80013f0:	2204      	movs	r2, #4
 80013f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 80013f6:	4b83      	ldr	r3, [pc, #524]	; (8001604 <main+0x2a8>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 80013fe:	4b81      	ldr	r3, [pc, #516]	; (8001604 <main+0x2a8>)
 8001400:	22ff      	movs	r2, #255	; 0xff
 8001402:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  myLoRa.overCurrentProtection = 130;             // default = 100 mA
 8001406:	4b7f      	ldr	r3, [pc, #508]	; (8001604 <main+0x2a8>)
 8001408:	2282      	movs	r2, #130	; 0x82
 800140a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  myLoRa.preamble              = 9;              // default = 8;
 800140e:	4b7d      	ldr	r3, [pc, #500]	; (8001604 <main+0x2a8>)
 8001410:	2209      	movs	r2, #9
 8001412:	851a      	strh	r2, [r3, #40]	; 0x28

  if (LoRa_init(&myLoRa) == LORA_OK){
 8001414:	487b      	ldr	r0, [pc, #492]	; (8001604 <main+0x2a8>)
 8001416:	f7ff fe0c 	bl	8001032 <LoRa_init>
 800141a:	4603      	mov	r3, r0
 800141c:	2bc8      	cmp	r3, #200	; 0xc8
 800141e:	d102      	bne.n	8001426 <main+0xca>
	  LoRa_Status = 1;
 8001420:	4b7b      	ldr	r3, [pc, #492]	; (8001610 <main+0x2b4>)
 8001422:	2201      	movs	r2, #1
 8001424:	801a      	strh	r2, [r3, #0]
  }

  lcd_put_cur(1, 0);
 8001426:	2100      	movs	r1, #0
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff ff13 	bl	8001254 <lcd_put_cur>
  lcd_send_string ("INITIATE NETWORK...");
 800142e:	4879      	ldr	r0, [pc, #484]	; (8001614 <main+0x2b8>)
 8001430:	f7ff ff7f 	bl	8001332 <lcd_send_string>

//CONTINUOUSLY BOARDCAST 0xFF SIGNAL IN 15S TO START INITIATE THE NETWORK
  uint32_t timeout_ms = HAL_GetTick() + 15000;
 8001434:	f001 f8ec 	bl	8002610 <HAL_GetTick>
 8001438:	4603      	mov	r3, r0
 800143a:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 800143e:	3318      	adds	r3, #24
 8001440:	637b      	str	r3, [r7, #52]	; 0x34
  while (HAL_GetTick() < timeout_ms)
 8001442:	e012      	b.n	800146a <main+0x10e>
  {
	  TxBuffer[0] = 0xFF; // Tín hiệu đồng bộ mạng
 8001444:	4b74      	ldr	r3, [pc, #464]	; (8001618 <main+0x2bc>)
 8001446:	22ff      	movs	r2, #255	; 0xff
 8001448:	701a      	strb	r2, [r3, #0]
	  TxBuffer[1] = 0xFF;
 800144a:	4b73      	ldr	r3, [pc, #460]	; (8001618 <main+0x2bc>)
 800144c:	22ff      	movs	r2, #255	; 0xff
 800144e:	705a      	strb	r2, [r3, #1]
	  TxBuffer[2] = 0xFF;
 8001450:	4b71      	ldr	r3, [pc, #452]	; (8001618 <main+0x2bc>)
 8001452:	22ff      	movs	r2, #255	; 0xff
 8001454:	709a      	strb	r2, [r3, #2]
	  TxBuffer[3] = 0xFF;
 8001456:	4b70      	ldr	r3, [pc, #448]	; (8001618 <main+0x2bc>)
 8001458:	22ff      	movs	r2, #255	; 0xff
 800145a:	70da      	strb	r2, [r3, #3]
	  LoRa_transmit(&myLoRa, TxBuffer, 4, 500);
 800145c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001460:	2204      	movs	r2, #4
 8001462:	496d      	ldr	r1, [pc, #436]	; (8001618 <main+0x2bc>)
 8001464:	4867      	ldr	r0, [pc, #412]	; (8001604 <main+0x2a8>)
 8001466:	f7ff fd20 	bl	8000eaa <LoRa_transmit>
  while (HAL_GetTick() < timeout_ms)
 800146a:	f001 f8d1 	bl	8002610 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001472:	4293      	cmp	r3, r2
 8001474:	d8e6      	bhi.n	8001444 <main+0xe8>
  }
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET); //DEBUG LED
 8001476:	2201      	movs	r2, #1
 8001478:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800147c:	4867      	ldr	r0, [pc, #412]	; (800161c <main+0x2c0>)
 800147e:	f001 fc39 	bl	8002cf4 <HAL_GPIO_WritePin>

//BOARDCAST PRE-START SIGNAL 0xC0
  TxBuffer[0] = 0xC0; //0xEE
 8001482:	4b65      	ldr	r3, [pc, #404]	; (8001618 <main+0x2bc>)
 8001484:	22c0      	movs	r2, #192	; 0xc0
 8001486:	701a      	strb	r2, [r3, #0]
  TxBuffer[1] = 0xEE;
 8001488:	4b63      	ldr	r3, [pc, #396]	; (8001618 <main+0x2bc>)
 800148a:	22ee      	movs	r2, #238	; 0xee
 800148c:	705a      	strb	r2, [r3, #1]
  TxBuffer[2] = 0xEE;
 800148e:	4b62      	ldr	r3, [pc, #392]	; (8001618 <main+0x2bc>)
 8001490:	22ee      	movs	r2, #238	; 0xee
 8001492:	709a      	strb	r2, [r3, #2]
  TxBuffer[3] = 0xEE;
 8001494:	4b60      	ldr	r3, [pc, #384]	; (8001618 <main+0x2bc>)
 8001496:	22ee      	movs	r2, #238	; 0xee
 8001498:	70da      	strb	r2, [r3, #3]
  LoRa_transmit(&myLoRa, TxBuffer, 4, 500);
 800149a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800149e:	2204      	movs	r2, #4
 80014a0:	495d      	ldr	r1, [pc, #372]	; (8001618 <main+0x2bc>)
 80014a2:	4858      	ldr	r0, [pc, #352]	; (8001604 <main+0x2a8>)
 80014a4:	f7ff fd01 	bl	8000eaa <LoRa_transmit>

//WAIT UNTIL RECEIVED ALL ACK FROM SENSOR NODES
  LoRa_startReceiving(&myLoRa);
 80014a8:	4856      	ldr	r0, [pc, #344]	; (8001604 <main+0x2a8>)
 80014aa:	f7ff fd56 	bl	8000f5a <LoRa_startReceiving>
//  HAL_Delay(500); //Do we really need this?? gonna commented it to test!
  while ((receivedACK[0] != 0x01) || (receivedACK[1] != 0x02) || (receivedACK[2] != 0x03))
 80014ae:	bf00      	nop
 80014b0:	4b5b      	ldr	r3, [pc, #364]	; (8001620 <main+0x2c4>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d1fb      	bne.n	80014b0 <main+0x154>
 80014b8:	4b59      	ldr	r3, [pc, #356]	; (8001620 <main+0x2c4>)
 80014ba:	785b      	ldrb	r3, [r3, #1]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d1f7      	bne.n	80014b0 <main+0x154>
 80014c0:	4b57      	ldr	r3, [pc, #348]	; (8001620 <main+0x2c4>)
 80014c2:	789b      	ldrb	r3, [r3, #2]
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d1f3      	bne.n	80014b0 <main+0x154>
  {
	  //wait for ACK
  }

//LCD INDICATE THAT HAVE RECEIVED ALL ACK
  lcd_clear();
 80014c8:	f7ff feba 	bl	8001240 <lcd_clear>
  lcd_put_cur(1, 2);
 80014cc:	2102      	movs	r1, #2
 80014ce:	2001      	movs	r0, #1
 80014d0:	f7ff fec0 	bl	8001254 <lcd_put_cur>
  lcd_send_string ("ALL SENSOR NODES");
 80014d4:	4853      	ldr	r0, [pc, #332]	; (8001624 <main+0x2c8>)
 80014d6:	f7ff ff2c 	bl	8001332 <lcd_send_string>
  lcd_put_cur(2, 3);
 80014da:	2103      	movs	r1, #3
 80014dc:	2002      	movs	r0, #2
 80014de:	f7ff feb9 	bl	8001254 <lcd_put_cur>
  lcd_send_string ("ARE DETECTED!");
 80014e2:	4851      	ldr	r0, [pc, #324]	; (8001628 <main+0x2cc>)
 80014e4:	f7ff ff25 	bl	8001332 <lcd_send_string>
  HAL_Delay(3000);
 80014e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80014ec:	f001 f89a 	bl	8002624 <HAL_Delay>
  lcd_clear();
 80014f0:	f7ff fea6 	bl	8001240 <lcd_clear>
  lcd_put_cur(1, 2);
 80014f4:	2102      	movs	r1, #2
 80014f6:	2001      	movs	r0, #1
 80014f8:	f7ff feac 	bl	8001254 <lcd_put_cur>
  lcd_send_string ("WELCOME USER TO");
 80014fc:	484b      	ldr	r0, [pc, #300]	; (800162c <main+0x2d0>)
 80014fe:	f7ff ff18 	bl	8001332 <lcd_send_string>
  lcd_put_cur(2, 3);
 8001502:	2103      	movs	r1, #3
 8001504:	2002      	movs	r0, #2
 8001506:	f7ff fea5 	bl	8001254 <lcd_put_cur>
  lcd_send_string (" AGRITOMATO! ");
 800150a:	4849      	ldr	r0, [pc, #292]	; (8001630 <main+0x2d4>)
 800150c:	f7ff ff11 	bl	8001332 <lcd_send_string>
  HAL_Delay(3000);
 8001510:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001514:	f001 f886 	bl	8002624 <HAL_Delay>
  lcd_clear();
 8001518:	f7ff fe92 	bl	8001240 <lcd_clear>

//SENDING START SIGNAL 0xB0 TO ENTIRE NETWORK TO SYNCHRONIZE RTC WAKE UP OF DATA SENDIING TIMESLOT
  if ((receivedACK[0] == 0x01) && (receivedACK[1] == 0x02) && (receivedACK[2] == 0x03))
 800151c:	4b40      	ldr	r3, [pc, #256]	; (8001620 <main+0x2c4>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d11d      	bne.n	8001560 <main+0x204>
 8001524:	4b3e      	ldr	r3, [pc, #248]	; (8001620 <main+0x2c4>)
 8001526:	785b      	ldrb	r3, [r3, #1]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d119      	bne.n	8001560 <main+0x204>
 800152c:	4b3c      	ldr	r3, [pc, #240]	; (8001620 <main+0x2c4>)
 800152e:	789b      	ldrb	r3, [r3, #2]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d115      	bne.n	8001560 <main+0x204>
  {
	  TxBuffer[0] = 0xB0; //0xDD
 8001534:	4b38      	ldr	r3, [pc, #224]	; (8001618 <main+0x2bc>)
 8001536:	22b0      	movs	r2, #176	; 0xb0
 8001538:	701a      	strb	r2, [r3, #0]
	  TxBuffer[1] = 0xDD;
 800153a:	4b37      	ldr	r3, [pc, #220]	; (8001618 <main+0x2bc>)
 800153c:	22dd      	movs	r2, #221	; 0xdd
 800153e:	705a      	strb	r2, [r3, #1]
      TxBuffer[2] = 0xDD;
 8001540:	4b35      	ldr	r3, [pc, #212]	; (8001618 <main+0x2bc>)
 8001542:	22dd      	movs	r2, #221	; 0xdd
 8001544:	709a      	strb	r2, [r3, #2]
      TxBuffer[3] = 0xDD;
 8001546:	4b34      	ldr	r3, [pc, #208]	; (8001618 <main+0x2bc>)
 8001548:	22dd      	movs	r2, #221	; 0xdd
 800154a:	70da      	strb	r2, [r3, #3]
      LoRa_transmit(&myLoRa, TxBuffer, 4, 500);
 800154c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001550:	2204      	movs	r2, #4
 8001552:	4931      	ldr	r1, [pc, #196]	; (8001618 <main+0x2bc>)
 8001554:	482b      	ldr	r0, [pc, #172]	; (8001604 <main+0x2a8>)
 8001556:	f7ff fca8 	bl	8000eaa <LoRa_transmit>
      Start = 0;
 800155a:	4b36      	ldr	r3, [pc, #216]	; (8001634 <main+0x2d8>)
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
  	  {

  	  }

// FINISHED SYNCHRONIZE THE NETWORK --> STEP INTO RECEIVE DATA MODE
  LoRa_startReceiving(&myLoRa);
 8001560:	4828      	ldr	r0, [pc, #160]	; (8001604 <main+0x2a8>)
 8001562:	f7ff fcfa 	bl	8000f5a <LoRa_startReceiving>
  HAL_UART_Receive_IT(&huart1, &ESP_rx_data, 1);
 8001566:	2201      	movs	r2, #1
 8001568:	4933      	ldr	r1, [pc, #204]	; (8001638 <main+0x2dc>)
 800156a:	4834      	ldr	r0, [pc, #208]	; (800163c <main+0x2e0>)
 800156c:	f003 fac6 	bl	8004afc <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#if new_feature_dev == 1

	  if (Data_Sensor_Interrupt == 1)
 8001570:	4b33      	ldr	r3, [pc, #204]	; (8001640 <main+0x2e4>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b01      	cmp	r3, #1
 8001578:	d10a      	bne.n	8001590 <main+0x234>
	  {
		  Received_Data_Handler();
 800157a:	f000 fbc5 	bl	8001d08 <Received_Data_Handler>
		  Sendto_ESP_UART(&sensorData); // ĐANG CRASH CHƯƠNG TRÌNH TẠI CÁC NÚT BẤM RELAY
 800157e:	4831      	ldr	r0, [pc, #196]	; (8001644 <main+0x2e8>)
 8001580:	f000 fc80 	bl	8001e84 <Sendto_ESP_UART>
		  LoRa_startReceiving(&myLoRa);
 8001584:	481f      	ldr	r0, [pc, #124]	; (8001604 <main+0x2a8>)
 8001586:	f7ff fce8 	bl	8000f5a <LoRa_startReceiving>
		  Data_Sensor_Interrupt = 0;
 800158a:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <main+0x2e4>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
	  }
	  LCD_Display(&sensorData);
 8001590:	482c      	ldr	r0, [pc, #176]	; (8001644 <main+0x2e8>)
 8001592:	f000 f9dd 	bl	8001950 <LCD_Display>
	  switch (control_mode)
 8001596:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <main+0x2ec>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <main+0x248>
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d00b      	beq.n	80015ba <main+0x25e>
 80015a2:	e026      	b.n	80015f2 <main+0x296>
	  {
	      case MODE_MANUAL:
	    	  if (manual_interrupt_flag == 1)
 80015a4:	4b29      	ldr	r3, [pc, #164]	; (800164c <main+0x2f0>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d11e      	bne.n	80015ec <main+0x290>
			  {
	    		  change_relay_state();
 80015ae:	f000 fdcd 	bl	800214c <change_relay_state>
	    		  manual_interrupt_flag = 0;
 80015b2:	4b26      	ldr	r3, [pc, #152]	; (800164c <main+0x2f0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
			  }
	          break;
 80015b8:	e018      	b.n	80015ec <main+0x290>

	      case MODE_AUTOMATE:
	    	  if ((RX_Data_Control[2] == 0x31) && (RX_Data_Control[3] == 0x32))
 80015ba:	4b25      	ldr	r3, [pc, #148]	; (8001650 <main+0x2f4>)
 80015bc:	789b      	ldrb	r3, [r3, #2]
 80015be:	2b31      	cmp	r3, #49	; 0x31
 80015c0:	d116      	bne.n	80015f0 <main+0x294>
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <main+0x2f4>)
 80015c4:	78db      	ldrb	r3, [r3, #3]
 80015c6:	2b32      	cmp	r3, #50	; 0x32
 80015c8:	d112      	bne.n	80015f0 <main+0x294>
	    	  {
	    		  LoRa_transmit(&myLoRa, RX_Data_Control, sizeof(RX_Data_Control), 500);
 80015ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015ce:	2210      	movs	r2, #16
 80015d0:	491f      	ldr	r1, [pc, #124]	; (8001650 <main+0x2f4>)
 80015d2:	480c      	ldr	r0, [pc, #48]	; (8001604 <main+0x2a8>)
 80015d4:	f7ff fc69 	bl	8000eaa <LoRa_transmit>
	    		  RX_Data_Control[2] = 0;
 80015d8:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <main+0x2f4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	709a      	strb	r2, [r3, #2]
	    		  RX_Data_Control[3] = 0;
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <main+0x2f4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	70da      	strb	r2, [r3, #3]
	    		  LoRa_startReceiving(&myLoRa);
 80015e4:	4807      	ldr	r0, [pc, #28]	; (8001604 <main+0x2a8>)
 80015e6:	f7ff fcb8 	bl	8000f5a <LoRa_startReceiving>
	    	  }

	    	  break;
 80015ea:	e001      	b.n	80015f0 <main+0x294>
	          break;
 80015ec:	bf00      	nop
 80015ee:	e7bf      	b.n	8001570 <main+0x214>
	    	  break;
 80015f0:	bf00      	nop
	  if (Data_Sensor_Interrupt == 1)
 80015f2:	e7bd      	b.n	8001570 <main+0x214>
 80015f4:	200000d2 	.word	0x200000d2
 80015f8:	200000d3 	.word	0x200000d3
 80015fc:	200000d4 	.word	0x200000d4
 8001600:	200000d5 	.word	0x200000d5
 8001604:	2000007c 	.word	0x2000007c
 8001608:	40010c00 	.word	0x40010c00
 800160c:	2000013c 	.word	0x2000013c
 8001610:	200000a8 	.word	0x200000a8
 8001614:	08005f38 	.word	0x08005f38
 8001618:	200000ac 	.word	0x200000ac
 800161c:	40011000 	.word	0x40011000
 8001620:	200000cc 	.word	0x200000cc
 8001624:	08005f4c 	.word	0x08005f4c
 8001628:	08005f60 	.word	0x08005f60
 800162c:	08005f70 	.word	0x08005f70
 8001630:	08005f80 	.word	0x08005f80
 8001634:	20000000 	.word	0x20000000
 8001638:	200000d0 	.word	0x200000d0
 800163c:	20000194 	.word	0x20000194
 8001640:	200000cf 	.word	0x200000cf
 8001644:	200000d8 	.word	0x200000d8
 8001648:	200000e6 	.word	0x200000e6
 800164c:	200000d1 	.word	0x200000d1
 8001650:	200000bc 	.word	0x200000bc

08001654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b090      	sub	sp, #64	; 0x40
 8001658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165a:	f107 0318 	add.w	r3, r7, #24
 800165e:	2228      	movs	r2, #40	; 0x28
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f003 ffa2 	bl	80055ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001676:	2301      	movs	r3, #1
 8001678:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800167a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800167e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001684:	2301      	movs	r3, #1
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001688:	2302      	movs	r3, #2
 800168a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800168c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001690:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001692:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001696:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001698:	f107 0318 	add.w	r3, r7, #24
 800169c:	4618      	mov	r0, r3
 800169e:	f001 fff5 	bl	800368c <HAL_RCC_OscConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016a8:	f000 fd8a 	bl	80021c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ac:	230f      	movs	r3, #15
 80016ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b0:	2302      	movs	r3, #2
 80016b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	2102      	movs	r1, #2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f002 fa62 	bl	8003b90 <HAL_RCC_ClockConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016d2:	f000 fd75 	bl	80021c0 <Error_Handler>
  }
}
 80016d6:	bf00      	nop
 80016d8:	3740      	adds	r7, #64	; 0x40
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <MX_I2C1_Init+0x50>)
 80016e6:	4a13      	ldr	r2, [pc, #76]	; (8001734 <MX_I2C1_Init+0x54>)
 80016e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_I2C1_Init+0x50>)
 80016ec:	4a12      	ldr	r2, [pc, #72]	; (8001738 <MX_I2C1_Init+0x58>)
 80016ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_I2C1_Init+0x50>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_I2C1_Init+0x50>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_I2C1_Init+0x50>)
 80016fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001702:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <MX_I2C1_Init+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_I2C1_Init+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <MX_I2C1_Init+0x50>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_I2C1_Init+0x50>)
 8001718:	2200      	movs	r2, #0
 800171a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <MX_I2C1_Init+0x50>)
 800171e:	f001 fb19 	bl	8002d54 <HAL_I2C_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001728:	f000 fd4a 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200000e8 	.word	0x200000e8
 8001734:	40005400 	.word	0x40005400
 8001738:	00061a80 	.word	0x00061a80

0800173c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <MX_SPI1_Init+0x64>)
 8001742:	4a18      	ldr	r2, [pc, #96]	; (80017a4 <MX_SPI1_Init+0x68>)
 8001744:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <MX_SPI1_Init+0x64>)
 8001748:	f44f 7282 	mov.w	r2, #260	; 0x104
 800174c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <MX_SPI1_Init+0x64>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <MX_SPI1_Init+0x64>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <MX_SPI1_Init+0x64>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <MX_SPI1_Init+0x64>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <MX_SPI1_Init+0x64>)
 8001768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800176c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <MX_SPI1_Init+0x64>)
 8001770:	2210      	movs	r2, #16
 8001772:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <MX_SPI1_Init+0x64>)
 8001776:	2200      	movs	r2, #0
 8001778:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <MX_SPI1_Init+0x64>)
 800177c:	2200      	movs	r2, #0
 800177e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001780:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <MX_SPI1_Init+0x64>)
 8001782:	2200      	movs	r2, #0
 8001784:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <MX_SPI1_Init+0x64>)
 8001788:	220a      	movs	r2, #10
 800178a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800178c:	4804      	ldr	r0, [pc, #16]	; (80017a0 <MX_SPI1_Init+0x64>)
 800178e:	f002 fb8d 	bl	8003eac <HAL_SPI_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001798:	f000 fd12 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	2000013c 	.word	0x2000013c
 80017a4:	40013000 	.word	0x40013000

080017a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_USART1_UART_Init+0x4c>)
 80017ae:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <MX_USART1_UART_Init+0x50>)
 80017b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <MX_USART1_UART_Init+0x4c>)
 80017b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <MX_USART1_UART_Init+0x4c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <MX_USART1_UART_Init+0x4c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <MX_USART1_UART_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_USART1_UART_Init+0x4c>)
 80017ce:	220c      	movs	r2, #12
 80017d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <MX_USART1_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <MX_USART1_UART_Init+0x4c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_USART1_UART_Init+0x4c>)
 80017e0:	f003 f907 	bl	80049f2 <HAL_UART_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017ea:	f000 fce9 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000194 	.word	0x20000194
 80017f8:	40013800 	.word	0x40013800

080017fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001802:	f107 0310 	add.w	r3, r7, #16
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001810:	4b4a      	ldr	r3, [pc, #296]	; (800193c <MX_GPIO_Init+0x140>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	4a49      	ldr	r2, [pc, #292]	; (800193c <MX_GPIO_Init+0x140>)
 8001816:	f043 0310 	orr.w	r3, r3, #16
 800181a:	6193      	str	r3, [r2, #24]
 800181c:	4b47      	ldr	r3, [pc, #284]	; (800193c <MX_GPIO_Init+0x140>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f003 0310 	and.w	r3, r3, #16
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001828:	4b44      	ldr	r3, [pc, #272]	; (800193c <MX_GPIO_Init+0x140>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	4a43      	ldr	r2, [pc, #268]	; (800193c <MX_GPIO_Init+0x140>)
 800182e:	f043 0320 	orr.w	r3, r3, #32
 8001832:	6193      	str	r3, [r2, #24]
 8001834:	4b41      	ldr	r3, [pc, #260]	; (800193c <MX_GPIO_Init+0x140>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f003 0320 	and.w	r3, r3, #32
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001840:	4b3e      	ldr	r3, [pc, #248]	; (800193c <MX_GPIO_Init+0x140>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a3d      	ldr	r2, [pc, #244]	; (800193c <MX_GPIO_Init+0x140>)
 8001846:	f043 0304 	orr.w	r3, r3, #4
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b3b      	ldr	r3, [pc, #236]	; (800193c <MX_GPIO_Init+0x140>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001858:	4b38      	ldr	r3, [pc, #224]	; (800193c <MX_GPIO_Init+0x140>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	4a37      	ldr	r2, [pc, #220]	; (800193c <MX_GPIO_Init+0x140>)
 800185e:	f043 0308 	orr.w	r3, r3, #8
 8001862:	6193      	str	r3, [r2, #24]
 8001864:	4b35      	ldr	r3, [pc, #212]	; (800193c <MX_GPIO_Init+0x140>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	603b      	str	r3, [r7, #0]
 800186e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001876:	4832      	ldr	r0, [pc, #200]	; (8001940 <MX_GPIO_Init+0x144>)
 8001878:	f001 fa3c 	bl	8002cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	2103      	movs	r1, #3
 8001880:	4830      	ldr	r0, [pc, #192]	; (8001944 <MX_GPIO_Init+0x148>)
 8001882:	f001 fa37 	bl	8002cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001886:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800188a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188c:	2301      	movs	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2302      	movs	r3, #2
 8001896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	4619      	mov	r1, r3
 800189e:	4828      	ldr	r0, [pc, #160]	; (8001940 <MX_GPIO_Init+0x144>)
 80018a0:	f001 f8a4 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 80018a4:	2303      	movs	r3, #3
 80018a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a8:	2301      	movs	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2302      	movs	r3, #2
 80018b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	4619      	mov	r1, r3
 80018ba:	4822      	ldr	r0, [pc, #136]	; (8001944 <MX_GPIO_Init+0x148>)
 80018bc:	f001 f896 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80018c0:	2304      	movs	r3, #4
 80018c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018c4:	4b20      	ldr	r3, [pc, #128]	; (8001948 <MX_GPIO_Init+0x14c>)
 80018c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	4619      	mov	r1, r3
 80018d2:	481c      	ldr	r0, [pc, #112]	; (8001944 <MX_GPIO_Init+0x148>)
 80018d4:	f001 f88a 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Fan_SW_Pin Next_State_Pin Prev_State_Pin Manual_Pin
                           Light_SW_Pin Water_pump_Pin */
  GPIO_InitStruct.Pin = Fan_SW_Pin|Next_State_Pin|Prev_State_Pin|Manual_Pin
 80018d8:	f24f 0318 	movw	r3, #61464	; 0xf018
 80018dc:	613b      	str	r3, [r7, #16]
                          |Light_SW_Pin|Water_pump_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018de:	4b1b      	ldr	r3, [pc, #108]	; (800194c <MX_GPIO_Init+0x150>)
 80018e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	f107 0310 	add.w	r3, r7, #16
 80018ea:	4619      	mov	r1, r3
 80018ec:	4815      	ldr	r0, [pc, #84]	; (8001944 <MX_GPIO_Init+0x148>)
 80018ee:	f001 f87d 	bl	80029ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	2008      	movs	r0, #8
 80018f8:	f000 ff8f 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80018fc:	2008      	movs	r0, #8
 80018fe:	f000 ffa8 	bl	8002852 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	2009      	movs	r0, #9
 8001908:	f000 ff87 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800190c:	2009      	movs	r0, #9
 800190e:	f000 ffa0 	bl	8002852 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	200a      	movs	r0, #10
 8001918:	f000 ff7f 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800191c:	200a      	movs	r0, #10
 800191e:	f000 ff98 	bl	8002852 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	2028      	movs	r0, #40	; 0x28
 8001928:	f000 ff77 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800192c:	2028      	movs	r0, #40	; 0x28
 800192e:	f000 ff90 	bl	8002852 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001932:	bf00      	nop
 8001934:	3720      	adds	r7, #32
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	40011000 	.word	0x40011000
 8001944:	40010c00 	.word	0x40010c00
 8001948:	10110000 	.word	0x10110000
 800194c:	10210000 	.word	0x10210000

08001950 <LCD_Display>:

/* USER CODE BEGIN 4 */

//LCD DISPLAY FUNCTION
void LCD_Display(SensorData_t *sensorData)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
    if (Next_State_Flag)
 8001958:	4bc0      	ldr	r3, [pc, #768]	; (8001c5c <LCD_Display+0x30c>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d013      	beq.n	800198a <LCD_Display+0x3a>
    {
        current_display_screen = (current_display_screen + 1) % SCREEN_TOTAL;
 8001962:	4bbf      	ldr	r3, [pc, #764]	; (8001c60 <LCD_Display+0x310>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	4bbe      	ldr	r3, [pc, #760]	; (8001c64 <LCD_Display+0x314>)
 800196a:	fb83 3102 	smull	r3, r1, r3, r2
 800196e:	17d3      	asrs	r3, r2, #31
 8001970:	1ac9      	subs	r1, r1, r3
 8001972:	460b      	mov	r3, r1
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	440b      	add	r3, r1
 8001978:	1ad1      	subs	r1, r2, r3
 800197a:	b2ca      	uxtb	r2, r1
 800197c:	4bb8      	ldr	r3, [pc, #736]	; (8001c60 <LCD_Display+0x310>)
 800197e:	701a      	strb	r2, [r3, #0]
        Next_State_Flag = 0;
 8001980:	4bb6      	ldr	r3, [pc, #728]	; (8001c5c <LCD_Display+0x30c>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
        lcd_clear();
 8001986:	f7ff fc5b 	bl	8001240 <lcd_clear>
    }
    if (Prev_State_Flag)
 800198a:	4bb7      	ldr	r3, [pc, #732]	; (8001c68 <LCD_Display+0x318>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	d013      	beq.n	80019bc <LCD_Display+0x6c>
    {
        current_display_screen = (current_display_screen + SCREEN_TOTAL - 1) % SCREEN_TOTAL;
 8001994:	4bb2      	ldr	r3, [pc, #712]	; (8001c60 <LCD_Display+0x310>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	1c9a      	adds	r2, r3, #2
 800199a:	4bb2      	ldr	r3, [pc, #712]	; (8001c64 <LCD_Display+0x314>)
 800199c:	fb83 3102 	smull	r3, r1, r3, r2
 80019a0:	17d3      	asrs	r3, r2, #31
 80019a2:	1ac9      	subs	r1, r1, r3
 80019a4:	460b      	mov	r3, r1
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	440b      	add	r3, r1
 80019aa:	1ad1      	subs	r1, r2, r3
 80019ac:	b2ca      	uxtb	r2, r1
 80019ae:	4bac      	ldr	r3, [pc, #688]	; (8001c60 <LCD_Display+0x310>)
 80019b0:	701a      	strb	r2, [r3, #0]
        Prev_State_Flag = 0;
 80019b2:	4bad      	ldr	r3, [pc, #692]	; (8001c68 <LCD_Display+0x318>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
        lcd_clear();
 80019b8:	f7ff fc42 	bl	8001240 <lcd_clear>
    }
    char buffer[20];
    switch (current_display_screen)
 80019bc:	4ba8      	ldr	r3, [pc, #672]	; (8001c60 <LCD_Display+0x310>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	f000 8138 	beq.w	8001c36 <LCD_Display+0x2e6>
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	f300 8191 	bgt.w	8001cee <LCD_Display+0x39e>
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <LCD_Display+0x88>
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	f000 80e3 	beq.w	8001b9c <LCD_Display+0x24c>
                }
                break;

             default:

                break;
 80019d6:	e18a      	b.n	8001cee <LCD_Display+0x39e>
                lcd_put_cur(0, 0);
 80019d8:	2100      	movs	r1, #0
 80019da:	2000      	movs	r0, #0
 80019dc:	f7ff fc3a 	bl	8001254 <lcd_put_cur>
                sprintf(buffer, "ID:0x%X", sensorData->Check_ID);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	49a0      	ldr	r1, [pc, #640]	; (8001c6c <LCD_Display+0x31c>)
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 fdbd 	bl	800556c <siprintf>
                lcd_send_string(buffer);
 80019f2:	f107 030c 	add.w	r3, r7, #12
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fc9b 	bl	8001332 <lcd_send_string>
                lcd_put_cur(2, 9);
 80019fc:	2109      	movs	r1, #9
 80019fe:	2002      	movs	r0, #2
 8001a00:	f7ff fc28 	bl	8001254 <lcd_put_cur>
                sprintf(buffer, "Mois:%d.%d%%", sensorData->soil_Moisture / 10, sensorData->soil_Moisture % 10);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	899b      	ldrh	r3, [r3, #12]
 8001a08:	4a99      	ldr	r2, [pc, #612]	; (8001c70 <LCD_Display+0x320>)
 8001a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0e:	08db      	lsrs	r3, r3, #3
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	461c      	mov	r4, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	899a      	ldrh	r2, [r3, #12]
 8001a18:	4b95      	ldr	r3, [pc, #596]	; (8001c70 <LCD_Display+0x320>)
 8001a1a:	fba3 1302 	umull	r1, r3, r3, r2
 8001a1e:	08d9      	lsrs	r1, r3, #3
 8001a20:	460b      	mov	r3, r1
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	f107 000c 	add.w	r0, r7, #12
 8001a30:	4622      	mov	r2, r4
 8001a32:	4990      	ldr	r1, [pc, #576]	; (8001c74 <LCD_Display+0x324>)
 8001a34:	f003 fd9a 	bl	800556c <siprintf>
                lcd_send_string(buffer);
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fc78 	bl	8001332 <lcd_send_string>
                lcd_put_cur(1, 0);
 8001a42:	2100      	movs	r1, #0
 8001a44:	2001      	movs	r0, #1
 8001a46:	f7ff fc05 	bl	8001254 <lcd_put_cur>
                sprintf(buffer, "Temp:%d.%dC", sensorData->Temperature / 10, sensorData->Temperature % 10);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	889b      	ldrh	r3, [r3, #4]
 8001a4e:	4a88      	ldr	r2, [pc, #544]	; (8001c70 <LCD_Display+0x320>)
 8001a50:	fba2 2303 	umull	r2, r3, r2, r3
 8001a54:	08db      	lsrs	r3, r3, #3
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	461c      	mov	r4, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	889a      	ldrh	r2, [r3, #4]
 8001a5e:	4b84      	ldr	r3, [pc, #528]	; (8001c70 <LCD_Display+0x320>)
 8001a60:	fba3 1302 	umull	r1, r3, r3, r2
 8001a64:	08d9      	lsrs	r1, r3, #3
 8001a66:	460b      	mov	r3, r1
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	f107 000c 	add.w	r0, r7, #12
 8001a76:	4622      	mov	r2, r4
 8001a78:	497f      	ldr	r1, [pc, #508]	; (8001c78 <LCD_Display+0x328>)
 8001a7a:	f003 fd77 	bl	800556c <siprintf>
                lcd_send_string(buffer);
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fc55 	bl	8001332 <lcd_send_string>
                lcd_put_cur(2, 0);
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2002      	movs	r0, #2
 8001a8c:	f7ff fbe2 	bl	8001254 <lcd_put_cur>
                lcd_send_string("         ");
 8001a90:	487a      	ldr	r0, [pc, #488]	; (8001c7c <LCD_Display+0x32c>)
 8001a92:	f7ff fc4e 	bl	8001332 <lcd_send_string>
                lcd_put_cur(2, 0);
 8001a96:	2100      	movs	r1, #0
 8001a98:	2002      	movs	r0, #2
 8001a9a:	f7ff fbdb 	bl	8001254 <lcd_put_cur>
                sprintf(buffer, "Lux:%d.%d", sensorData->LUX / 10, sensorData->LUX % 10);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	88db      	ldrh	r3, [r3, #6]
 8001aa2:	4a73      	ldr	r2, [pc, #460]	; (8001c70 <LCD_Display+0x320>)
 8001aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa8:	08db      	lsrs	r3, r3, #3
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	461c      	mov	r4, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	88da      	ldrh	r2, [r3, #6]
 8001ab2:	4b6f      	ldr	r3, [pc, #444]	; (8001c70 <LCD_Display+0x320>)
 8001ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ab8:	08d9      	lsrs	r1, r3, #3
 8001aba:	460b      	mov	r3, r1
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	f107 000c 	add.w	r0, r7, #12
 8001aca:	4622      	mov	r2, r4
 8001acc:	496c      	ldr	r1, [pc, #432]	; (8001c80 <LCD_Display+0x330>)
 8001ace:	f003 fd4d 	bl	800556c <siprintf>
                lcd_send_string(buffer);
 8001ad2:	f107 030c 	add.w	r3, r7, #12
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fc2b 	bl	8001332 <lcd_send_string>
                lcd_put_cur(1, 11);
 8001adc:	210b      	movs	r1, #11
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f7ff fbb8 	bl	8001254 <lcd_put_cur>
                sprintf(buffer, "Hum:%d.%d%%", sensorData->Humidity / 10, sensorData->Humidity % 10);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	885b      	ldrh	r3, [r3, #2]
 8001ae8:	4a61      	ldr	r2, [pc, #388]	; (8001c70 <LCD_Display+0x320>)
 8001aea:	fba2 2303 	umull	r2, r3, r2, r3
 8001aee:	08db      	lsrs	r3, r3, #3
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	461c      	mov	r4, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	885a      	ldrh	r2, [r3, #2]
 8001af8:	4b5d      	ldr	r3, [pc, #372]	; (8001c70 <LCD_Display+0x320>)
 8001afa:	fba3 1302 	umull	r1, r3, r3, r2
 8001afe:	08d9      	lsrs	r1, r3, #3
 8001b00:	460b      	mov	r3, r1
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	f107 000c 	add.w	r0, r7, #12
 8001b10:	4622      	mov	r2, r4
 8001b12:	495c      	ldr	r1, [pc, #368]	; (8001c84 <LCD_Display+0x334>)
 8001b14:	f003 fd2a 	bl	800556c <siprintf>
                lcd_send_string(buffer);
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fc08 	bl	8001332 <lcd_send_string>
                lcd_put_cur(3, 0);
 8001b22:	2100      	movs	r1, #0
 8001b24:	2003      	movs	r0, #3
 8001b26:	f7ff fb95 	bl	8001254 <lcd_put_cur>
                lcd_send_string("         ");
 8001b2a:	4854      	ldr	r0, [pc, #336]	; (8001c7c <LCD_Display+0x32c>)
 8001b2c:	f7ff fc01 	bl	8001332 <lcd_send_string>
                lcd_put_cur(3, 0);
 8001b30:	2100      	movs	r1, #0
 8001b32:	2003      	movs	r0, #3
 8001b34:	f7ff fb8e 	bl	8001254 <lcd_put_cur>
                sprintf(buffer, "MQ:%d", sensorData->Data_MQ135);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	891b      	ldrh	r3, [r3, #8]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	4951      	ldr	r1, [pc, #324]	; (8001c88 <LCD_Display+0x338>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 fd11 	bl	800556c <siprintf>
                lcd_send_string(buffer);
 8001b4a:	f107 030c 	add.w	r3, r7, #12
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fbef 	bl	8001332 <lcd_send_string>
                lcd_put_cur(3, 8);
 8001b54:	2108      	movs	r1, #8
 8001b56:	2003      	movs	r0, #3
 8001b58:	f7ff fb7c 	bl	8001254 <lcd_put_cur>
                sprintf(buffer, "Soil:%d.%dC", sensorData->soil_Temp / 10, sensorData->soil_Temp % 10);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	895b      	ldrh	r3, [r3, #10]
 8001b60:	4a43      	ldr	r2, [pc, #268]	; (8001c70 <LCD_Display+0x320>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	08db      	lsrs	r3, r3, #3
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	461c      	mov	r4, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	895a      	ldrh	r2, [r3, #10]
 8001b70:	4b3f      	ldr	r3, [pc, #252]	; (8001c70 <LCD_Display+0x320>)
 8001b72:	fba3 1302 	umull	r1, r3, r3, r2
 8001b76:	08d9      	lsrs	r1, r3, #3
 8001b78:	460b      	mov	r3, r1
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	f107 000c 	add.w	r0, r7, #12
 8001b88:	4622      	mov	r2, r4
 8001b8a:	4940      	ldr	r1, [pc, #256]	; (8001c8c <LCD_Display+0x33c>)
 8001b8c:	f003 fcee 	bl	800556c <siprintf>
                lcd_send_string(buffer);
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fbcc 	bl	8001332 <lcd_send_string>
                break;
 8001b9a:	e0a9      	b.n	8001cf0 <LCD_Display+0x3a0>
                lcd_put_cur(0, 3);
 8001b9c:	2103      	movs	r1, #3
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f7ff fb58 	bl	8001254 <lcd_put_cur>
                lcd_send_string("RELAY STATUS");
 8001ba4:	483a      	ldr	r0, [pc, #232]	; (8001c90 <LCD_Display+0x340>)
 8001ba6:	f7ff fbc4 	bl	8001332 <lcd_send_string>
                lcd_put_cur(1, 0);
 8001baa:	2100      	movs	r1, #0
 8001bac:	2001      	movs	r0, #1
 8001bae:	f7ff fb51 	bl	8001254 <lcd_put_cur>
                sprintf(buffer, "WATER: %s", water_relay ? "ON " : "OFF");
 8001bb2:	4b38      	ldr	r3, [pc, #224]	; (8001c94 <LCD_Display+0x344>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <LCD_Display+0x270>
 8001bbc:	4a36      	ldr	r2, [pc, #216]	; (8001c98 <LCD_Display+0x348>)
 8001bbe:	e000      	b.n	8001bc2 <LCD_Display+0x272>
 8001bc0:	4a36      	ldr	r2, [pc, #216]	; (8001c9c <LCD_Display+0x34c>)
 8001bc2:	f107 030c 	add.w	r3, r7, #12
 8001bc6:	4936      	ldr	r1, [pc, #216]	; (8001ca0 <LCD_Display+0x350>)
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f003 fccf 	bl	800556c <siprintf>
                lcd_send_string(buffer);
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fbad 	bl	8001332 <lcd_send_string>
                lcd_put_cur(2, 0);
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2002      	movs	r0, #2
 8001bdc:	f7ff fb3a 	bl	8001254 <lcd_put_cur>
                sprintf(buffer, "FAN  : %s", fan_relay ? "ON " : "OFF");
 8001be0:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <LCD_Display+0x354>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <LCD_Display+0x29e>
 8001bea:	4a2b      	ldr	r2, [pc, #172]	; (8001c98 <LCD_Display+0x348>)
 8001bec:	e000      	b.n	8001bf0 <LCD_Display+0x2a0>
 8001bee:	4a2b      	ldr	r2, [pc, #172]	; (8001c9c <LCD_Display+0x34c>)
 8001bf0:	f107 030c 	add.w	r3, r7, #12
 8001bf4:	492c      	ldr	r1, [pc, #176]	; (8001ca8 <LCD_Display+0x358>)
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 fcb8 	bl	800556c <siprintf>
                lcd_send_string(buffer);
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fb96 	bl	8001332 <lcd_send_string>
                lcd_put_cur(3, 0);
 8001c06:	2100      	movs	r1, #0
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f7ff fb23 	bl	8001254 <lcd_put_cur>
                sprintf(buffer, "LIGHT: %s", light_relay ? "ON " : "OFF");
 8001c0e:	4b27      	ldr	r3, [pc, #156]	; (8001cac <LCD_Display+0x35c>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <LCD_Display+0x2cc>
 8001c18:	4a1f      	ldr	r2, [pc, #124]	; (8001c98 <LCD_Display+0x348>)
 8001c1a:	e000      	b.n	8001c1e <LCD_Display+0x2ce>
 8001c1c:	4a1f      	ldr	r2, [pc, #124]	; (8001c9c <LCD_Display+0x34c>)
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	4923      	ldr	r1, [pc, #140]	; (8001cb0 <LCD_Display+0x360>)
 8001c24:	4618      	mov	r0, r3
 8001c26:	f003 fca1 	bl	800556c <siprintf>
                lcd_send_string(buffer);
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fb7f 	bl	8001332 <lcd_send_string>
                break;
 8001c34:	e05c      	b.n	8001cf0 <LCD_Display+0x3a0>
                if (control_mode == MODE_MANUAL)
 8001c36:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <LCD_Display+0x364>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d140      	bne.n	8001cc0 <LCD_Display+0x370>
                    lcd_put_cur(1, 3);
 8001c3e:	2103      	movs	r1, #3
 8001c40:	2001      	movs	r0, #1
 8001c42:	f7ff fb07 	bl	8001254 <lcd_put_cur>
                    lcd_send_string("CURRENT MODE:");
 8001c46:	481c      	ldr	r0, [pc, #112]	; (8001cb8 <LCD_Display+0x368>)
 8001c48:	f7ff fb73 	bl	8001332 <lcd_send_string>
                    lcd_put_cur(2, 3);
 8001c4c:	2103      	movs	r1, #3
 8001c4e:	2002      	movs	r0, #2
 8001c50:	f7ff fb00 	bl	8001254 <lcd_put_cur>
                    lcd_send_string("MANUAL MODE  ");
 8001c54:	4819      	ldr	r0, [pc, #100]	; (8001cbc <LCD_Display+0x36c>)
 8001c56:	f7ff fb6c 	bl	8001332 <lcd_send_string>
                break;
 8001c5a:	e049      	b.n	8001cf0 <LCD_Display+0x3a0>
 8001c5c:	200000d6 	.word	0x200000d6
 8001c60:	200000e7 	.word	0x200000e7
 8001c64:	55555556 	.word	0x55555556
 8001c68:	200000d7 	.word	0x200000d7
 8001c6c:	08005f90 	.word	0x08005f90
 8001c70:	cccccccd 	.word	0xcccccccd
 8001c74:	08005f98 	.word	0x08005f98
 8001c78:	08005fa8 	.word	0x08005fa8
 8001c7c:	08005fb4 	.word	0x08005fb4
 8001c80:	08005fc0 	.word	0x08005fc0
 8001c84:	08005fcc 	.word	0x08005fcc
 8001c88:	08005fd8 	.word	0x08005fd8
 8001c8c:	08005fe0 	.word	0x08005fe0
 8001c90:	08005fec 	.word	0x08005fec
 8001c94:	200000d2 	.word	0x200000d2
 8001c98:	08005ffc 	.word	0x08005ffc
 8001c9c:	08006000 	.word	0x08006000
 8001ca0:	08006004 	.word	0x08006004
 8001ca4:	200000d4 	.word	0x200000d4
 8001ca8:	08006010 	.word	0x08006010
 8001cac:	200000d3 	.word	0x200000d3
 8001cb0:	0800601c 	.word	0x0800601c
 8001cb4:	200000e6 	.word	0x200000e6
 8001cb8:	08006028 	.word	0x08006028
 8001cbc:	08006038 	.word	0x08006038
                else if (control_mode == MODE_AUTOMATE)
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <LCD_Display+0x3a8>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d10e      	bne.n	8001ce6 <LCD_Display+0x396>
                    lcd_put_cur(1, 3);
 8001cc8:	2103      	movs	r1, #3
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f7ff fac2 	bl	8001254 <lcd_put_cur>
                    lcd_send_string("CURRENT MODE:");
 8001cd0:	480a      	ldr	r0, [pc, #40]	; (8001cfc <LCD_Display+0x3ac>)
 8001cd2:	f7ff fb2e 	bl	8001332 <lcd_send_string>
                    lcd_put_cur(2, 3);
 8001cd6:	2103      	movs	r1, #3
 8001cd8:	2002      	movs	r0, #2
 8001cda:	f7ff fabb 	bl	8001254 <lcd_put_cur>
                    lcd_send_string("AUTOMATE MODE");
 8001cde:	4808      	ldr	r0, [pc, #32]	; (8001d00 <LCD_Display+0x3b0>)
 8001ce0:	f7ff fb27 	bl	8001332 <lcd_send_string>
                break;
 8001ce4:	e004      	b.n	8001cf0 <LCD_Display+0x3a0>
                    lcd_send_string("UNKNOWN");
 8001ce6:	4807      	ldr	r0, [pc, #28]	; (8001d04 <LCD_Display+0x3b4>)
 8001ce8:	f7ff fb23 	bl	8001332 <lcd_send_string>
                break;
 8001cec:	e000      	b.n	8001cf0 <LCD_Display+0x3a0>
                break;
 8001cee:	bf00      	nop
        }
}
 8001cf0:	bf00      	nop
 8001cf2:	3724      	adds	r7, #36	; 0x24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd90      	pop	{r4, r7, pc}
 8001cf8:	200000e6 	.word	0x200000e6
 8001cfc:	08006028 	.word	0x08006028
 8001d00:	08006048 	.word	0x08006048
 8001d04:	08006058 	.word	0x08006058

08001d08 <Received_Data_Handler>:


void Received_Data_Handler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
	if(Received_Data[0] == 0xA1)
 8001d0e:	4b57      	ldr	r3, [pc, #348]	; (8001e6c <Received_Data_Handler+0x164>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2ba1      	cmp	r3, #161	; 0xa1
 8001d14:	d151      	bne.n	8001dba <Received_Data_Handler+0xb2>
	{
		sensorData.Check_ID    = Received_Data[0];
 8001d16:	4b55      	ldr	r3, [pc, #340]	; (8001e6c <Received_Data_Handler+0x164>)
 8001d18:	781a      	ldrb	r2, [r3, #0]
 8001d1a:	4b55      	ldr	r3, [pc, #340]	; (8001e70 <Received_Data_Handler+0x168>)
 8001d1c:	701a      	strb	r2, [r3, #0]
		sensorData.Humidity    = Received_Data[2] | (Received_Data[1] << 8);
 8001d1e:	4b53      	ldr	r3, [pc, #332]	; (8001e6c <Received_Data_Handler+0x164>)
 8001d20:	789b      	ldrb	r3, [r3, #2]
 8001d22:	b21a      	sxth	r2, r3
 8001d24:	4b51      	ldr	r3, [pc, #324]	; (8001e6c <Received_Data_Handler+0x164>)
 8001d26:	785b      	ldrb	r3, [r3, #1]
 8001d28:	021b      	lsls	r3, r3, #8
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	b21b      	sxth	r3, r3
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	4b4f      	ldr	r3, [pc, #316]	; (8001e70 <Received_Data_Handler+0x168>)
 8001d34:	805a      	strh	r2, [r3, #2]
		sensorData.Temperature = Received_Data[4] | (Received_Data[3] << 8);
 8001d36:	4b4d      	ldr	r3, [pc, #308]	; (8001e6c <Received_Data_Handler+0x164>)
 8001d38:	791b      	ldrb	r3, [r3, #4]
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	4b4b      	ldr	r3, [pc, #300]	; (8001e6c <Received_Data_Handler+0x164>)
 8001d3e:	78db      	ldrb	r3, [r3, #3]
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	b21b      	sxth	r3, r3
 8001d44:	4313      	orrs	r3, r2
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	4b49      	ldr	r3, [pc, #292]	; (8001e70 <Received_Data_Handler+0x168>)
 8001d4c:	809a      	strh	r2, [r3, #4]
		sensorData.LUX         = Received_Data[6] | (Received_Data[5] << 8);
 8001d4e:	4b47      	ldr	r3, [pc, #284]	; (8001e6c <Received_Data_Handler+0x164>)
 8001d50:	799b      	ldrb	r3, [r3, #6]
 8001d52:	b21a      	sxth	r2, r3
 8001d54:	4b45      	ldr	r3, [pc, #276]	; (8001e6c <Received_Data_Handler+0x164>)
 8001d56:	795b      	ldrb	r3, [r3, #5]
 8001d58:	021b      	lsls	r3, r3, #8
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	b21b      	sxth	r3, r3
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	4b43      	ldr	r3, [pc, #268]	; (8001e70 <Received_Data_Handler+0x168>)
 8001d64:	80da      	strh	r2, [r3, #6]
		sensorData.Data_MQ135  = Received_Data[8] | (Received_Data[7] << 8);
 8001d66:	4b41      	ldr	r3, [pc, #260]	; (8001e6c <Received_Data_Handler+0x164>)
 8001d68:	7a1b      	ldrb	r3, [r3, #8]
 8001d6a:	b21a      	sxth	r2, r3
 8001d6c:	4b3f      	ldr	r3, [pc, #252]	; (8001e6c <Received_Data_Handler+0x164>)
 8001d6e:	79db      	ldrb	r3, [r3, #7]
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	4313      	orrs	r3, r2
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	4b3d      	ldr	r3, [pc, #244]	; (8001e70 <Received_Data_Handler+0x168>)
 8001d7c:	811a      	strh	r2, [r3, #8]
#if new_feature_dev == 1
		RX_Data_Control[0] = 0xA3;
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <Received_Data_Handler+0x16c>)
 8001d80:	22a3      	movs	r2, #163	; 0xa3
 8001d82:	701a      	strb	r2, [r3, #0]
		RX_Data_Control[1] = 0xBB;
 8001d84:	4b3b      	ldr	r3, [pc, #236]	; (8001e74 <Received_Data_Handler+0x16c>)
 8001d86:	22bb      	movs	r2, #187	; 0xbb
 8001d88:	705a      	strb	r2, [r3, #1]
		RX_Data_Control[2] = 0x31;
 8001d8a:	4b3a      	ldr	r3, [pc, #232]	; (8001e74 <Received_Data_Handler+0x16c>)
 8001d8c:	2231      	movs	r2, #49	; 0x31
 8001d8e:	709a      	strb	r2, [r3, #2]
		for (int i = 4; i < 12 ; i++) {
 8001d90:	2304      	movs	r3, #4
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	e00b      	b.n	8001dae <Received_Data_Handler+0xa6>
		    RX_Data_Control[i] = Received_Data[i-3];  // Sao chép dữ liệu cũ từ vị trí 1 trở đi
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3b03      	subs	r3, #3
 8001d9a:	4a34      	ldr	r2, [pc, #208]	; (8001e6c <Received_Data_Handler+0x164>)
 8001d9c:	5cd1      	ldrb	r1, [r2, r3]
 8001d9e:	4a35      	ldr	r2, [pc, #212]	; (8001e74 <Received_Data_Handler+0x16c>)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	460a      	mov	r2, r1
 8001da6:	701a      	strb	r2, [r3, #0]
		for (int i = 4; i < 12 ; i++) {
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3301      	adds	r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b0b      	cmp	r3, #11
 8001db2:	ddf0      	ble.n	8001d96 <Received_Data_Handler+0x8e>
		}
		change_relay_state();
 8001db4:	f000 f9ca 	bl	800214c <change_relay_state>
    	light_relay  = (relay_status >> 0) & 0x01; // Lấy bit 0
    	fan_relay = (relay_status >> 1) & 0x01; // Lấy bit 1
    	water_relay = (relay_status >> 2) & 0x01; // Lấy bit 2
    }
#endif
}
 8001db8:	e054      	b.n	8001e64 <Received_Data_Handler+0x15c>
	else if(Received_Data[0] == 0xA2)
 8001dba:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <Received_Data_Handler+0x164>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2ba2      	cmp	r3, #162	; 0xa2
 8001dc0:	d133      	bne.n	8001e2a <Received_Data_Handler+0x122>
		sensorData.Check_ID    = Received_Data[0];
 8001dc2:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <Received_Data_Handler+0x164>)
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <Received_Data_Handler+0x168>)
 8001dc8:	701a      	strb	r2, [r3, #0]
	    sensorData.soil_Temp = Received_Data[2] | (Received_Data[1] << 8);
 8001dca:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <Received_Data_Handler+0x164>)
 8001dcc:	789b      	ldrb	r3, [r3, #2]
 8001dce:	b21a      	sxth	r2, r3
 8001dd0:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <Received_Data_Handler+0x164>)
 8001dd2:	785b      	ldrb	r3, [r3, #1]
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	b21b      	sxth	r3, r3
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	b21b      	sxth	r3, r3
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <Received_Data_Handler+0x168>)
 8001de0:	815a      	strh	r2, [r3, #10]
	    sensorData.soil_Moisture = Received_Data[4] | (Received_Data[3] << 8);
 8001de2:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <Received_Data_Handler+0x164>)
 8001de4:	791b      	ldrb	r3, [r3, #4]
 8001de6:	b21a      	sxth	r2, r3
 8001de8:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <Received_Data_Handler+0x164>)
 8001dea:	78db      	ldrb	r3, [r3, #3]
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	b21b      	sxth	r3, r3
 8001df0:	4313      	orrs	r3, r2
 8001df2:	b21b      	sxth	r3, r3
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <Received_Data_Handler+0x168>)
 8001df8:	819a      	strh	r2, [r3, #12]
		RX_Data_Control[3] = 0x32;
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <Received_Data_Handler+0x16c>)
 8001dfc:	2232      	movs	r2, #50	; 0x32
 8001dfe:	70da      	strb	r2, [r3, #3]
		for (int i = 12; i < 16 ; i++) {
 8001e00:	230c      	movs	r3, #12
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	e00b      	b.n	8001e1e <Received_Data_Handler+0x116>
		    RX_Data_Control[i] = Received_Data[i - 11];  // Sao chép dữ liệu cũ từ vị trí 1 trở đi
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	3b0b      	subs	r3, #11
 8001e0a:	4a18      	ldr	r2, [pc, #96]	; (8001e6c <Received_Data_Handler+0x164>)
 8001e0c:	5cd1      	ldrb	r1, [r2, r3]
 8001e0e:	4a19      	ldr	r2, [pc, #100]	; (8001e74 <Received_Data_Handler+0x16c>)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	4413      	add	r3, r2
 8001e14:	460a      	mov	r2, r1
 8001e16:	701a      	strb	r2, [r3, #0]
		for (int i = 12; i < 16 ; i++) {
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	2b0f      	cmp	r3, #15
 8001e22:	ddf0      	ble.n	8001e06 <Received_Data_Handler+0xfe>
		change_relay_state();
 8001e24:	f000 f992 	bl	800214c <change_relay_state>
}
 8001e28:	e01c      	b.n	8001e64 <Received_Data_Handler+0x15c>
    else if (Received_Data[0] == 0xA3)
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <Received_Data_Handler+0x164>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2ba3      	cmp	r3, #163	; 0xa3
 8001e30:	d118      	bne.n	8001e64 <Received_Data_Handler+0x15c>
    	uint8_t relay_status = Received_Data[1];
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <Received_Data_Handler+0x164>)
 8001e34:	785b      	ldrb	r3, [r3, #1]
 8001e36:	71fb      	strb	r3, [r7, #7]
    	light_relay  = (relay_status >> 0) & 0x01; // Lấy bit 0
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <Received_Data_Handler+0x170>)
 8001e42:	701a      	strb	r2, [r3, #0]
    	fan_relay = (relay_status >> 1) & 0x01; // Lấy bit 1
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	085b      	lsrs	r3, r3, #1
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <Received_Data_Handler+0x174>)
 8001e52:	701a      	strb	r2, [r3, #0]
    	water_relay = (relay_status >> 2) & 0x01; // Lấy bit 2
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <Received_Data_Handler+0x178>)
 8001e62:	701a      	strb	r2, [r3, #0]
}
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	200000b0 	.word	0x200000b0
 8001e70:	200000d8 	.word	0x200000d8
 8001e74:	200000bc 	.word	0x200000bc
 8001e78:	200000d3 	.word	0x200000d3
 8001e7c:	200000d4 	.word	0x200000d4
 8001e80:	200000d2 	.word	0x200000d2

08001e84 <Sendto_ESP_UART>:

// SENDING DATA TO ESP: 1 BYTE ID + 6*2 DATA BYTES + 1 BYTE RELAYS STATE = 14 BYTES. WE CAN ADD MORE 1 OR 2 HEADER BYTE IF NEEDED.
void Sendto_ESP_UART(SensorData_t *data)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
    uint8_t buffer[14];

    buffer[0]  = data->Check_ID;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	723b      	strb	r3, [r7, #8]

    buffer[1]  = (uint8_t)(data->Humidity >> 8);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	885b      	ldrh	r3, [r3, #2]
 8001e96:	0a1b      	lsrs	r3, r3, #8
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	727b      	strb	r3, [r7, #9]
    buffer[2]  = (uint8_t)(data->Humidity & 0xFF);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	885b      	ldrh	r3, [r3, #2]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	72bb      	strb	r3, [r7, #10]

    buffer[3]  = (uint8_t)(data->Temperature >> 8);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	889b      	ldrh	r3, [r3, #4]
 8001eaa:	0a1b      	lsrs	r3, r3, #8
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	72fb      	strb	r3, [r7, #11]
    buffer[4]  = (uint8_t)(data->Temperature & 0xFF);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	889b      	ldrh	r3, [r3, #4]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	733b      	strb	r3, [r7, #12]

    buffer[5]  = (uint8_t)(data->LUX >> 8);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	88db      	ldrh	r3, [r3, #6]
 8001ebe:	0a1b      	lsrs	r3, r3, #8
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	737b      	strb	r3, [r7, #13]
    buffer[6]  = (uint8_t)(data->LUX & 0xFF);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	88db      	ldrh	r3, [r3, #6]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	73bb      	strb	r3, [r7, #14]

    buffer[7]  = (uint8_t)(data->Data_MQ135 >> 8);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	891b      	ldrh	r3, [r3, #8]
 8001ed2:	0a1b      	lsrs	r3, r3, #8
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	73fb      	strb	r3, [r7, #15]
    buffer[8]  = (uint8_t)(data->Data_MQ135 & 0xFF);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	891b      	ldrh	r3, [r3, #8]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	743b      	strb	r3, [r7, #16]

    buffer[9]  = (uint8_t)(data->soil_Temp >> 8);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	895b      	ldrh	r3, [r3, #10]
 8001ee6:	0a1b      	lsrs	r3, r3, #8
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	747b      	strb	r3, [r7, #17]
    buffer[10] = (uint8_t)(data->soil_Temp & 0xFF);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	895b      	ldrh	r3, [r3, #10]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	74bb      	strb	r3, [r7, #18]

    buffer[11] = (uint8_t)(data->soil_Moisture >> 8);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	899b      	ldrh	r3, [r3, #12]
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	74fb      	strb	r3, [r7, #19]
    buffer[12] = (uint8_t)(data->soil_Moisture & 0xFF);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	899b      	ldrh	r3, [r3, #12]
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	753b      	strb	r3, [r7, #20]

	// Gộp trạng thái lại thành 1 byte:
	// Ví dụ: PA11 -> bit 2, PA10 -> bit 1, PA9 -> bit 0
	buffer[13] = (water_relay << 2) | (fan_relay << 1) | light_relay;
 8001f0a:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <Sendto_ESP_UART+0xc4>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	b25a      	sxtb	r2, r3
 8001f14:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <Sendto_ESP_UART+0xc8>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	b25b      	sxtb	r3, r3
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	b25a      	sxtb	r2, r3
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <Sendto_ESP_UART+0xcc>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	b25b      	sxtb	r3, r3
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	b25b      	sxtb	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	757b      	strb	r3, [r7, #21]
    HAL_UART_Transmit_IT(&huart1, buffer, sizeof(buffer));
 8001f32:	f107 0308 	add.w	r3, r7, #8
 8001f36:	220e      	movs	r2, #14
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4806      	ldr	r0, [pc, #24]	; (8001f54 <Sendto_ESP_UART+0xd0>)
 8001f3c:	f002 fda9 	bl	8004a92 <HAL_UART_Transmit_IT>
}
 8001f40:	bf00      	nop
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	200000d2 	.word	0x200000d2
 8001f4c:	200000d4 	.word	0x200000d4
 8001f50:	200000d3 	.word	0x200000d3
 8001f54:	20000194 	.word	0x20000194

08001f58 <HAL_GPIO_EXTI_Callback>:

//THIS WAKE UP TRIGGERED BY GPIO DIO0, HAPPENS WHEN A DATA RECEIVED BY SX1278 MODULE
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == DIO0_Pin)
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d12a      	bne.n	8001fbe <HAL_GPIO_EXTI_Callback+0x66>
    {
    	if (Start == 1) // Start over the network
 8001f68:	4b4d      	ldr	r3, [pc, #308]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x148>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d11c      	bne.n	8001fac <HAL_GPIO_EXTI_Callback+0x54>
    	{
    		LoRa_receive(&myLoRa, Received_Data, 9);
 8001f72:	2209      	movs	r2, #9
 8001f74:	494b      	ldr	r1, [pc, #300]	; (80020a4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001f76:	484c      	ldr	r0, [pc, #304]	; (80020a8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001f78:	f7fe fffb 	bl	8000f72 <LoRa_receive>
    		if (Received_Data[0] == 0x01)
 8001f7c:	4b49      	ldr	r3, [pc, #292]	; (80020a4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d103      	bne.n	8001f8c <HAL_GPIO_EXTI_Callback+0x34>
    		{
    			receivedACK[0] = 0x01;
 8001f84:	4b49      	ldr	r3, [pc, #292]	; (80020ac <HAL_GPIO_EXTI_Callback+0x154>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]

    else if (GPIO_Pin == Next_State_Pin)
    {
    	Next_State_Flag = 1;
    }
}
 8001f8a:	e084      	b.n	8002096 <HAL_GPIO_EXTI_Callback+0x13e>
    		else if (Received_Data[0] == 0x02)
 8001f8c:	4b45      	ldr	r3, [pc, #276]	; (80020a4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d103      	bne.n	8001f9c <HAL_GPIO_EXTI_Callback+0x44>
    			receivedACK[1] = 0x02;
 8001f94:	4b45      	ldr	r3, [pc, #276]	; (80020ac <HAL_GPIO_EXTI_Callback+0x154>)
 8001f96:	2202      	movs	r2, #2
 8001f98:	705a      	strb	r2, [r3, #1]
}
 8001f9a:	e07c      	b.n	8002096 <HAL_GPIO_EXTI_Callback+0x13e>
    		else if (Received_Data[0] == 0x03)
 8001f9c:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d178      	bne.n	8002096 <HAL_GPIO_EXTI_Callback+0x13e>
    			receivedACK[2] = 0x03;
 8001fa4:	4b41      	ldr	r3, [pc, #260]	; (80020ac <HAL_GPIO_EXTI_Callback+0x154>)
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	709a      	strb	r2, [r3, #2]
}
 8001faa:	e074      	b.n	8002096 <HAL_GPIO_EXTI_Callback+0x13e>
    		LoRa_receive(&myLoRa, Received_Data, 9);
 8001fac:	2209      	movs	r2, #9
 8001fae:	493d      	ldr	r1, [pc, #244]	; (80020a4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001fb0:	483d      	ldr	r0, [pc, #244]	; (80020a8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001fb2:	f7fe ffde 	bl	8000f72 <LoRa_receive>
    		Data_Sensor_Interrupt = 1;
 8001fb6:	4b3e      	ldr	r3, [pc, #248]	; (80020b0 <HAL_GPIO_EXTI_Callback+0x158>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
}
 8001fbc:	e06b      	b.n	8002096 <HAL_GPIO_EXTI_Callback+0x13e>
    else if (GPIO_Pin == Light_SW_Pin)
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d115      	bne.n	8001ff0 <HAL_GPIO_EXTI_Callback+0x98>
    	control_mode = MODE_MANUAL;
 8001fc4:	4b3b      	ldr	r3, [pc, #236]	; (80020b4 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
    	manual_interrupt_flag = 1;
 8001fca:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <HAL_GPIO_EXTI_Callback+0x160>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
    	__HAL_GPIO_EXTI_CLEAR_IT(Light_SW_Pin);  // Clear the interrupt flag
 8001fd0:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <HAL_GPIO_EXTI_Callback+0x164>)
 8001fd2:	2208      	movs	r2, #8
 8001fd4:	615a      	str	r2, [r3, #20]
    	if (light_relay == 0)
 8001fd6:	4b3a      	ldr	r3, [pc, #232]	; (80020c0 <HAL_GPIO_EXTI_Callback+0x168>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d103      	bne.n	8001fe8 <HAL_GPIO_EXTI_Callback+0x90>
    		light_relay = 1;
 8001fe0:	4b37      	ldr	r3, [pc, #220]	; (80020c0 <HAL_GPIO_EXTI_Callback+0x168>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	701a      	strb	r2, [r3, #0]
}
 8001fe6:	e056      	b.n	8002096 <HAL_GPIO_EXTI_Callback+0x13e>
    		light_relay = 0;
 8001fe8:	4b35      	ldr	r3, [pc, #212]	; (80020c0 <HAL_GPIO_EXTI_Callback+0x168>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]
}
 8001fee:	e052      	b.n	8002096 <HAL_GPIO_EXTI_Callback+0x13e>
    else if (GPIO_Pin == Water_pump_Pin)
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	2b10      	cmp	r3, #16
 8001ff4:	d115      	bne.n	8002022 <HAL_GPIO_EXTI_Callback+0xca>
    	control_mode = MODE_MANUAL;
 8001ff6:	4b2f      	ldr	r3, [pc, #188]	; (80020b4 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
    	manual_interrupt_flag = 1;
 8001ffc:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <HAL_GPIO_EXTI_Callback+0x160>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]
    	__HAL_GPIO_EXTI_CLEAR_IT(Water_pump_Pin);  // Clear the interrupt flag
 8002002:	4b2e      	ldr	r3, [pc, #184]	; (80020bc <HAL_GPIO_EXTI_Callback+0x164>)
 8002004:	2210      	movs	r2, #16
 8002006:	615a      	str	r2, [r3, #20]
    	if (water_relay == 0)
 8002008:	4b2e      	ldr	r3, [pc, #184]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x16c>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d103      	bne.n	800201a <HAL_GPIO_EXTI_Callback+0xc2>
    		water_relay = 1;
 8002012:	4b2c      	ldr	r3, [pc, #176]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x16c>)
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]
}
 8002018:	e03d      	b.n	8002096 <HAL_GPIO_EXTI_Callback+0x13e>
    		water_relay = 0;
 800201a:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x16c>)
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
}
 8002020:	e039      	b.n	8002096 <HAL_GPIO_EXTI_Callback+0x13e>
    else if (GPIO_Pin == Fan_SW_Pin)
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002028:	d116      	bne.n	8002058 <HAL_GPIO_EXTI_Callback+0x100>
    	control_mode = MODE_MANUAL;
 800202a:	4b22      	ldr	r3, [pc, #136]	; (80020b4 <HAL_GPIO_EXTI_Callback+0x15c>)
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
    	manual_interrupt_flag = 1;
 8002030:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <HAL_GPIO_EXTI_Callback+0x160>)
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
    	__HAL_GPIO_EXTI_CLEAR_IT(Fan_SW_Pin);  // Clear the interrupt flag
 8002036:	4b21      	ldr	r3, [pc, #132]	; (80020bc <HAL_GPIO_EXTI_Callback+0x164>)
 8002038:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800203c:	615a      	str	r2, [r3, #20]
    	if (fan_relay == 0)
 800203e:	4b22      	ldr	r3, [pc, #136]	; (80020c8 <HAL_GPIO_EXTI_Callback+0x170>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d103      	bne.n	8002050 <HAL_GPIO_EXTI_Callback+0xf8>
    		fan_relay = 1;
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <HAL_GPIO_EXTI_Callback+0x170>)
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
}
 800204e:	e022      	b.n	8002096 <HAL_GPIO_EXTI_Callback+0x13e>
    		fan_relay = 0;
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <HAL_GPIO_EXTI_Callback+0x170>)
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
}
 8002056:	e01e      	b.n	8002096 <HAL_GPIO_EXTI_Callback+0x13e>
    else if (GPIO_Pin == Manual_Pin)
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800205e:	d10b      	bne.n	8002078 <HAL_GPIO_EXTI_Callback+0x120>
        if (control_mode == MODE_AUTOMATE)
 8002060:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <HAL_GPIO_EXTI_Callback+0x15c>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d103      	bne.n	8002070 <HAL_GPIO_EXTI_Callback+0x118>
            control_mode = MODE_MANUAL;
 8002068:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_GPIO_EXTI_Callback+0x15c>)
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
}
 800206e:	e012      	b.n	8002096 <HAL_GPIO_EXTI_Callback+0x13e>
            control_mode = MODE_AUTOMATE;
 8002070:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <HAL_GPIO_EXTI_Callback+0x15c>)
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]
}
 8002076:	e00e      	b.n	8002096 <HAL_GPIO_EXTI_Callback+0x13e>
    else if (GPIO_Pin == Prev_State_Pin)
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800207e:	d103      	bne.n	8002088 <HAL_GPIO_EXTI_Callback+0x130>
    	Prev_State_Flag = 1;
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_GPIO_EXTI_Callback+0x174>)
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
}
 8002086:	e006      	b.n	8002096 <HAL_GPIO_EXTI_Callback+0x13e>
    else if (GPIO_Pin == Next_State_Pin)
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800208e:	d102      	bne.n	8002096 <HAL_GPIO_EXTI_Callback+0x13e>
    	Next_State_Flag = 1;
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <HAL_GPIO_EXTI_Callback+0x178>)
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000000 	.word	0x20000000
 80020a4:	200000b0 	.word	0x200000b0
 80020a8:	2000007c 	.word	0x2000007c
 80020ac:	200000cc 	.word	0x200000cc
 80020b0:	200000cf 	.word	0x200000cf
 80020b4:	200000e6 	.word	0x200000e6
 80020b8:	200000d1 	.word	0x200000d1
 80020bc:	40010400 	.word	0x40010400
 80020c0:	200000d3 	.word	0x200000d3
 80020c4:	200000d2 	.word	0x200000d2
 80020c8:	200000d4 	.word	0x200000d4
 80020cc:	200000d7 	.word	0x200000d7
 80020d0:	200000d6 	.word	0x200000d6

080020d4 <HAL_UART_RxCpltCallback>:

//INTERRUPT WHEN HAVE A REQUEST FROM ESP32
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a13      	ldr	r2, [pc, #76]	; (8002130 <HAL_UART_RxCpltCallback+0x5c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d120      	bne.n	8002128 <HAL_UART_RxCpltCallback+0x54>
    {
        // Xử lý dữ liệu nhận được trong rx_data (bật bơm, đèn, quạt)

    	HAL_UART_Receive_IT(&huart1, &ESP_rx_data, 1); //Cấu hình nhận data từ UART cho lần ngắt sau
 80020e6:	2201      	movs	r2, #1
 80020e8:	4912      	ldr	r1, [pc, #72]	; (8002134 <HAL_UART_RxCpltCallback+0x60>)
 80020ea:	4813      	ldr	r0, [pc, #76]	; (8002138 <HAL_UART_RxCpltCallback+0x64>)
 80020ec:	f002 fd06 	bl	8004afc <HAL_UART_Receive_IT>
		manual_interrupt_flag = 1;
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_UART_RxCpltCallback+0x68>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	701a      	strb	r2, [r3, #0]
		light_relay  = (ESP_rx_data >> 0) & 0x01; // Lấy bit 0
 80020f6:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <HAL_UART_RxCpltCallback+0x60>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <HAL_UART_RxCpltCallback+0x6c>)
 8002102:	701a      	strb	r2, [r3, #0]
		fan_relay = (ESP_rx_data >> 1) & 0x01; // Lấy bit 1
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_UART_RxCpltCallback+0x60>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	085b      	lsrs	r3, r3, #1
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <HAL_UART_RxCpltCallback+0x70>)
 8002114:	701a      	strb	r2, [r3, #0]
		water_relay = (ESP_rx_data >> 2) & 0x01; // Lấy bit 2
 8002116:	4b07      	ldr	r3, [pc, #28]	; (8002134 <HAL_UART_RxCpltCallback+0x60>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	089b      	lsrs	r3, r3, #2
 800211c:	b2db      	uxtb	r3, r3
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	b2da      	uxtb	r2, r3
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <HAL_UART_RxCpltCallback+0x74>)
 8002126:	701a      	strb	r2, [r3, #0]
    }
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40013800 	.word	0x40013800
 8002134:	200000d0 	.word	0x200000d0
 8002138:	20000194 	.word	0x20000194
 800213c:	200000d1 	.word	0x200000d1
 8002140:	200000d3 	.word	0x200000d3
 8002144:	200000d4 	.word	0x200000d4
 8002148:	200000d2 	.word	0x200000d2

0800214c <change_relay_state>:

void change_relay_state(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
    // Prepare the packet for transmission
    relay_state = (water_relay) | (light_relay << 1) | (fan_relay << 2);
 8002150:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <change_relay_state+0x5c>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	b25a      	sxtb	r2, r3
 800215a:	4b14      	ldr	r3, [pc, #80]	; (80021ac <change_relay_state+0x60>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	b25b      	sxtb	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b25a      	sxtb	r2, r3
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <change_relay_state+0x64>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	b25b      	sxtb	r3, r3
 8002170:	4313      	orrs	r3, r2
 8002172:	b25b      	sxtb	r3, r3
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <change_relay_state+0x68>)
 8002178:	701a      	strb	r2, [r3, #0]
    TxBuffer[0] = 0xA3;       // Control node ID
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <change_relay_state+0x6c>)
 800217c:	22a3      	movs	r2, #163	; 0xa3
 800217e:	701a      	strb	r2, [r3, #0]
    TxBuffer[1] = 0xAA;
 8002180:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <change_relay_state+0x6c>)
 8002182:	22aa      	movs	r2, #170	; 0xaa
 8002184:	705a      	strb	r2, [r3, #1]
    TxBuffer[2] = relay_state; // Relay state byte
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <change_relay_state+0x68>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <change_relay_state+0x6c>)
 800218e:	709a      	strb	r2, [r3, #2]

    // Transmit the packet
    LoRa_transmit(&myLoRa, TxBuffer, 3, 500);
 8002190:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002194:	2203      	movs	r2, #3
 8002196:	4908      	ldr	r1, [pc, #32]	; (80021b8 <change_relay_state+0x6c>)
 8002198:	4808      	ldr	r0, [pc, #32]	; (80021bc <change_relay_state+0x70>)
 800219a:	f7fe fe86 	bl	8000eaa <LoRa_transmit>

    // Switch back to receive mode
    LoRa_startReceiving(&myLoRa);
 800219e:	4807      	ldr	r0, [pc, #28]	; (80021bc <change_relay_state+0x70>)
 80021a0:	f7fe fedb 	bl	8000f5a <LoRa_startReceiving>
}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	200000d3 	.word	0x200000d3
 80021ac:	200000d2 	.word	0x200000d2
 80021b0:	200000d4 	.word	0x200000d4
 80021b4:	200000d5 	.word	0x200000d5
 80021b8:	200000ac 	.word	0x200000ac
 80021bc:	2000007c 	.word	0x2000007c

080021c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c4:	b672      	cpsid	i
}
 80021c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <Error_Handler+0x8>
	...

080021cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <HAL_MspInit+0x5c>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	4a14      	ldr	r2, [pc, #80]	; (8002228 <HAL_MspInit+0x5c>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6193      	str	r3, [r2, #24]
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_MspInit+0x5c>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <HAL_MspInit+0x5c>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	4a0e      	ldr	r2, [pc, #56]	; (8002228 <HAL_MspInit+0x5c>)
 80021f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f4:	61d3      	str	r3, [r2, #28]
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <HAL_MspInit+0x5c>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <HAL_MspInit+0x60>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	4a04      	ldr	r2, [pc, #16]	; (800222c <HAL_MspInit+0x60>)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	40021000 	.word	0x40021000
 800222c:	40010000 	.word	0x40010000

08002230 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 0310 	add.w	r3, r7, #16
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a15      	ldr	r2, [pc, #84]	; (80022a0 <HAL_I2C_MspInit+0x70>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d123      	bne.n	8002298 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <HAL_I2C_MspInit+0x74>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	4a13      	ldr	r2, [pc, #76]	; (80022a4 <HAL_I2C_MspInit+0x74>)
 8002256:	f043 0308 	orr.w	r3, r3, #8
 800225a:	6193      	str	r3, [r2, #24]
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <HAL_I2C_MspInit+0x74>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002268:	23c0      	movs	r3, #192	; 0xc0
 800226a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800226c:	2312      	movs	r3, #18
 800226e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002270:	2303      	movs	r3, #3
 8002272:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	4619      	mov	r1, r3
 800227a:	480b      	ldr	r0, [pc, #44]	; (80022a8 <HAL_I2C_MspInit+0x78>)
 800227c:	f000 fbb6 	bl	80029ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <HAL_I2C_MspInit+0x74>)
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <HAL_I2C_MspInit+0x74>)
 8002286:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800228a:	61d3      	str	r3, [r2, #28]
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_I2C_MspInit+0x74>)
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002298:	bf00      	nop
 800229a:	3720      	adds	r7, #32
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40005400 	.word	0x40005400
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40010c00 	.word	0x40010c00

080022ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0310 	add.w	r3, r7, #16
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a1b      	ldr	r2, [pc, #108]	; (8002334 <HAL_SPI_MspInit+0x88>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d12f      	bne.n	800232c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022cc:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <HAL_SPI_MspInit+0x8c>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	4a19      	ldr	r2, [pc, #100]	; (8002338 <HAL_SPI_MspInit+0x8c>)
 80022d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022d6:	6193      	str	r3, [r2, #24]
 80022d8:	4b17      	ldr	r3, [pc, #92]	; (8002338 <HAL_SPI_MspInit+0x8c>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e4:	4b14      	ldr	r3, [pc, #80]	; (8002338 <HAL_SPI_MspInit+0x8c>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4a13      	ldr	r2, [pc, #76]	; (8002338 <HAL_SPI_MspInit+0x8c>)
 80022ea:	f043 0304 	orr.w	r3, r3, #4
 80022ee:	6193      	str	r3, [r2, #24]
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_SPI_MspInit+0x8c>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80022fc:	23a0      	movs	r3, #160	; 0xa0
 80022fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002308:	f107 0310 	add.w	r3, r7, #16
 800230c:	4619      	mov	r1, r3
 800230e:	480b      	ldr	r0, [pc, #44]	; (800233c <HAL_SPI_MspInit+0x90>)
 8002310:	f000 fb6c 	bl	80029ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002314:	2340      	movs	r3, #64	; 0x40
 8002316:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002320:	f107 0310 	add.w	r3, r7, #16
 8002324:	4619      	mov	r1, r3
 8002326:	4805      	ldr	r0, [pc, #20]	; (800233c <HAL_SPI_MspInit+0x90>)
 8002328:	f000 fb60 	bl	80029ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800232c:	bf00      	nop
 800232e:	3720      	adds	r7, #32
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40013000 	.word	0x40013000
 8002338:	40021000 	.word	0x40021000
 800233c:	40010800 	.word	0x40010800

08002340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 0310 	add.w	r3, r7, #16
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a20      	ldr	r2, [pc, #128]	; (80023dc <HAL_UART_MspInit+0x9c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d139      	bne.n	80023d4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002360:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <HAL_UART_MspInit+0xa0>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a1e      	ldr	r2, [pc, #120]	; (80023e0 <HAL_UART_MspInit+0xa0>)
 8002366:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800236a:	6193      	str	r3, [r2, #24]
 800236c:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <HAL_UART_MspInit+0xa0>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HAL_UART_MspInit+0xa0>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	4a18      	ldr	r2, [pc, #96]	; (80023e0 <HAL_UART_MspInit+0xa0>)
 800237e:	f043 0304 	orr.w	r3, r3, #4
 8002382:	6193      	str	r3, [r2, #24]
 8002384:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <HAL_UART_MspInit+0xa0>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002394:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800239a:	2303      	movs	r3, #3
 800239c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239e:	f107 0310 	add.w	r3, r7, #16
 80023a2:	4619      	mov	r1, r3
 80023a4:	480f      	ldr	r0, [pc, #60]	; (80023e4 <HAL_UART_MspInit+0xa4>)
 80023a6:	f000 fb21 	bl	80029ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b8:	f107 0310 	add.w	r3, r7, #16
 80023bc:	4619      	mov	r1, r3
 80023be:	4809      	ldr	r0, [pc, #36]	; (80023e4 <HAL_UART_MspInit+0xa4>)
 80023c0:	f000 fb14 	bl	80029ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023c4:	2200      	movs	r2, #0
 80023c6:	2100      	movs	r1, #0
 80023c8:	2025      	movs	r0, #37	; 0x25
 80023ca:	f000 fa26 	bl	800281a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023ce:	2025      	movs	r0, #37	; 0x25
 80023d0:	f000 fa3f 	bl	8002852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023d4:	bf00      	nop
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40013800 	.word	0x40013800
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40010800 	.word	0x40010800

080023e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023ec:	e7fe      	b.n	80023ec <NMI_Handler+0x4>

080023ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f2:	e7fe      	b.n	80023f2 <HardFault_Handler+0x4>

080023f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f8:	e7fe      	b.n	80023f8 <MemManage_Handler+0x4>

080023fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fe:	e7fe      	b.n	80023fe <BusFault_Handler+0x4>

08002400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <UsageFault_Handler+0x4>

08002406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr

08002412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr

0800241e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr

0800242a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800242e:	f000 f8dd 	bl	80025ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}

08002436 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 800243a:	2004      	movs	r0, #4
 800243c:	f000 fc72 	bl	8002d24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}

08002444 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Light_SW_Pin);
 8002448:	2008      	movs	r0, #8
 800244a:	f000 fc6b 	bl	8002d24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}

08002452 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Water_pump_Pin);
 8002456:	2010      	movs	r0, #16
 8002458:	f000 fc64 	bl	8002d24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}

08002460 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <USART1_IRQHandler+0x10>)
 8002466:	f002 fb6f 	bl	8004b48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000194 	.word	0x20000194

08002474 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Fan_SW_Pin);
 8002478:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800247c:	f000 fc52 	bl	8002d24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Next_State_Pin);
 8002480:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002484:	f000 fc4e 	bl	8002d24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Prev_State_Pin);
 8002488:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800248c:	f000 fc4a 	bl	8002d24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Manual_Pin);
 8002490:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002494:	f000 fc46 	bl	8002d24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}

0800249c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024a4:	4a14      	ldr	r2, [pc, #80]	; (80024f8 <_sbrk+0x5c>)
 80024a6:	4b15      	ldr	r3, [pc, #84]	; (80024fc <_sbrk+0x60>)
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <_sbrk+0x64>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d102      	bne.n	80024be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <_sbrk+0x64>)
 80024ba:	4a12      	ldr	r2, [pc, #72]	; (8002504 <_sbrk+0x68>)
 80024bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <_sbrk+0x64>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d207      	bcs.n	80024dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024cc:	f003 f876 	bl	80055bc <__errno>
 80024d0:	4603      	mov	r3, r0
 80024d2:	220c      	movs	r2, #12
 80024d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295
 80024da:	e009      	b.n	80024f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <_sbrk+0x64>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <_sbrk+0x64>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4413      	add	r3, r2
 80024ea:	4a05      	ldr	r2, [pc, #20]	; (8002500 <_sbrk+0x64>)
 80024ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ee:	68fb      	ldr	r3, [r7, #12]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20005000 	.word	0x20005000
 80024fc:	00000400 	.word	0x00000400
 8002500:	200001dc 	.word	0x200001dc
 8002504:	20000330 	.word	0x20000330

08002508 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002514:	f7ff fff8 	bl	8002508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002518:	480b      	ldr	r0, [pc, #44]	; (8002548 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800251a:	490c      	ldr	r1, [pc, #48]	; (800254c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800251c:	4a0c      	ldr	r2, [pc, #48]	; (8002550 <LoopFillZerobss+0x16>)
  movs r3, #0
 800251e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002520:	e002      	b.n	8002528 <LoopCopyDataInit>

08002522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002526:	3304      	adds	r3, #4

08002528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800252a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800252c:	d3f9      	bcc.n	8002522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800252e:	4a09      	ldr	r2, [pc, #36]	; (8002554 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002530:	4c09      	ldr	r4, [pc, #36]	; (8002558 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002534:	e001      	b.n	800253a <LoopFillZerobss>

08002536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002538:	3204      	adds	r2, #4

0800253a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800253a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800253c:	d3fb      	bcc.n	8002536 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800253e:	f003 f843 	bl	80055c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002542:	f7fe ff0b 	bl	800135c <main>
  bx lr
 8002546:	4770      	bx	lr
  ldr r0, =_sdata
 8002548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800254c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002550:	080060c8 	.word	0x080060c8
  ldr r2, =_sbss
 8002554:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002558:	2000032c 	.word	0x2000032c

0800255c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800255c:	e7fe      	b.n	800255c <ADC1_2_IRQHandler>
	...

08002560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <HAL_Init+0x28>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a07      	ldr	r2, [pc, #28]	; (8002588 <HAL_Init+0x28>)
 800256a:	f043 0310 	orr.w	r3, r3, #16
 800256e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002570:	2003      	movs	r0, #3
 8002572:	f000 f947 	bl	8002804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002576:	200f      	movs	r0, #15
 8002578:	f000 f808 	bl	800258c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800257c:	f7ff fe26 	bl	80021cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40022000 	.word	0x40022000

0800258c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_InitTick+0x54>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_InitTick+0x58>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	4619      	mov	r1, r3
 800259e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f95f 	bl	800286e <HAL_SYSTICK_Config>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e00e      	b.n	80025d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b0f      	cmp	r3, #15
 80025be:	d80a      	bhi.n	80025d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025c0:	2200      	movs	r2, #0
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	f04f 30ff 	mov.w	r0, #4294967295
 80025c8:	f000 f927 	bl	800281a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025cc:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <HAL_InitTick+0x5c>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000004 	.word	0x20000004
 80025e4:	2000000c 	.word	0x2000000c
 80025e8:	20000008 	.word	0x20000008

080025ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_IncTick+0x1c>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_IncTick+0x20>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4413      	add	r3, r2
 80025fc:	4a03      	ldr	r2, [pc, #12]	; (800260c <HAL_IncTick+0x20>)
 80025fe:	6013      	str	r3, [r2, #0]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	2000000c 	.word	0x2000000c
 800260c:	200001e0 	.word	0x200001e0

08002610 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return uwTick;
 8002614:	4b02      	ldr	r3, [pc, #8]	; (8002620 <HAL_GetTick+0x10>)
 8002616:	681b      	ldr	r3, [r3, #0]
}
 8002618:	4618      	mov	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	200001e0 	.word	0x200001e0

08002624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800262c:	f7ff fff0 	bl	8002610 <HAL_GetTick>
 8002630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263c:	d005      	beq.n	800264a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <HAL_Delay+0x44>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4413      	add	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800264a:	bf00      	nop
 800264c:	f7ff ffe0 	bl	8002610 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	429a      	cmp	r2, r3
 800265a:	d8f7      	bhi.n	800264c <HAL_Delay+0x28>
  {
  }
}
 800265c:	bf00      	nop
 800265e:	bf00      	nop
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	2000000c 	.word	0x2000000c

0800266c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002688:	4013      	ands	r3, r2
 800268a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800269c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269e:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	60d3      	str	r3, [r2, #12]
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b8:	4b04      	ldr	r3, [pc, #16]	; (80026cc <__NVIC_GetPriorityGrouping+0x18>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	f003 0307 	and.w	r3, r3, #7
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	db0b      	blt.n	80026fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	f003 021f 	and.w	r2, r3, #31
 80026e8:	4906      	ldr	r1, [pc, #24]	; (8002704 <__NVIC_EnableIRQ+0x34>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	2001      	movs	r0, #1
 80026f2:	fa00 f202 	lsl.w	r2, r0, r2
 80026f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	e000e100 	.word	0xe000e100

08002708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	6039      	str	r1, [r7, #0]
 8002712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	2b00      	cmp	r3, #0
 800271a:	db0a      	blt.n	8002732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	490c      	ldr	r1, [pc, #48]	; (8002754 <__NVIC_SetPriority+0x4c>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	0112      	lsls	r2, r2, #4
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	440b      	add	r3, r1
 800272c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002730:	e00a      	b.n	8002748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4908      	ldr	r1, [pc, #32]	; (8002758 <__NVIC_SetPriority+0x50>)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	3b04      	subs	r3, #4
 8002740:	0112      	lsls	r2, r2, #4
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	440b      	add	r3, r1
 8002746:	761a      	strb	r2, [r3, #24]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000e100 	.word	0xe000e100
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f1c3 0307 	rsb	r3, r3, #7
 8002776:	2b04      	cmp	r3, #4
 8002778:	bf28      	it	cs
 800277a:	2304      	movcs	r3, #4
 800277c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3304      	adds	r3, #4
 8002782:	2b06      	cmp	r3, #6
 8002784:	d902      	bls.n	800278c <NVIC_EncodePriority+0x30>
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3b03      	subs	r3, #3
 800278a:	e000      	b.n	800278e <NVIC_EncodePriority+0x32>
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	f04f 32ff 	mov.w	r2, #4294967295
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	401a      	ands	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a4:	f04f 31ff 	mov.w	r1, #4294967295
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	43d9      	mvns	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	4313      	orrs	r3, r2
         );
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3724      	adds	r7, #36	; 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d0:	d301      	bcc.n	80027d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00f      	b.n	80027f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <SysTick_Config+0x40>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027de:	210f      	movs	r1, #15
 80027e0:	f04f 30ff 	mov.w	r0, #4294967295
 80027e4:	f7ff ff90 	bl	8002708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <SysTick_Config+0x40>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ee:	4b04      	ldr	r3, [pc, #16]	; (8002800 <SysTick_Config+0x40>)
 80027f0:	2207      	movs	r2, #7
 80027f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	e000e010 	.word	0xe000e010

08002804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff2d 	bl	800266c <__NVIC_SetPriorityGrouping>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800282c:	f7ff ff42 	bl	80026b4 <__NVIC_GetPriorityGrouping>
 8002830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	6978      	ldr	r0, [r7, #20]
 8002838:	f7ff ff90 	bl	800275c <NVIC_EncodePriority>
 800283c:	4602      	mov	r2, r0
 800283e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff5f 	bl	8002708 <__NVIC_SetPriority>
}
 800284a:	bf00      	nop
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff35 	bl	80026d0 <__NVIC_EnableIRQ>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ffa2 	bl	80027c0 <SysTick_Config>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002886:	b480      	push	{r7}
 8002888:	b085      	sub	sp, #20
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d008      	beq.n	80028b0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2204      	movs	r2, #4
 80028a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e020      	b.n	80028f2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 020e 	bic.w	r2, r2, #14
 80028be:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d8:	2101      	movs	r1, #1
 80028da:	fa01 f202 	lsl.w	r2, r1, r2
 80028de:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d005      	beq.n	8002920 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2204      	movs	r2, #4
 8002918:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
 800291e:	e051      	b.n	80029c4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 020e 	bic.w	r2, r2, #14
 800292e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0201 	bic.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a22      	ldr	r2, [pc, #136]	; (80029d0 <HAL_DMA_Abort_IT+0xd4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d029      	beq.n	800299e <HAL_DMA_Abort_IT+0xa2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a21      	ldr	r2, [pc, #132]	; (80029d4 <HAL_DMA_Abort_IT+0xd8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d022      	beq.n	800299a <HAL_DMA_Abort_IT+0x9e>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1f      	ldr	r2, [pc, #124]	; (80029d8 <HAL_DMA_Abort_IT+0xdc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d01a      	beq.n	8002994 <HAL_DMA_Abort_IT+0x98>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1e      	ldr	r2, [pc, #120]	; (80029dc <HAL_DMA_Abort_IT+0xe0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d012      	beq.n	800298e <HAL_DMA_Abort_IT+0x92>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1c      	ldr	r2, [pc, #112]	; (80029e0 <HAL_DMA_Abort_IT+0xe4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00a      	beq.n	8002988 <HAL_DMA_Abort_IT+0x8c>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1b      	ldr	r2, [pc, #108]	; (80029e4 <HAL_DMA_Abort_IT+0xe8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d102      	bne.n	8002982 <HAL_DMA_Abort_IT+0x86>
 800297c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002980:	e00e      	b.n	80029a0 <HAL_DMA_Abort_IT+0xa4>
 8002982:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002986:	e00b      	b.n	80029a0 <HAL_DMA_Abort_IT+0xa4>
 8002988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800298c:	e008      	b.n	80029a0 <HAL_DMA_Abort_IT+0xa4>
 800298e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002992:	e005      	b.n	80029a0 <HAL_DMA_Abort_IT+0xa4>
 8002994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002998:	e002      	b.n	80029a0 <HAL_DMA_Abort_IT+0xa4>
 800299a:	2310      	movs	r3, #16
 800299c:	e000      	b.n	80029a0 <HAL_DMA_Abort_IT+0xa4>
 800299e:	2301      	movs	r3, #1
 80029a0:	4a11      	ldr	r2, [pc, #68]	; (80029e8 <HAL_DMA_Abort_IT+0xec>)
 80029a2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	4798      	blx	r3
    } 
  }
  return status;
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40020008 	.word	0x40020008
 80029d4:	4002001c 	.word	0x4002001c
 80029d8:	40020030 	.word	0x40020030
 80029dc:	40020044 	.word	0x40020044
 80029e0:	40020058 	.word	0x40020058
 80029e4:	4002006c 	.word	0x4002006c
 80029e8:	40020000 	.word	0x40020000

080029ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b08b      	sub	sp, #44	; 0x2c
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029f6:	2300      	movs	r3, #0
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029fa:	2300      	movs	r3, #0
 80029fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029fe:	e169      	b.n	8002cd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a00:	2201      	movs	r2, #1
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	69fa      	ldr	r2, [r7, #28]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	f040 8158 	bne.w	8002cce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4a9a      	ldr	r2, [pc, #616]	; (8002c8c <HAL_GPIO_Init+0x2a0>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d05e      	beq.n	8002ae6 <HAL_GPIO_Init+0xfa>
 8002a28:	4a98      	ldr	r2, [pc, #608]	; (8002c8c <HAL_GPIO_Init+0x2a0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d875      	bhi.n	8002b1a <HAL_GPIO_Init+0x12e>
 8002a2e:	4a98      	ldr	r2, [pc, #608]	; (8002c90 <HAL_GPIO_Init+0x2a4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d058      	beq.n	8002ae6 <HAL_GPIO_Init+0xfa>
 8002a34:	4a96      	ldr	r2, [pc, #600]	; (8002c90 <HAL_GPIO_Init+0x2a4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d86f      	bhi.n	8002b1a <HAL_GPIO_Init+0x12e>
 8002a3a:	4a96      	ldr	r2, [pc, #600]	; (8002c94 <HAL_GPIO_Init+0x2a8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d052      	beq.n	8002ae6 <HAL_GPIO_Init+0xfa>
 8002a40:	4a94      	ldr	r2, [pc, #592]	; (8002c94 <HAL_GPIO_Init+0x2a8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d869      	bhi.n	8002b1a <HAL_GPIO_Init+0x12e>
 8002a46:	4a94      	ldr	r2, [pc, #592]	; (8002c98 <HAL_GPIO_Init+0x2ac>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d04c      	beq.n	8002ae6 <HAL_GPIO_Init+0xfa>
 8002a4c:	4a92      	ldr	r2, [pc, #584]	; (8002c98 <HAL_GPIO_Init+0x2ac>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d863      	bhi.n	8002b1a <HAL_GPIO_Init+0x12e>
 8002a52:	4a92      	ldr	r2, [pc, #584]	; (8002c9c <HAL_GPIO_Init+0x2b0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d046      	beq.n	8002ae6 <HAL_GPIO_Init+0xfa>
 8002a58:	4a90      	ldr	r2, [pc, #576]	; (8002c9c <HAL_GPIO_Init+0x2b0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d85d      	bhi.n	8002b1a <HAL_GPIO_Init+0x12e>
 8002a5e:	2b12      	cmp	r3, #18
 8002a60:	d82a      	bhi.n	8002ab8 <HAL_GPIO_Init+0xcc>
 8002a62:	2b12      	cmp	r3, #18
 8002a64:	d859      	bhi.n	8002b1a <HAL_GPIO_Init+0x12e>
 8002a66:	a201      	add	r2, pc, #4	; (adr r2, 8002a6c <HAL_GPIO_Init+0x80>)
 8002a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6c:	08002ae7 	.word	0x08002ae7
 8002a70:	08002ac1 	.word	0x08002ac1
 8002a74:	08002ad3 	.word	0x08002ad3
 8002a78:	08002b15 	.word	0x08002b15
 8002a7c:	08002b1b 	.word	0x08002b1b
 8002a80:	08002b1b 	.word	0x08002b1b
 8002a84:	08002b1b 	.word	0x08002b1b
 8002a88:	08002b1b 	.word	0x08002b1b
 8002a8c:	08002b1b 	.word	0x08002b1b
 8002a90:	08002b1b 	.word	0x08002b1b
 8002a94:	08002b1b 	.word	0x08002b1b
 8002a98:	08002b1b 	.word	0x08002b1b
 8002a9c:	08002b1b 	.word	0x08002b1b
 8002aa0:	08002b1b 	.word	0x08002b1b
 8002aa4:	08002b1b 	.word	0x08002b1b
 8002aa8:	08002b1b 	.word	0x08002b1b
 8002aac:	08002b1b 	.word	0x08002b1b
 8002ab0:	08002ac9 	.word	0x08002ac9
 8002ab4:	08002add 	.word	0x08002add
 8002ab8:	4a79      	ldr	r2, [pc, #484]	; (8002ca0 <HAL_GPIO_Init+0x2b4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d013      	beq.n	8002ae6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002abe:	e02c      	b.n	8002b1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	623b      	str	r3, [r7, #32]
          break;
 8002ac6:	e029      	b.n	8002b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	3304      	adds	r3, #4
 8002ace:	623b      	str	r3, [r7, #32]
          break;
 8002ad0:	e024      	b.n	8002b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	3308      	adds	r3, #8
 8002ad8:	623b      	str	r3, [r7, #32]
          break;
 8002ada:	e01f      	b.n	8002b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	330c      	adds	r3, #12
 8002ae2:	623b      	str	r3, [r7, #32]
          break;
 8002ae4:	e01a      	b.n	8002b1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d102      	bne.n	8002af4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002aee:	2304      	movs	r3, #4
 8002af0:	623b      	str	r3, [r7, #32]
          break;
 8002af2:	e013      	b.n	8002b1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d105      	bne.n	8002b08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002afc:	2308      	movs	r3, #8
 8002afe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	611a      	str	r2, [r3, #16]
          break;
 8002b06:	e009      	b.n	8002b1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b08:	2308      	movs	r3, #8
 8002b0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	615a      	str	r2, [r3, #20]
          break;
 8002b12:	e003      	b.n	8002b1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b14:	2300      	movs	r3, #0
 8002b16:	623b      	str	r3, [r7, #32]
          break;
 8002b18:	e000      	b.n	8002b1c <HAL_GPIO_Init+0x130>
          break;
 8002b1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	2bff      	cmp	r3, #255	; 0xff
 8002b20:	d801      	bhi.n	8002b26 <HAL_GPIO_Init+0x13a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	e001      	b.n	8002b2a <HAL_GPIO_Init+0x13e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	2bff      	cmp	r3, #255	; 0xff
 8002b30:	d802      	bhi.n	8002b38 <HAL_GPIO_Init+0x14c>
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	e002      	b.n	8002b3e <HAL_GPIO_Init+0x152>
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	3b08      	subs	r3, #8
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	210f      	movs	r1, #15
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	401a      	ands	r2, r3
 8002b50:	6a39      	ldr	r1, [r7, #32]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	fa01 f303 	lsl.w	r3, r1, r3
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80b1 	beq.w	8002cce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b6c:	4b4d      	ldr	r3, [pc, #308]	; (8002ca4 <HAL_GPIO_Init+0x2b8>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	4a4c      	ldr	r2, [pc, #304]	; (8002ca4 <HAL_GPIO_Init+0x2b8>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	6193      	str	r3, [r2, #24]
 8002b78:	4b4a      	ldr	r3, [pc, #296]	; (8002ca4 <HAL_GPIO_Init+0x2b8>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b84:	4a48      	ldr	r2, [pc, #288]	; (8002ca8 <HAL_GPIO_Init+0x2bc>)
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	220f      	movs	r2, #15
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a40      	ldr	r2, [pc, #256]	; (8002cac <HAL_GPIO_Init+0x2c0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d013      	beq.n	8002bd8 <HAL_GPIO_Init+0x1ec>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a3f      	ldr	r2, [pc, #252]	; (8002cb0 <HAL_GPIO_Init+0x2c4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00d      	beq.n	8002bd4 <HAL_GPIO_Init+0x1e8>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a3e      	ldr	r2, [pc, #248]	; (8002cb4 <HAL_GPIO_Init+0x2c8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d007      	beq.n	8002bd0 <HAL_GPIO_Init+0x1e4>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a3d      	ldr	r2, [pc, #244]	; (8002cb8 <HAL_GPIO_Init+0x2cc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d101      	bne.n	8002bcc <HAL_GPIO_Init+0x1e0>
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e006      	b.n	8002bda <HAL_GPIO_Init+0x1ee>
 8002bcc:	2304      	movs	r3, #4
 8002bce:	e004      	b.n	8002bda <HAL_GPIO_Init+0x1ee>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e002      	b.n	8002bda <HAL_GPIO_Init+0x1ee>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <HAL_GPIO_Init+0x1ee>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bdc:	f002 0203 	and.w	r2, r2, #3
 8002be0:	0092      	lsls	r2, r2, #2
 8002be2:	4093      	lsls	r3, r2
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bea:	492f      	ldr	r1, [pc, #188]	; (8002ca8 <HAL_GPIO_Init+0x2bc>)
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	089b      	lsrs	r3, r3, #2
 8002bf0:	3302      	adds	r3, #2
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d006      	beq.n	8002c12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c04:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	492c      	ldr	r1, [pc, #176]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	608b      	str	r3, [r1, #8]
 8002c10:	e006      	b.n	8002c20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c12:	4b2a      	ldr	r3, [pc, #168]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	4928      	ldr	r1, [pc, #160]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d006      	beq.n	8002c3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c2c:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	4922      	ldr	r1, [pc, #136]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60cb      	str	r3, [r1, #12]
 8002c38:	e006      	b.n	8002c48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c3a:	4b20      	ldr	r3, [pc, #128]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	491e      	ldr	r1, [pc, #120]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d006      	beq.n	8002c62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	4918      	ldr	r1, [pc, #96]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]
 8002c60:	e006      	b.n	8002c70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c62:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	4914      	ldr	r1, [pc, #80]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d021      	beq.n	8002cc0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	490e      	ldr	r1, [pc, #56]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	600b      	str	r3, [r1, #0]
 8002c88:	e021      	b.n	8002cce <HAL_GPIO_Init+0x2e2>
 8002c8a:	bf00      	nop
 8002c8c:	10320000 	.word	0x10320000
 8002c90:	10310000 	.word	0x10310000
 8002c94:	10220000 	.word	0x10220000
 8002c98:	10210000 	.word	0x10210000
 8002c9c:	10120000 	.word	0x10120000
 8002ca0:	10110000 	.word	0x10110000
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40010000 	.word	0x40010000
 8002cac:	40010800 	.word	0x40010800
 8002cb0:	40010c00 	.word	0x40010c00
 8002cb4:	40011000 	.word	0x40011000
 8002cb8:	40011400 	.word	0x40011400
 8002cbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_GPIO_Init+0x304>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	4909      	ldr	r1, [pc, #36]	; (8002cf0 <HAL_GPIO_Init+0x304>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	fa22 f303 	lsr.w	r3, r2, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f47f ae8e 	bne.w	8002a00 <HAL_GPIO_Init+0x14>
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
 8002ce8:	372c      	adds	r7, #44	; 0x2c
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr
 8002cf0:	40010400 	.word	0x40010400

08002cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	807b      	strh	r3, [r7, #2]
 8002d00:	4613      	mov	r3, r2
 8002d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d04:	787b      	ldrb	r3, [r7, #1]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d0a:	887a      	ldrh	r2, [r7, #2]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d10:	e003      	b.n	8002d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d12:	887b      	ldrh	r3, [r7, #2]
 8002d14:	041a      	lsls	r2, r3, #16
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	611a      	str	r2, [r3, #16]
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d2e:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d006      	beq.n	8002d48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d3a:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d3c:	88fb      	ldrh	r3, [r7, #6]
 8002d3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff f908 	bl	8001f58 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40010400 	.word	0x40010400

08002d54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e12b      	b.n	8002fbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff fa58 	bl	8002230 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2224      	movs	r2, #36	; 0x24
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0201 	bic.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002da6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002db6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002db8:	f001 f832 	bl	8003e20 <HAL_RCC_GetPCLK1Freq>
 8002dbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	4a81      	ldr	r2, [pc, #516]	; (8002fc8 <HAL_I2C_Init+0x274>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d807      	bhi.n	8002dd8 <HAL_I2C_Init+0x84>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4a80      	ldr	r2, [pc, #512]	; (8002fcc <HAL_I2C_Init+0x278>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	bf94      	ite	ls
 8002dd0:	2301      	movls	r3, #1
 8002dd2:	2300      	movhi	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	e006      	b.n	8002de6 <HAL_I2C_Init+0x92>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4a7d      	ldr	r2, [pc, #500]	; (8002fd0 <HAL_I2C_Init+0x27c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	bf94      	ite	ls
 8002de0:	2301      	movls	r3, #1
 8002de2:	2300      	movhi	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e0e7      	b.n	8002fbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4a78      	ldr	r2, [pc, #480]	; (8002fd4 <HAL_I2C_Init+0x280>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	0c9b      	lsrs	r3, r3, #18
 8002df8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	4a6a      	ldr	r2, [pc, #424]	; (8002fc8 <HAL_I2C_Init+0x274>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d802      	bhi.n	8002e28 <HAL_I2C_Init+0xd4>
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	3301      	adds	r3, #1
 8002e26:	e009      	b.n	8002e3c <HAL_I2C_Init+0xe8>
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e2e:	fb02 f303 	mul.w	r3, r2, r3
 8002e32:	4a69      	ldr	r2, [pc, #420]	; (8002fd8 <HAL_I2C_Init+0x284>)
 8002e34:	fba2 2303 	umull	r2, r3, r2, r3
 8002e38:	099b      	lsrs	r3, r3, #6
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	430b      	orrs	r3, r1
 8002e42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	495c      	ldr	r1, [pc, #368]	; (8002fc8 <HAL_I2C_Init+0x274>)
 8002e58:	428b      	cmp	r3, r1
 8002e5a:	d819      	bhi.n	8002e90 <HAL_I2C_Init+0x13c>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1e59      	subs	r1, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e6a:	1c59      	adds	r1, r3, #1
 8002e6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e70:	400b      	ands	r3, r1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_I2C_Init+0x138>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1e59      	subs	r1, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e84:	3301      	adds	r3, #1
 8002e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8a:	e051      	b.n	8002f30 <HAL_I2C_Init+0x1dc>
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	e04f      	b.n	8002f30 <HAL_I2C_Init+0x1dc>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d111      	bne.n	8002ebc <HAL_I2C_Init+0x168>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1e58      	subs	r0, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6859      	ldr	r1, [r3, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	440b      	add	r3, r1
 8002ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	e012      	b.n	8002ee2 <HAL_I2C_Init+0x18e>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1e58      	subs	r0, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	0099      	lsls	r1, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_I2C_Init+0x196>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e022      	b.n	8002f30 <HAL_I2C_Init+0x1dc>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10e      	bne.n	8002f10 <HAL_I2C_Init+0x1bc>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1e58      	subs	r0, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6859      	ldr	r1, [r3, #4]
 8002efa:	460b      	mov	r3, r1
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	440b      	add	r3, r1
 8002f00:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f04:	3301      	adds	r3, #1
 8002f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f0e:	e00f      	b.n	8002f30 <HAL_I2C_Init+0x1dc>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1e58      	subs	r0, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	0099      	lsls	r1, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f26:	3301      	adds	r3, #1
 8002f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	6809      	ldr	r1, [r1, #0]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6911      	ldr	r1, [r2, #16]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	68d2      	ldr	r2, [r2, #12]
 8002f6a:	4311      	orrs	r1, r2
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	430b      	orrs	r3, r1
 8002f72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	000186a0 	.word	0x000186a0
 8002fcc:	001e847f 	.word	0x001e847f
 8002fd0:	003d08ff 	.word	0x003d08ff
 8002fd4:	431bde83 	.word	0x431bde83
 8002fd8:	10624dd3 	.word	0x10624dd3

08002fdc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	607a      	str	r2, [r7, #4]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	460b      	mov	r3, r1
 8002fea:	817b      	strh	r3, [r7, #10]
 8002fec:	4613      	mov	r3, r2
 8002fee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ff0:	f7ff fb0e 	bl	8002610 <HAL_GetTick>
 8002ff4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	f040 80e0 	bne.w	80031c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	2319      	movs	r3, #25
 800300a:	2201      	movs	r2, #1
 800300c:	4970      	ldr	r1, [pc, #448]	; (80031d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f964 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800301a:	2302      	movs	r3, #2
 800301c:	e0d3      	b.n	80031c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_I2C_Master_Transmit+0x50>
 8003028:	2302      	movs	r3, #2
 800302a:	e0cc      	b.n	80031c6 <HAL_I2C_Master_Transmit+0x1ea>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b01      	cmp	r3, #1
 8003040:	d007      	beq.n	8003052 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f042 0201 	orr.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003060:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2221      	movs	r2, #33	; 0x21
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2210      	movs	r2, #16
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	893a      	ldrh	r2, [r7, #8]
 8003082:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4a50      	ldr	r2, [pc, #320]	; (80031d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003092:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003094:	8979      	ldrh	r1, [r7, #10]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	6a3a      	ldr	r2, [r7, #32]
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f89c 	bl	80031d8 <I2C_MasterRequestWrite>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e08d      	b.n	80031c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030aa:	2300      	movs	r3, #0
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030c0:	e066      	b.n	8003190 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	6a39      	ldr	r1, [r7, #32]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 fa22 	bl	8003510 <I2C_WaitOnTXEFlagUntilTimeout>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00d      	beq.n	80030ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d107      	bne.n	80030ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e06b      	b.n	80031c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	781a      	ldrb	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b04      	cmp	r3, #4
 800312a:	d11b      	bne.n	8003164 <HAL_I2C_Master_Transmit+0x188>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003130:	2b00      	cmp	r3, #0
 8003132:	d017      	beq.n	8003164 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	781a      	ldrb	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	6a39      	ldr	r1, [r7, #32]
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 fa19 	bl	80035a0 <I2C_WaitOnBTFFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00d      	beq.n	8003190 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	2b04      	cmp	r3, #4
 800317a:	d107      	bne.n	800318c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e01a      	b.n	80031c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003194:	2b00      	cmp	r3, #0
 8003196:	d194      	bne.n	80030c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	e000      	b.n	80031c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031c4:	2302      	movs	r3, #2
  }
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	00100002 	.word	0x00100002
 80031d4:	ffff0000 	.word	0xffff0000

080031d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b088      	sub	sp, #32
 80031dc:	af02      	add	r7, sp, #8
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	460b      	mov	r3, r1
 80031e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d006      	beq.n	8003202 <I2C_MasterRequestWrite+0x2a>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d003      	beq.n	8003202 <I2C_MasterRequestWrite+0x2a>
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003200:	d108      	bne.n	8003214 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	e00b      	b.n	800322c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003218:	2b12      	cmp	r3, #18
 800321a:	d107      	bne.n	800322c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800322a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f84f 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00d      	beq.n	8003260 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003252:	d103      	bne.n	800325c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800325a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e035      	b.n	80032cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003268:	d108      	bne.n	800327c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800326a:	897b      	ldrh	r3, [r7, #10]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003278:	611a      	str	r2, [r3, #16]
 800327a:	e01b      	b.n	80032b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800327c:	897b      	ldrh	r3, [r7, #10]
 800327e:	11db      	asrs	r3, r3, #7
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f003 0306 	and.w	r3, r3, #6
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f063 030f 	orn	r3, r3, #15
 800328c:	b2da      	uxtb	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	490e      	ldr	r1, [pc, #56]	; (80032d4 <I2C_MasterRequestWrite+0xfc>)
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 f898 	bl	80033d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e010      	b.n	80032cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032aa:	897b      	ldrh	r3, [r7, #10]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4907      	ldr	r1, [pc, #28]	; (80032d8 <I2C_MasterRequestWrite+0x100>)
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f888 	bl	80033d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	00010008 	.word	0x00010008
 80032d8:	00010002 	.word	0x00010002

080032dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	4613      	mov	r3, r2
 80032ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ec:	e048      	b.n	8003380 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d044      	beq.n	8003380 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f6:	f7ff f98b 	bl	8002610 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d302      	bcc.n	800330c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d139      	bne.n	8003380 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	0c1b      	lsrs	r3, r3, #16
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b01      	cmp	r3, #1
 8003314:	d10d      	bne.n	8003332 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	43da      	mvns	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4013      	ands	r3, r2
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf0c      	ite	eq
 8003328:	2301      	moveq	r3, #1
 800332a:	2300      	movne	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	461a      	mov	r2, r3
 8003330:	e00c      	b.n	800334c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	43da      	mvns	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4013      	ands	r3, r2
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf0c      	ite	eq
 8003344:	2301      	moveq	r3, #1
 8003346:	2300      	movne	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	429a      	cmp	r2, r3
 8003350:	d116      	bne.n	8003380 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	f043 0220 	orr.w	r2, r3, #32
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e023      	b.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	0c1b      	lsrs	r3, r3, #16
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b01      	cmp	r3, #1
 8003388:	d10d      	bne.n	80033a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	43da      	mvns	r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	4013      	ands	r3, r2
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf0c      	ite	eq
 800339c:	2301      	moveq	r3, #1
 800339e:	2300      	movne	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	e00c      	b.n	80033c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	43da      	mvns	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	4013      	ands	r3, r2
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	461a      	mov	r2, r3
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d093      	beq.n	80032ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
 80033dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033de:	e071      	b.n	80034c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ee:	d123      	bne.n	8003438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003408:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f043 0204 	orr.w	r2, r3, #4
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e067      	b.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d041      	beq.n	80034c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003440:	f7ff f8e6 	bl	8002610 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	429a      	cmp	r2, r3
 800344e:	d302      	bcc.n	8003456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d136      	bne.n	80034c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b01      	cmp	r3, #1
 800345e:	d10c      	bne.n	800347a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	43da      	mvns	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4013      	ands	r3, r2
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	bf14      	ite	ne
 8003472:	2301      	movne	r3, #1
 8003474:	2300      	moveq	r3, #0
 8003476:	b2db      	uxtb	r3, r3
 8003478:	e00b      	b.n	8003492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	43da      	mvns	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	4013      	ands	r3, r2
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf14      	ite	ne
 800348c:	2301      	movne	r3, #1
 800348e:	2300      	moveq	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d016      	beq.n	80034c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	f043 0220 	orr.w	r2, r3, #32
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e021      	b.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	0c1b      	lsrs	r3, r3, #16
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d10c      	bne.n	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	43da      	mvns	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4013      	ands	r3, r2
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf14      	ite	ne
 80034e0:	2301      	movne	r3, #1
 80034e2:	2300      	moveq	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	e00b      	b.n	8003500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	43da      	mvns	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4013      	ands	r3, r2
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bf14      	ite	ne
 80034fa:	2301      	movne	r3, #1
 80034fc:	2300      	moveq	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	f47f af6d 	bne.w	80033e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800351c:	e034      	b.n	8003588 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f886 	bl	8003630 <I2C_IsAcknowledgeFailed>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e034      	b.n	8003598 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d028      	beq.n	8003588 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003536:	f7ff f86b 	bl	8002610 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d11d      	bne.n	8003588 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003556:	2b80      	cmp	r3, #128	; 0x80
 8003558:	d016      	beq.n	8003588 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	f043 0220 	orr.w	r2, r3, #32
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e007      	b.n	8003598 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003592:	2b80      	cmp	r3, #128	; 0x80
 8003594:	d1c3      	bne.n	800351e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035ac:	e034      	b.n	8003618 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f83e 	bl	8003630 <I2C_IsAcknowledgeFailed>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e034      	b.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d028      	beq.n	8003618 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c6:	f7ff f823 	bl	8002610 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d302      	bcc.n	80035dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d11d      	bne.n	8003618 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d016      	beq.n	8003618 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e007      	b.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b04      	cmp	r3, #4
 8003624:	d1c3      	bne.n	80035ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003646:	d11b      	bne.n	8003680 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003650:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	f043 0204 	orr.w	r2, r3, #4
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr

0800368c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e272      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 8087 	beq.w	80037ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036ac:	4b92      	ldr	r3, [pc, #584]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 030c 	and.w	r3, r3, #12
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d00c      	beq.n	80036d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036b8:	4b8f      	ldr	r3, [pc, #572]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 030c 	and.w	r3, r3, #12
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d112      	bne.n	80036ea <HAL_RCC_OscConfig+0x5e>
 80036c4:	4b8c      	ldr	r3, [pc, #560]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d0:	d10b      	bne.n	80036ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d2:	4b89      	ldr	r3, [pc, #548]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d06c      	beq.n	80037b8 <HAL_RCC_OscConfig+0x12c>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d168      	bne.n	80037b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e24c      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f2:	d106      	bne.n	8003702 <HAL_RCC_OscConfig+0x76>
 80036f4:	4b80      	ldr	r3, [pc, #512]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a7f      	ldr	r2, [pc, #508]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80036fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	e02e      	b.n	8003760 <HAL_RCC_OscConfig+0xd4>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10c      	bne.n	8003724 <HAL_RCC_OscConfig+0x98>
 800370a:	4b7b      	ldr	r3, [pc, #492]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a7a      	ldr	r2, [pc, #488]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	4b78      	ldr	r3, [pc, #480]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a77      	ldr	r2, [pc, #476]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 800371c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	e01d      	b.n	8003760 <HAL_RCC_OscConfig+0xd4>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800372c:	d10c      	bne.n	8003748 <HAL_RCC_OscConfig+0xbc>
 800372e:	4b72      	ldr	r3, [pc, #456]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a71      	ldr	r2, [pc, #452]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	4b6f      	ldr	r3, [pc, #444]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a6e      	ldr	r2, [pc, #440]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	e00b      	b.n	8003760 <HAL_RCC_OscConfig+0xd4>
 8003748:	4b6b      	ldr	r3, [pc, #428]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a6a      	ldr	r2, [pc, #424]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 800374e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	4b68      	ldr	r3, [pc, #416]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a67      	ldr	r2, [pc, #412]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 800375a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800375e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d013      	beq.n	8003790 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003768:	f7fe ff52 	bl	8002610 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003770:	f7fe ff4e 	bl	8002610 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b64      	cmp	r3, #100	; 0x64
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e200      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	4b5d      	ldr	r3, [pc, #372]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0xe4>
 800378e:	e014      	b.n	80037ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003790:	f7fe ff3e 	bl	8002610 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003798:	f7fe ff3a 	bl	8002610 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b64      	cmp	r3, #100	; 0x64
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e1ec      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037aa:	4b53      	ldr	r3, [pc, #332]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x10c>
 80037b6:	e000      	b.n	80037ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d063      	beq.n	800388e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037c6:	4b4c      	ldr	r3, [pc, #304]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037d2:	4b49      	ldr	r3, [pc, #292]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 030c 	and.w	r3, r3, #12
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d11c      	bne.n	8003818 <HAL_RCC_OscConfig+0x18c>
 80037de:	4b46      	ldr	r3, [pc, #280]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d116      	bne.n	8003818 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ea:	4b43      	ldr	r3, [pc, #268]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_RCC_OscConfig+0x176>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d001      	beq.n	8003802 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e1c0      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003802:	4b3d      	ldr	r3, [pc, #244]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4939      	ldr	r1, [pc, #228]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003812:	4313      	orrs	r3, r2
 8003814:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003816:	e03a      	b.n	800388e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d020      	beq.n	8003862 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003820:	4b36      	ldr	r3, [pc, #216]	; (80038fc <HAL_RCC_OscConfig+0x270>)
 8003822:	2201      	movs	r2, #1
 8003824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003826:	f7fe fef3 	bl	8002610 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800382e:	f7fe feef 	bl	8002610 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e1a1      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003840:	4b2d      	ldr	r3, [pc, #180]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0f0      	beq.n	800382e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384c:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4927      	ldr	r1, [pc, #156]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 800385c:	4313      	orrs	r3, r2
 800385e:	600b      	str	r3, [r1, #0]
 8003860:	e015      	b.n	800388e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003862:	4b26      	ldr	r3, [pc, #152]	; (80038fc <HAL_RCC_OscConfig+0x270>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003868:	f7fe fed2 	bl	8002610 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003870:	f7fe fece 	bl	8002610 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e180      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003882:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d03a      	beq.n	8003910 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d019      	beq.n	80038d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038a2:	4b17      	ldr	r3, [pc, #92]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a8:	f7fe feb2 	bl	8002610 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b0:	f7fe feae 	bl	8002610 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e160      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c2:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038ce:	2001      	movs	r0, #1
 80038d0:	f000 face 	bl	8003e70 <RCC_Delay>
 80038d4:	e01c      	b.n	8003910 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038d6:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038dc:	f7fe fe98 	bl	8002610 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e2:	e00f      	b.n	8003904 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e4:	f7fe fe94 	bl	8002610 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d908      	bls.n	8003904 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e146      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000
 80038fc:	42420000 	.word	0x42420000
 8003900:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003904:	4b92      	ldr	r3, [pc, #584]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e9      	bne.n	80038e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80a6 	beq.w	8003a6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800391e:	2300      	movs	r3, #0
 8003920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003922:	4b8b      	ldr	r3, [pc, #556]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10d      	bne.n	800394a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800392e:	4b88      	ldr	r3, [pc, #544]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	4a87      	ldr	r2, [pc, #540]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003938:	61d3      	str	r3, [r2, #28]
 800393a:	4b85      	ldr	r3, [pc, #532]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003942:	60bb      	str	r3, [r7, #8]
 8003944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003946:	2301      	movs	r3, #1
 8003948:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394a:	4b82      	ldr	r3, [pc, #520]	; (8003b54 <HAL_RCC_OscConfig+0x4c8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003952:	2b00      	cmp	r3, #0
 8003954:	d118      	bne.n	8003988 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003956:	4b7f      	ldr	r3, [pc, #508]	; (8003b54 <HAL_RCC_OscConfig+0x4c8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a7e      	ldr	r2, [pc, #504]	; (8003b54 <HAL_RCC_OscConfig+0x4c8>)
 800395c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003962:	f7fe fe55 	bl	8002610 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396a:	f7fe fe51 	bl	8002610 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b64      	cmp	r3, #100	; 0x64
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e103      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397c:	4b75      	ldr	r3, [pc, #468]	; (8003b54 <HAL_RCC_OscConfig+0x4c8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0f0      	beq.n	800396a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d106      	bne.n	800399e <HAL_RCC_OscConfig+0x312>
 8003990:	4b6f      	ldr	r3, [pc, #444]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	4a6e      	ldr	r2, [pc, #440]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	6213      	str	r3, [r2, #32]
 800399c:	e02d      	b.n	80039fa <HAL_RCC_OscConfig+0x36e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10c      	bne.n	80039c0 <HAL_RCC_OscConfig+0x334>
 80039a6:	4b6a      	ldr	r3, [pc, #424]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	4a69      	ldr	r2, [pc, #420]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039ac:	f023 0301 	bic.w	r3, r3, #1
 80039b0:	6213      	str	r3, [r2, #32]
 80039b2:	4b67      	ldr	r3, [pc, #412]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	4a66      	ldr	r2, [pc, #408]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039b8:	f023 0304 	bic.w	r3, r3, #4
 80039bc:	6213      	str	r3, [r2, #32]
 80039be:	e01c      	b.n	80039fa <HAL_RCC_OscConfig+0x36e>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	2b05      	cmp	r3, #5
 80039c6:	d10c      	bne.n	80039e2 <HAL_RCC_OscConfig+0x356>
 80039c8:	4b61      	ldr	r3, [pc, #388]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	4a60      	ldr	r2, [pc, #384]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039ce:	f043 0304 	orr.w	r3, r3, #4
 80039d2:	6213      	str	r3, [r2, #32]
 80039d4:	4b5e      	ldr	r3, [pc, #376]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	4a5d      	ldr	r2, [pc, #372]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039da:	f043 0301 	orr.w	r3, r3, #1
 80039de:	6213      	str	r3, [r2, #32]
 80039e0:	e00b      	b.n	80039fa <HAL_RCC_OscConfig+0x36e>
 80039e2:	4b5b      	ldr	r3, [pc, #364]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	4a5a      	ldr	r2, [pc, #360]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	6213      	str	r3, [r2, #32]
 80039ee:	4b58      	ldr	r3, [pc, #352]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	4a57      	ldr	r2, [pc, #348]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039f4:	f023 0304 	bic.w	r3, r3, #4
 80039f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d015      	beq.n	8003a2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a02:	f7fe fe05 	bl	8002610 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a08:	e00a      	b.n	8003a20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0a:	f7fe fe01 	bl	8002610 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e0b1      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a20:	4b4b      	ldr	r3, [pc, #300]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0ee      	beq.n	8003a0a <HAL_RCC_OscConfig+0x37e>
 8003a2c:	e014      	b.n	8003a58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2e:	f7fe fdef 	bl	8002610 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a34:	e00a      	b.n	8003a4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a36:	f7fe fdeb 	bl	8002610 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e09b      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a4c:	4b40      	ldr	r3, [pc, #256]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1ee      	bne.n	8003a36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d105      	bne.n	8003a6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a5e:	4b3c      	ldr	r3, [pc, #240]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	4a3b      	ldr	r2, [pc, #236]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 8087 	beq.w	8003b82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a74:	4b36      	ldr	r3, [pc, #216]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 030c 	and.w	r3, r3, #12
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d061      	beq.n	8003b44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d146      	bne.n	8003b16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a88:	4b33      	ldr	r3, [pc, #204]	; (8003b58 <HAL_RCC_OscConfig+0x4cc>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8e:	f7fe fdbf 	bl	8002610 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a96:	f7fe fdbb 	bl	8002610 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e06d      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aa8:	4b29      	ldr	r3, [pc, #164]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1f0      	bne.n	8003a96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003abc:	d108      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003abe:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	4921      	ldr	r1, [pc, #132]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ad0:	4b1f      	ldr	r3, [pc, #124]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a19      	ldr	r1, [r3, #32]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	491b      	ldr	r1, [pc, #108]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ae8:	4b1b      	ldr	r3, [pc, #108]	; (8003b58 <HAL_RCC_OscConfig+0x4cc>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aee:	f7fe fd8f 	bl	8002610 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af6:	f7fe fd8b 	bl	8002610 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e03d      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b08:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x46a>
 8003b14:	e035      	b.n	8003b82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b16:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <HAL_RCC_OscConfig+0x4cc>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7fe fd78 	bl	8002610 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fe fd74 	bl	8002610 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e026      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b36:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x498>
 8003b42:	e01e      	b.n	8003b82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d107      	bne.n	8003b5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e019      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
 8003b50:	40021000 	.word	0x40021000
 8003b54:	40007000 	.word	0x40007000
 8003b58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_RCC_OscConfig+0x500>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d106      	bne.n	8003b7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d001      	beq.n	8003b82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40021000 	.word	0x40021000

08003b90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0d0      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba4:	4b6a      	ldr	r3, [pc, #424]	; (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d910      	bls.n	8003bd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb2:	4b67      	ldr	r3, [pc, #412]	; (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 0207 	bic.w	r2, r3, #7
 8003bba:	4965      	ldr	r1, [pc, #404]	; (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc2:	4b63      	ldr	r3, [pc, #396]	; (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0b8      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d020      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bec:	4b59      	ldr	r3, [pc, #356]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4a58      	ldr	r2, [pc, #352]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bf6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c04:	4b53      	ldr	r3, [pc, #332]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	4a52      	ldr	r2, [pc, #328]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c10:	4b50      	ldr	r3, [pc, #320]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	494d      	ldr	r1, [pc, #308]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d040      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d107      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c36:	4b47      	ldr	r3, [pc, #284]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d115      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e07f      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d107      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c4e:	4b41      	ldr	r3, [pc, #260]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e073      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5e:	4b3d      	ldr	r3, [pc, #244]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e06b      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c6e:	4b39      	ldr	r3, [pc, #228]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f023 0203 	bic.w	r2, r3, #3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4936      	ldr	r1, [pc, #216]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c80:	f7fe fcc6 	bl	8002610 <HAL_GetTick>
 8003c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c88:	f7fe fcc2 	bl	8002610 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e053      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9e:	4b2d      	ldr	r3, [pc, #180]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 020c 	and.w	r2, r3, #12
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d1eb      	bne.n	8003c88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb0:	4b27      	ldr	r3, [pc, #156]	; (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d210      	bcs.n	8003ce0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cbe:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f023 0207 	bic.w	r2, r3, #7
 8003cc6:	4922      	ldr	r1, [pc, #136]	; (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e032      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cec:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	4916      	ldr	r1, [pc, #88]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d009      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d0a:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	490e      	ldr	r1, [pc, #56]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d1e:	f000 f821 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 8003d22:	4602      	mov	r2, r0
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	490a      	ldr	r1, [pc, #40]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003d30:	5ccb      	ldrb	r3, [r1, r3]
 8003d32:	fa22 f303 	lsr.w	r3, r2, r3
 8003d36:	4a09      	ldr	r2, [pc, #36]	; (8003d5c <HAL_RCC_ClockConfig+0x1cc>)
 8003d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d3a:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <HAL_RCC_ClockConfig+0x1d0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe fc24 	bl	800258c <HAL_InitTick>

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40022000 	.word	0x40022000
 8003d54:	40021000 	.word	0x40021000
 8003d58:	08006060 	.word	0x08006060
 8003d5c:	20000004 	.word	0x20000004
 8003d60:	20000008 	.word	0x20000008

08003d64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	2300      	movs	r3, #0
 8003d78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d7e:	4b1e      	ldr	r3, [pc, #120]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d002      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x30>
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d003      	beq.n	8003d9a <HAL_RCC_GetSysClockFreq+0x36>
 8003d92:	e027      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d94:	4b19      	ldr	r3, [pc, #100]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x98>)
 8003d96:	613b      	str	r3, [r7, #16]
      break;
 8003d98:	e027      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	0c9b      	lsrs	r3, r3, #18
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	4a17      	ldr	r2, [pc, #92]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003da4:	5cd3      	ldrb	r3, [r2, r3]
 8003da6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d010      	beq.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003db2:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	0c5b      	lsrs	r3, r3, #17
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	4a11      	ldr	r2, [pc, #68]	; (8003e04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003dbe:	5cd3      	ldrb	r3, [r2, r3]
 8003dc0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a0d      	ldr	r2, [pc, #52]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x98>)
 8003dc6:	fb03 f202 	mul.w	r2, r3, r2
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	e004      	b.n	8003dde <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a0c      	ldr	r2, [pc, #48]	; (8003e08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003dd8:	fb02 f303 	mul.w	r3, r2, r3
 8003ddc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	613b      	str	r3, [r7, #16]
      break;
 8003de2:	e002      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x98>)
 8003de6:	613b      	str	r3, [r7, #16]
      break;
 8003de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dea:	693b      	ldr	r3, [r7, #16]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bc80      	pop	{r7}
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	007a1200 	.word	0x007a1200
 8003e00:	08006078 	.word	0x08006078
 8003e04:	08006088 	.word	0x08006088
 8003e08:	003d0900 	.word	0x003d0900

08003e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e10:	4b02      	ldr	r3, [pc, #8]	; (8003e1c <HAL_RCC_GetHCLKFreq+0x10>)
 8003e12:	681b      	ldr	r3, [r3, #0]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr
 8003e1c:	20000004 	.word	0x20000004

08003e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e24:	f7ff fff2 	bl	8003e0c <HAL_RCC_GetHCLKFreq>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	0a1b      	lsrs	r3, r3, #8
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	4903      	ldr	r1, [pc, #12]	; (8003e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e36:	5ccb      	ldrb	r3, [r1, r3]
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40021000 	.word	0x40021000
 8003e44:	08006070 	.word	0x08006070

08003e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e4c:	f7ff ffde 	bl	8003e0c <HAL_RCC_GetHCLKFreq>
 8003e50:	4602      	mov	r2, r0
 8003e52:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	0adb      	lsrs	r3, r3, #11
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	4903      	ldr	r1, [pc, #12]	; (8003e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e5e:	5ccb      	ldrb	r3, [r1, r3]
 8003e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	08006070 	.word	0x08006070

08003e70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e78:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <RCC_Delay+0x34>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a0a      	ldr	r2, [pc, #40]	; (8003ea8 <RCC_Delay+0x38>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	0a5b      	lsrs	r3, r3, #9
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	fb02 f303 	mul.w	r3, r2, r3
 8003e8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e8c:	bf00      	nop
  }
  while (Delay --);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	1e5a      	subs	r2, r3, #1
 8003e92:	60fa      	str	r2, [r7, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1f9      	bne.n	8003e8c <RCC_Delay+0x1c>
}
 8003e98:	bf00      	nop
 8003e9a:	bf00      	nop
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr
 8003ea4:	20000004 	.word	0x20000004
 8003ea8:	10624dd3 	.word	0x10624dd3

08003eac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e076      	b.n	8003fac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d108      	bne.n	8003ed8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ece:	d009      	beq.n	8003ee4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	61da      	str	r2, [r3, #28]
 8003ed6:	e005      	b.n	8003ee4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fe f9d4 	bl	80022ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f68:	ea42 0103 	orr.w	r1, r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	0c1a      	lsrs	r2, r3, #16
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f002 0204 	and.w	r2, r2, #4
 8003f8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	69da      	ldr	r2, [r3, #28]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	603b      	str	r3, [r7, #0]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fc4:	f7fe fb24 	bl	8002610 <HAL_GetTick>
 8003fc8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d001      	beq.n	8003fde <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e12a      	b.n	8004234 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <HAL_SPI_Transmit+0x36>
 8003fe4:	88fb      	ldrh	r3, [r7, #6]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e122      	b.n	8004234 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_SPI_Transmit+0x48>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e11b      	b.n	8004234 <HAL_SPI_Transmit+0x280>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2203      	movs	r2, #3
 8004008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	88fa      	ldrh	r2, [r7, #6]
 800401c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	88fa      	ldrh	r2, [r7, #6]
 8004022:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800404a:	d10f      	bne.n	800406c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800405a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800406a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004076:	2b40      	cmp	r3, #64	; 0x40
 8004078:	d007      	beq.n	800408a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004088:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004092:	d152      	bne.n	800413a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <HAL_SPI_Transmit+0xee>
 800409c:	8b7b      	ldrh	r3, [r7, #26]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d145      	bne.n	800412e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	881a      	ldrh	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	1c9a      	adds	r2, r3, #2
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040c6:	e032      	b.n	800412e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d112      	bne.n	80040fc <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	881a      	ldrh	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	1c9a      	adds	r2, r3, #2
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80040fa:	e018      	b.n	800412e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040fc:	f7fe fa88 	bl	8002610 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d803      	bhi.n	8004114 <HAL_SPI_Transmit+0x160>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	d102      	bne.n	800411a <HAL_SPI_Transmit+0x166>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d109      	bne.n	800412e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e082      	b.n	8004234 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1c7      	bne.n	80040c8 <HAL_SPI_Transmit+0x114>
 8004138:	e053      	b.n	80041e2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d002      	beq.n	8004148 <HAL_SPI_Transmit+0x194>
 8004142:	8b7b      	ldrh	r3, [r7, #26]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d147      	bne.n	80041d8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	330c      	adds	r3, #12
 8004152:	7812      	ldrb	r2, [r2, #0]
 8004154:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800416e:	e033      	b.n	80041d8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b02      	cmp	r3, #2
 800417c:	d113      	bne.n	80041a6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	330c      	adds	r3, #12
 8004188:	7812      	ldrb	r2, [r2, #0]
 800418a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80041a4:	e018      	b.n	80041d8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041a6:	f7fe fa33 	bl	8002610 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d803      	bhi.n	80041be <HAL_SPI_Transmit+0x20a>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d102      	bne.n	80041c4 <HAL_SPI_Transmit+0x210>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d109      	bne.n	80041d8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e02d      	b.n	8004234 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1c6      	bne.n	8004170 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	6839      	ldr	r1, [r7, #0]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 fbd2 	bl	8004990 <SPI_EndRxTxTransaction>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10a      	bne.n	8004216 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004232:	2300      	movs	r3, #0
  }
}
 8004234:	4618      	mov	r0, r3
 8004236:	3720      	adds	r7, #32
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	4613      	mov	r3, r2
 800424a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b01      	cmp	r3, #1
 8004256:	d001      	beq.n	800425c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004258:	2302      	movs	r3, #2
 800425a:	e104      	b.n	8004466 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004264:	d112      	bne.n	800428c <HAL_SPI_Receive+0x50>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10e      	bne.n	800428c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2204      	movs	r2, #4
 8004272:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004276:	88fa      	ldrh	r2, [r7, #6]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f8f3 	bl	800446e <HAL_SPI_TransmitReceive>
 8004288:	4603      	mov	r3, r0
 800428a:	e0ec      	b.n	8004466 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800428c:	f7fe f9c0 	bl	8002610 <HAL_GetTick>
 8004290:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <HAL_SPI_Receive+0x62>
 8004298:	88fb      	ldrh	r3, [r7, #6]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e0e1      	b.n	8004466 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_SPI_Receive+0x74>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e0da      	b.n	8004466 <HAL_SPI_Receive+0x22a>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2204      	movs	r2, #4
 80042bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	88fa      	ldrh	r2, [r7, #6]
 80042d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	88fa      	ldrh	r2, [r7, #6]
 80042d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042fe:	d10f      	bne.n	8004320 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800430e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800431e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432a:	2b40      	cmp	r3, #64	; 0x40
 800432c:	d007      	beq.n	800433e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800433c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d170      	bne.n	8004428 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004346:	e035      	b.n	80043b4 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b01      	cmp	r3, #1
 8004354:	d115      	bne.n	8004382 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f103 020c 	add.w	r2, r3, #12
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	7812      	ldrb	r2, [r2, #0]
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004380:	e018      	b.n	80043b4 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004382:	f7fe f945 	bl	8002610 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d803      	bhi.n	800439a <HAL_SPI_Receive+0x15e>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004398:	d102      	bne.n	80043a0 <HAL_SPI_Receive+0x164>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d109      	bne.n	80043b4 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e058      	b.n	8004466 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1c4      	bne.n	8004348 <HAL_SPI_Receive+0x10c>
 80043be:	e038      	b.n	8004432 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d113      	bne.n	80043f6 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	b292      	uxth	r2, r2
 80043da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	1c9a      	adds	r2, r3, #2
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043f4:	e018      	b.n	8004428 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043f6:	f7fe f90b 	bl	8002610 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d803      	bhi.n	800440e <HAL_SPI_Receive+0x1d2>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440c:	d102      	bne.n	8004414 <HAL_SPI_Receive+0x1d8>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d109      	bne.n	8004428 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e01e      	b.n	8004466 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1c6      	bne.n	80043c0 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	6839      	ldr	r1, [r7, #0]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 fa58 	bl	80048ec <SPI_EndRxTransaction>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e000      	b.n	8004466 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004464:	2300      	movs	r3, #0
  }
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b08a      	sub	sp, #40	; 0x28
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800447c:	2301      	movs	r3, #1
 800447e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004480:	f7fe f8c6 	bl	8002610 <HAL_GetTick>
 8004484:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800448c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004494:	887b      	ldrh	r3, [r7, #2]
 8004496:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004498:	7ffb      	ldrb	r3, [r7, #31]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d00c      	beq.n	80044b8 <HAL_SPI_TransmitReceive+0x4a>
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044a4:	d106      	bne.n	80044b4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d102      	bne.n	80044b4 <HAL_SPI_TransmitReceive+0x46>
 80044ae:	7ffb      	ldrb	r3, [r7, #31]
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d001      	beq.n	80044b8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80044b4:	2302      	movs	r3, #2
 80044b6:	e17f      	b.n	80047b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d005      	beq.n	80044ca <HAL_SPI_TransmitReceive+0x5c>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <HAL_SPI_TransmitReceive+0x5c>
 80044c4:	887b      	ldrh	r3, [r7, #2]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e174      	b.n	80047b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_SPI_TransmitReceive+0x6e>
 80044d8:	2302      	movs	r3, #2
 80044da:	e16d      	b.n	80047b8 <HAL_SPI_TransmitReceive+0x34a>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d003      	beq.n	80044f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2205      	movs	r2, #5
 80044f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	887a      	ldrh	r2, [r7, #2]
 8004508:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	887a      	ldrh	r2, [r7, #2]
 800450e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	887a      	ldrh	r2, [r7, #2]
 800451a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	887a      	ldrh	r2, [r7, #2]
 8004520:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d007      	beq.n	800454c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800454a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004554:	d17e      	bne.n	8004654 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <HAL_SPI_TransmitReceive+0xf6>
 800455e:	8afb      	ldrh	r3, [r7, #22]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d16c      	bne.n	800463e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004568:	881a      	ldrh	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	1c9a      	adds	r2, r3, #2
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004588:	e059      	b.n	800463e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b02      	cmp	r3, #2
 8004596:	d11b      	bne.n	80045d0 <HAL_SPI_TransmitReceive+0x162>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800459c:	b29b      	uxth	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d016      	beq.n	80045d0 <HAL_SPI_TransmitReceive+0x162>
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d113      	bne.n	80045d0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ac:	881a      	ldrh	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	1c9a      	adds	r2, r3, #2
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d119      	bne.n	8004612 <HAL_SPI_TransmitReceive+0x1a4>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d014      	beq.n	8004612 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	b292      	uxth	r2, r2
 80045f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fa:	1c9a      	adds	r2, r3, #2
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800460e:	2301      	movs	r3, #1
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004612:	f7fd fffd 	bl	8002610 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800461e:	429a      	cmp	r2, r3
 8004620:	d80d      	bhi.n	800463e <HAL_SPI_TransmitReceive+0x1d0>
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004628:	d009      	beq.n	800463e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e0bc      	b.n	80047b8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004642:	b29b      	uxth	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1a0      	bne.n	800458a <HAL_SPI_TransmitReceive+0x11c>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d19b      	bne.n	800458a <HAL_SPI_TransmitReceive+0x11c>
 8004652:	e082      	b.n	800475a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_SPI_TransmitReceive+0x1f4>
 800465c:	8afb      	ldrh	r3, [r7, #22]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d171      	bne.n	8004746 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	7812      	ldrb	r2, [r2, #0]
 800466e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004688:	e05d      	b.n	8004746 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b02      	cmp	r3, #2
 8004696:	d11c      	bne.n	80046d2 <HAL_SPI_TransmitReceive+0x264>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d017      	beq.n	80046d2 <HAL_SPI_TransmitReceive+0x264>
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d114      	bne.n	80046d2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	330c      	adds	r3, #12
 80046b2:	7812      	ldrb	r2, [r2, #0]
 80046b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d119      	bne.n	8004714 <HAL_SPI_TransmitReceive+0x2a6>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d014      	beq.n	8004714 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	b2d2      	uxtb	r2, r2
 80046f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004710:	2301      	movs	r3, #1
 8004712:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004714:	f7fd ff7c 	bl	8002610 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004720:	429a      	cmp	r2, r3
 8004722:	d803      	bhi.n	800472c <HAL_SPI_TransmitReceive+0x2be>
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472a:	d102      	bne.n	8004732 <HAL_SPI_TransmitReceive+0x2c4>
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e038      	b.n	80047b8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d19c      	bne.n	800468a <HAL_SPI_TransmitReceive+0x21c>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d197      	bne.n	800468a <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800475a:	6a3a      	ldr	r2, [r7, #32]
 800475c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 f916 	bl	8004990 <SPI_EndRxTxTransaction>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d008      	beq.n	800477c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2220      	movs	r2, #32
 800476e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e01d      	b.n	80047b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10a      	bne.n	800479a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004784:	2300      	movs	r3, #0
 8004786:	613b      	str	r3, [r7, #16]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	613b      	str	r3, [r7, #16]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80047b6:	2300      	movs	r3, #0
  }
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3728      	adds	r7, #40	; 0x28
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047ce:	b2db      	uxtb	r3, r3
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr
	...

080047dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047ec:	f7fd ff10 	bl	8002610 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f4:	1a9b      	subs	r3, r3, r2
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	4413      	add	r3, r2
 80047fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047fc:	f7fd ff08 	bl	8002610 <HAL_GetTick>
 8004800:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004802:	4b39      	ldr	r3, [pc, #228]	; (80048e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	015b      	lsls	r3, r3, #5
 8004808:	0d1b      	lsrs	r3, r3, #20
 800480a:	69fa      	ldr	r2, [r7, #28]
 800480c:	fb02 f303 	mul.w	r3, r2, r3
 8004810:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004812:	e054      	b.n	80048be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481a:	d050      	beq.n	80048be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800481c:	f7fd fef8 	bl	8002610 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	429a      	cmp	r2, r3
 800482a:	d902      	bls.n	8004832 <SPI_WaitFlagStateUntilTimeout+0x56>
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d13d      	bne.n	80048ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004840:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800484a:	d111      	bne.n	8004870 <SPI_WaitFlagStateUntilTimeout+0x94>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004854:	d004      	beq.n	8004860 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800485e:	d107      	bne.n	8004870 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800486e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004878:	d10f      	bne.n	800489a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004898:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e017      	b.n	80048de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4013      	ands	r3, r2
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	bf0c      	ite	eq
 80048ce:	2301      	moveq	r3, #1
 80048d0:	2300      	movne	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	461a      	mov	r2, r3
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d19b      	bne.n	8004814 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3720      	adds	r7, #32
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20000004 	.word	0x20000004

080048ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004900:	d111      	bne.n	8004926 <SPI_EndRxTransaction+0x3a>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800490a:	d004      	beq.n	8004916 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004914:	d107      	bne.n	8004926 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004924:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800492e:	d117      	bne.n	8004960 <SPI_EndRxTransaction+0x74>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004938:	d112      	bne.n	8004960 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2200      	movs	r2, #0
 8004942:	2101      	movs	r1, #1
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f7ff ff49 	bl	80047dc <SPI_WaitFlagStateUntilTimeout>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01a      	beq.n	8004986 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004954:	f043 0220 	orr.w	r2, r3, #32
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e013      	b.n	8004988 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2200      	movs	r2, #0
 8004968:	2180      	movs	r1, #128	; 0x80
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f7ff ff36 	bl	80047dc <SPI_WaitFlagStateUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	f043 0220 	orr.w	r2, r3, #32
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e000      	b.n	8004988 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af02      	add	r7, sp, #8
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2201      	movs	r2, #1
 80049a4:	2102      	movs	r1, #2
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f7ff ff18 	bl	80047dc <SPI_WaitFlagStateUntilTimeout>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d007      	beq.n	80049c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b6:	f043 0220 	orr.w	r2, r3, #32
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e013      	b.n	80049ea <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2200      	movs	r2, #0
 80049ca:	2180      	movs	r1, #128	; 0x80
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f7ff ff05 	bl	80047dc <SPI_WaitFlagStateUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d007      	beq.n	80049e8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049dc:	f043 0220 	orr.w	r2, r3, #32
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e000      	b.n	80049ea <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b082      	sub	sp, #8
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e042      	b.n	8004a8a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d106      	bne.n	8004a1e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7fd fc91 	bl	8002340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2224      	movs	r2, #36	; 0x24
 8004a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a34:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fd0a 	bl	8005450 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a4a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695a      	ldr	r2, [r3, #20]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a5a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a6a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b085      	sub	sp, #20
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	d121      	bne.n	8004af0 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <HAL_UART_Transmit_IT+0x26>
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e01a      	b.n	8004af2 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	88fa      	ldrh	r2, [r7, #6]
 8004ac6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	88fa      	ldrh	r2, [r7, #6]
 8004acc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2221      	movs	r2, #33	; 0x21
 8004ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004aea:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	e000      	b.n	8004af2 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004af0:	2302      	movs	r3, #2
  }
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bc80      	pop	{r7}
 8004afa:	4770      	bx	lr

08004afc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	4613      	mov	r3, r2
 8004b08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b20      	cmp	r3, #32
 8004b14:	d112      	bne.n	8004b3c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <HAL_UART_Receive_IT+0x26>
 8004b1c:	88fb      	ldrh	r3, [r7, #6]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e00b      	b.n	8004b3e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b2c:	88fb      	ldrh	r3, [r7, #6]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	68b9      	ldr	r1, [r7, #8]
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fab7 	bl	80050a6 <UART_Start_Receive_IT>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	e000      	b.n	8004b3e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
  }
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b0ba      	sub	sp, #232	; 0xe8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004b86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10f      	bne.n	8004bae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d009      	beq.n	8004bae <HAL_UART_IRQHandler+0x66>
 8004b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fb93 	bl	80052d2 <UART_Receive_IT>
      return;
 8004bac:	e25b      	b.n	8005066 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004bae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 80de 	beq.w	8004d74 <HAL_UART_IRQHandler+0x22c>
 8004bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d106      	bne.n	8004bd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bc8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 80d1 	beq.w	8004d74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00b      	beq.n	8004bf6 <HAL_UART_IRQHandler+0xae>
 8004bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bee:	f043 0201 	orr.w	r2, r3, #1
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfa:	f003 0304 	and.w	r3, r3, #4
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00b      	beq.n	8004c1a <HAL_UART_IRQHandler+0xd2>
 8004c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c12:	f043 0202 	orr.w	r2, r3, #2
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00b      	beq.n	8004c3e <HAL_UART_IRQHandler+0xf6>
 8004c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d005      	beq.n	8004c3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c36:	f043 0204 	orr.w	r2, r3, #4
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d011      	beq.n	8004c6e <HAL_UART_IRQHandler+0x126>
 8004c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c4e:	f003 0320 	and.w	r3, r3, #32
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d105      	bne.n	8004c62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d005      	beq.n	8004c6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	f043 0208 	orr.w	r2, r3, #8
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 81f2 	beq.w	800505c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c7c:	f003 0320 	and.w	r3, r3, #32
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <HAL_UART_IRQHandler+0x14e>
 8004c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c88:	f003 0320 	and.w	r3, r3, #32
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fb1e 	bl	80052d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	bf14      	ite	ne
 8004ca4:	2301      	movne	r3, #1
 8004ca6:	2300      	moveq	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d103      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x17a>
 8004cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d04f      	beq.n	8004d62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 fa28 	bl	8005118 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d041      	beq.n	8004d5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3314      	adds	r3, #20
 8004cdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ce4:	e853 3f00 	ldrex	r3, [r3]
 8004ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3314      	adds	r3, #20
 8004cfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d12:	e841 2300 	strex	r3, r2, [r1]
 8004d16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1d9      	bne.n	8004cd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d013      	beq.n	8004d52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2e:	4a7e      	ldr	r2, [pc, #504]	; (8004f28 <HAL_UART_IRQHandler+0x3e0>)
 8004d30:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fd fde0 	bl	80028fc <HAL_DMA_Abort_IT>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d016      	beq.n	8004d70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d50:	e00e      	b.n	8004d70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f993 	bl	800507e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d58:	e00a      	b.n	8004d70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f98f 	bl	800507e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d60:	e006      	b.n	8004d70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f98b 	bl	800507e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004d6e:	e175      	b.n	800505c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d70:	bf00      	nop
    return;
 8004d72:	e173      	b.n	800505c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	f040 814f 	bne.w	800501c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 8148 	beq.w	800501c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 8141 	beq.w	800501c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60bb      	str	r3, [r7, #8]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60bb      	str	r3, [r7, #8]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	60bb      	str	r3, [r7, #8]
 8004dae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 80b6 	beq.w	8004f2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004dcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 8145 	beq.w	8005060 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dde:	429a      	cmp	r2, r3
 8004de0:	f080 813e 	bcs.w	8005060 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	f000 8088 	beq.w	8004f08 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	330c      	adds	r3, #12
 8004dfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e06:	e853 3f00 	ldrex	r3, [r3]
 8004e0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	330c      	adds	r3, #12
 8004e20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004e24:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e30:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e34:	e841 2300 	strex	r3, r2, [r1]
 8004e38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1d9      	bne.n	8004df8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3314      	adds	r3, #20
 8004e4a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e4e:	e853 3f00 	ldrex	r3, [r3]
 8004e52:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e56:	f023 0301 	bic.w	r3, r3, #1
 8004e5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3314      	adds	r3, #20
 8004e64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e68:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e6c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e70:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e1      	bne.n	8004e44 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3314      	adds	r3, #20
 8004e86:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e8a:	e853 3f00 	ldrex	r3, [r3]
 8004e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3314      	adds	r3, #20
 8004ea0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ea4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ea6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004eaa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004eac:	e841 2300 	strex	r3, r2, [r1]
 8004eb0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004eb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e3      	bne.n	8004e80 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	330c      	adds	r3, #12
 8004ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ed8:	f023 0310 	bic.w	r3, r3, #16
 8004edc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004eea:	65ba      	str	r2, [r7, #88]	; 0x58
 8004eec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ef0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e3      	bne.n	8004ec6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fd fcbf 	bl	8002886 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f8b6 	bl	8005090 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f24:	e09c      	b.n	8005060 <HAL_UART_IRQHandler+0x518>
 8004f26:	bf00      	nop
 8004f28:	080051dd 	.word	0x080051dd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 808e 	beq.w	8005064 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004f48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 8089 	beq.w	8005064 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	330c      	adds	r3, #12
 8004f58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	330c      	adds	r3, #12
 8004f72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f76:	647a      	str	r2, [r7, #68]	; 0x44
 8004f78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e3      	bne.n	8004f52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3314      	adds	r3, #20
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	623b      	str	r3, [r7, #32]
   return(result);
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	f023 0301 	bic.w	r3, r3, #1
 8004fa0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3314      	adds	r3, #20
 8004faa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004fae:	633a      	str	r2, [r7, #48]	; 0x30
 8004fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb6:	e841 2300 	strex	r3, r2, [r1]
 8004fba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1e3      	bne.n	8004f8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	330c      	adds	r3, #12
 8004fd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0310 	bic.w	r3, r3, #16
 8004fe6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	330c      	adds	r3, #12
 8004ff0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ff4:	61fa      	str	r2, [r7, #28]
 8004ff6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	69b9      	ldr	r1, [r7, #24]
 8004ffa:	69fa      	ldr	r2, [r7, #28]
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	617b      	str	r3, [r7, #20]
   return(result);
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e3      	bne.n	8004fd0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800500e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005012:	4619      	mov	r1, r3
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f83b 	bl	8005090 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800501a:	e023      	b.n	8005064 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800501c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005024:	2b00      	cmp	r3, #0
 8005026:	d009      	beq.n	800503c <HAL_UART_IRQHandler+0x4f4>
 8005028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800502c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f8e5 	bl	8005204 <UART_Transmit_IT>
    return;
 800503a:	e014      	b.n	8005066 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800503c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00e      	beq.n	8005066 <HAL_UART_IRQHandler+0x51e>
 8005048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	d008      	beq.n	8005066 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f924 	bl	80052a2 <UART_EndTransmit_IT>
    return;
 800505a:	e004      	b.n	8005066 <HAL_UART_IRQHandler+0x51e>
    return;
 800505c:	bf00      	nop
 800505e:	e002      	b.n	8005066 <HAL_UART_IRQHandler+0x51e>
      return;
 8005060:	bf00      	nop
 8005062:	e000      	b.n	8005066 <HAL_UART_IRQHandler+0x51e>
      return;
 8005064:	bf00      	nop
  }
}
 8005066:	37e8      	adds	r7, #232	; 0xe8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	bc80      	pop	{r7}
 800507c:	4770      	bx	lr

0800507e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr

08005090 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	460b      	mov	r3, r1
 800509a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr

080050a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	4613      	mov	r3, r2
 80050b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	88fa      	ldrh	r2, [r7, #6]
 80050be:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	88fa      	ldrh	r2, [r7, #6]
 80050c4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2222      	movs	r2, #34	; 0x22
 80050d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d007      	beq.n	80050ec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695a      	ldr	r2, [r3, #20]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0220 	orr.w	r2, r2, #32
 800510a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr

08005118 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005118:	b480      	push	{r7}
 800511a:	b095      	sub	sp, #84	; 0x54
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	330c      	adds	r3, #12
 8005126:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	330c      	adds	r3, #12
 800513e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005140:	643a      	str	r2, [r7, #64]	; 0x40
 8005142:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e5      	bne.n	8005120 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3314      	adds	r3, #20
 800515a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	61fb      	str	r3, [r7, #28]
   return(result);
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f023 0301 	bic.w	r3, r3, #1
 800516a:	64bb      	str	r3, [r7, #72]	; 0x48
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3314      	adds	r3, #20
 8005172:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005174:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005176:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800517a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e5      	bne.n	8005154 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518c:	2b01      	cmp	r3, #1
 800518e:	d119      	bne.n	80051c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	330c      	adds	r3, #12
 8005196:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	e853 3f00 	ldrex	r3, [r3]
 800519e:	60bb      	str	r3, [r7, #8]
   return(result);
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f023 0310 	bic.w	r3, r3, #16
 80051a6:	647b      	str	r3, [r7, #68]	; 0x44
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	330c      	adds	r3, #12
 80051ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051b0:	61ba      	str	r2, [r7, #24]
 80051b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	6979      	ldr	r1, [r7, #20]
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	e841 2300 	strex	r3, r2, [r1]
 80051bc:	613b      	str	r3, [r7, #16]
   return(result);
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1e5      	bne.n	8005190 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051d2:	bf00      	nop
 80051d4:	3754      	adds	r7, #84	; 0x54
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bc80      	pop	{r7}
 80051da:	4770      	bx	lr

080051dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f7ff ff41 	bl	800507e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051fc:	bf00      	nop
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b21      	cmp	r3, #33	; 0x21
 8005216:	d13e      	bne.n	8005296 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005220:	d114      	bne.n	800524c <UART_Transmit_IT+0x48>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d110      	bne.n	800524c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	461a      	mov	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800523e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	1c9a      	adds	r2, r3, #2
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	621a      	str	r2, [r3, #32]
 800524a:	e008      	b.n	800525e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	1c59      	adds	r1, r3, #1
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6211      	str	r1, [r2, #32]
 8005256:	781a      	ldrb	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	b29b      	uxth	r3, r3
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	4619      	mov	r1, r3
 800526c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10f      	bne.n	8005292 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005280:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005290:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	e000      	b.n	8005298 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005296:	2302      	movs	r3, #2
  }
}
 8005298:	4618      	mov	r0, r3
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr

080052a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7ff fed2 	bl	800506c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b08c      	sub	sp, #48	; 0x30
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b22      	cmp	r3, #34	; 0x22
 80052e4:	f040 80ae 	bne.w	8005444 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f0:	d117      	bne.n	8005322 <UART_Receive_IT+0x50>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d113      	bne.n	8005322 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	b29b      	uxth	r3, r3
 800530c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005310:	b29a      	uxth	r2, r3
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531a:	1c9a      	adds	r2, r3, #2
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	629a      	str	r2, [r3, #40]	; 0x28
 8005320:	e026      	b.n	8005370 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005326:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005328:	2300      	movs	r3, #0
 800532a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005334:	d007      	beq.n	8005346 <UART_Receive_IT+0x74>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10a      	bne.n	8005354 <UART_Receive_IT+0x82>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	b2da      	uxtb	r2, r3
 800534e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	e008      	b.n	8005366 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	b2db      	uxtb	r3, r3
 800535c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005360:	b2da      	uxtb	r2, r3
 8005362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005364:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005374:	b29b      	uxth	r3, r3
 8005376:	3b01      	subs	r3, #1
 8005378:	b29b      	uxth	r3, r3
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	4619      	mov	r1, r3
 800537e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005380:	2b00      	cmp	r3, #0
 8005382:	d15d      	bne.n	8005440 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0220 	bic.w	r2, r2, #32
 8005392:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695a      	ldr	r2, [r3, #20]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0201 	bic.w	r2, r2, #1
 80053b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2220      	movs	r2, #32
 80053b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d135      	bne.n	8005436 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	330c      	adds	r3, #12
 80053d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	e853 3f00 	ldrex	r3, [r3]
 80053de:	613b      	str	r3, [r7, #16]
   return(result);
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f023 0310 	bic.w	r3, r3, #16
 80053e6:	627b      	str	r3, [r7, #36]	; 0x24
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	330c      	adds	r3, #12
 80053ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f0:	623a      	str	r2, [r7, #32]
 80053f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f4:	69f9      	ldr	r1, [r7, #28]
 80053f6:	6a3a      	ldr	r2, [r7, #32]
 80053f8:	e841 2300 	strex	r3, r2, [r1]
 80053fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e5      	bne.n	80053d0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0310 	and.w	r3, r3, #16
 800540e:	2b10      	cmp	r3, #16
 8005410:	d10a      	bne.n	8005428 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800542c:	4619      	mov	r1, r3
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff fe2e 	bl	8005090 <HAL_UARTEx_RxEventCallback>
 8005434:	e002      	b.n	800543c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fc fe4c 	bl	80020d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	e002      	b.n	8005446 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005440:	2300      	movs	r3, #0
 8005442:	e000      	b.n	8005446 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005444:	2302      	movs	r3, #2
  }
}
 8005446:	4618      	mov	r0, r3
 8005448:	3730      	adds	r7, #48	; 0x30
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	4313      	orrs	r3, r2
 800547e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800548a:	f023 030c 	bic.w	r3, r3, #12
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6812      	ldr	r2, [r2, #0]
 8005492:	68b9      	ldr	r1, [r7, #8]
 8005494:	430b      	orrs	r3, r1
 8005496:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a2c      	ldr	r2, [pc, #176]	; (8005564 <UART_SetConfig+0x114>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d103      	bne.n	80054c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80054b8:	f7fe fcc6 	bl	8003e48 <HAL_RCC_GetPCLK2Freq>
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	e002      	b.n	80054c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80054c0:	f7fe fcae 	bl	8003e20 <HAL_RCC_GetPCLK1Freq>
 80054c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4613      	mov	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	009a      	lsls	r2, r3, #2
 80054d0:	441a      	add	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054dc:	4a22      	ldr	r2, [pc, #136]	; (8005568 <UART_SetConfig+0x118>)
 80054de:	fba2 2303 	umull	r2, r3, r2, r3
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	0119      	lsls	r1, r3, #4
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4613      	mov	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	009a      	lsls	r2, r3, #2
 80054f0:	441a      	add	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80054fc:	4b1a      	ldr	r3, [pc, #104]	; (8005568 <UART_SetConfig+0x118>)
 80054fe:	fba3 0302 	umull	r0, r3, r3, r2
 8005502:	095b      	lsrs	r3, r3, #5
 8005504:	2064      	movs	r0, #100	; 0x64
 8005506:	fb00 f303 	mul.w	r3, r0, r3
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	3332      	adds	r3, #50	; 0x32
 8005510:	4a15      	ldr	r2, [pc, #84]	; (8005568 <UART_SetConfig+0x118>)
 8005512:	fba2 2303 	umull	r2, r3, r2, r3
 8005516:	095b      	lsrs	r3, r3, #5
 8005518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800551c:	4419      	add	r1, r3
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	009a      	lsls	r2, r3, #2
 8005528:	441a      	add	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	fbb2 f2f3 	udiv	r2, r2, r3
 8005534:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <UART_SetConfig+0x118>)
 8005536:	fba3 0302 	umull	r0, r3, r3, r2
 800553a:	095b      	lsrs	r3, r3, #5
 800553c:	2064      	movs	r0, #100	; 0x64
 800553e:	fb00 f303 	mul.w	r3, r0, r3
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	3332      	adds	r3, #50	; 0x32
 8005548:	4a07      	ldr	r2, [pc, #28]	; (8005568 <UART_SetConfig+0x118>)
 800554a:	fba2 2303 	umull	r2, r3, r2, r3
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	f003 020f 	and.w	r2, r3, #15
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	440a      	add	r2, r1
 800555a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800555c:	bf00      	nop
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40013800 	.word	0x40013800
 8005568:	51eb851f 	.word	0x51eb851f

0800556c <siprintf>:
 800556c:	b40e      	push	{r1, r2, r3}
 800556e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005572:	b500      	push	{lr}
 8005574:	b09c      	sub	sp, #112	; 0x70
 8005576:	ab1d      	add	r3, sp, #116	; 0x74
 8005578:	9002      	str	r0, [sp, #8]
 800557a:	9006      	str	r0, [sp, #24]
 800557c:	9107      	str	r1, [sp, #28]
 800557e:	9104      	str	r1, [sp, #16]
 8005580:	4808      	ldr	r0, [pc, #32]	; (80055a4 <siprintf+0x38>)
 8005582:	4909      	ldr	r1, [pc, #36]	; (80055a8 <siprintf+0x3c>)
 8005584:	f853 2b04 	ldr.w	r2, [r3], #4
 8005588:	9105      	str	r1, [sp, #20]
 800558a:	6800      	ldr	r0, [r0, #0]
 800558c:	a902      	add	r1, sp, #8
 800558e:	9301      	str	r3, [sp, #4]
 8005590:	f000 f99c 	bl	80058cc <_svfiprintf_r>
 8005594:	2200      	movs	r2, #0
 8005596:	9b02      	ldr	r3, [sp, #8]
 8005598:	701a      	strb	r2, [r3, #0]
 800559a:	b01c      	add	sp, #112	; 0x70
 800559c:	f85d eb04 	ldr.w	lr, [sp], #4
 80055a0:	b003      	add	sp, #12
 80055a2:	4770      	bx	lr
 80055a4:	2000005c 	.word	0x2000005c
 80055a8:	ffff0208 	.word	0xffff0208

080055ac <memset>:
 80055ac:	4603      	mov	r3, r0
 80055ae:	4402      	add	r2, r0
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d100      	bne.n	80055b6 <memset+0xa>
 80055b4:	4770      	bx	lr
 80055b6:	f803 1b01 	strb.w	r1, [r3], #1
 80055ba:	e7f9      	b.n	80055b0 <memset+0x4>

080055bc <__errno>:
 80055bc:	4b01      	ldr	r3, [pc, #4]	; (80055c4 <__errno+0x8>)
 80055be:	6818      	ldr	r0, [r3, #0]
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	2000005c 	.word	0x2000005c

080055c8 <__libc_init_array>:
 80055c8:	b570      	push	{r4, r5, r6, lr}
 80055ca:	2600      	movs	r6, #0
 80055cc:	4d0c      	ldr	r5, [pc, #48]	; (8005600 <__libc_init_array+0x38>)
 80055ce:	4c0d      	ldr	r4, [pc, #52]	; (8005604 <__libc_init_array+0x3c>)
 80055d0:	1b64      	subs	r4, r4, r5
 80055d2:	10a4      	asrs	r4, r4, #2
 80055d4:	42a6      	cmp	r6, r4
 80055d6:	d109      	bne.n	80055ec <__libc_init_array+0x24>
 80055d8:	f000 fc7a 	bl	8005ed0 <_init>
 80055dc:	2600      	movs	r6, #0
 80055de:	4d0a      	ldr	r5, [pc, #40]	; (8005608 <__libc_init_array+0x40>)
 80055e0:	4c0a      	ldr	r4, [pc, #40]	; (800560c <__libc_init_array+0x44>)
 80055e2:	1b64      	subs	r4, r4, r5
 80055e4:	10a4      	asrs	r4, r4, #2
 80055e6:	42a6      	cmp	r6, r4
 80055e8:	d105      	bne.n	80055f6 <__libc_init_array+0x2e>
 80055ea:	bd70      	pop	{r4, r5, r6, pc}
 80055ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f0:	4798      	blx	r3
 80055f2:	3601      	adds	r6, #1
 80055f4:	e7ee      	b.n	80055d4 <__libc_init_array+0xc>
 80055f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055fa:	4798      	blx	r3
 80055fc:	3601      	adds	r6, #1
 80055fe:	e7f2      	b.n	80055e6 <__libc_init_array+0x1e>
 8005600:	080060c0 	.word	0x080060c0
 8005604:	080060c0 	.word	0x080060c0
 8005608:	080060c0 	.word	0x080060c0
 800560c:	080060c4 	.word	0x080060c4

08005610 <__retarget_lock_acquire_recursive>:
 8005610:	4770      	bx	lr

08005612 <__retarget_lock_release_recursive>:
 8005612:	4770      	bx	lr

08005614 <memcpy>:
 8005614:	440a      	add	r2, r1
 8005616:	4291      	cmp	r1, r2
 8005618:	f100 33ff 	add.w	r3, r0, #4294967295
 800561c:	d100      	bne.n	8005620 <memcpy+0xc>
 800561e:	4770      	bx	lr
 8005620:	b510      	push	{r4, lr}
 8005622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005626:	4291      	cmp	r1, r2
 8005628:	f803 4f01 	strb.w	r4, [r3, #1]!
 800562c:	d1f9      	bne.n	8005622 <memcpy+0xe>
 800562e:	bd10      	pop	{r4, pc}

08005630 <_free_r>:
 8005630:	b538      	push	{r3, r4, r5, lr}
 8005632:	4605      	mov	r5, r0
 8005634:	2900      	cmp	r1, #0
 8005636:	d040      	beq.n	80056ba <_free_r+0x8a>
 8005638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800563c:	1f0c      	subs	r4, r1, #4
 800563e:	2b00      	cmp	r3, #0
 8005640:	bfb8      	it	lt
 8005642:	18e4      	addlt	r4, r4, r3
 8005644:	f000 f8dc 	bl	8005800 <__malloc_lock>
 8005648:	4a1c      	ldr	r2, [pc, #112]	; (80056bc <_free_r+0x8c>)
 800564a:	6813      	ldr	r3, [r2, #0]
 800564c:	b933      	cbnz	r3, 800565c <_free_r+0x2c>
 800564e:	6063      	str	r3, [r4, #4]
 8005650:	6014      	str	r4, [r2, #0]
 8005652:	4628      	mov	r0, r5
 8005654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005658:	f000 b8d8 	b.w	800580c <__malloc_unlock>
 800565c:	42a3      	cmp	r3, r4
 800565e:	d908      	bls.n	8005672 <_free_r+0x42>
 8005660:	6820      	ldr	r0, [r4, #0]
 8005662:	1821      	adds	r1, r4, r0
 8005664:	428b      	cmp	r3, r1
 8005666:	bf01      	itttt	eq
 8005668:	6819      	ldreq	r1, [r3, #0]
 800566a:	685b      	ldreq	r3, [r3, #4]
 800566c:	1809      	addeq	r1, r1, r0
 800566e:	6021      	streq	r1, [r4, #0]
 8005670:	e7ed      	b.n	800564e <_free_r+0x1e>
 8005672:	461a      	mov	r2, r3
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	b10b      	cbz	r3, 800567c <_free_r+0x4c>
 8005678:	42a3      	cmp	r3, r4
 800567a:	d9fa      	bls.n	8005672 <_free_r+0x42>
 800567c:	6811      	ldr	r1, [r2, #0]
 800567e:	1850      	adds	r0, r2, r1
 8005680:	42a0      	cmp	r0, r4
 8005682:	d10b      	bne.n	800569c <_free_r+0x6c>
 8005684:	6820      	ldr	r0, [r4, #0]
 8005686:	4401      	add	r1, r0
 8005688:	1850      	adds	r0, r2, r1
 800568a:	4283      	cmp	r3, r0
 800568c:	6011      	str	r1, [r2, #0]
 800568e:	d1e0      	bne.n	8005652 <_free_r+0x22>
 8005690:	6818      	ldr	r0, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	4408      	add	r0, r1
 8005696:	6010      	str	r0, [r2, #0]
 8005698:	6053      	str	r3, [r2, #4]
 800569a:	e7da      	b.n	8005652 <_free_r+0x22>
 800569c:	d902      	bls.n	80056a4 <_free_r+0x74>
 800569e:	230c      	movs	r3, #12
 80056a0:	602b      	str	r3, [r5, #0]
 80056a2:	e7d6      	b.n	8005652 <_free_r+0x22>
 80056a4:	6820      	ldr	r0, [r4, #0]
 80056a6:	1821      	adds	r1, r4, r0
 80056a8:	428b      	cmp	r3, r1
 80056aa:	bf01      	itttt	eq
 80056ac:	6819      	ldreq	r1, [r3, #0]
 80056ae:	685b      	ldreq	r3, [r3, #4]
 80056b0:	1809      	addeq	r1, r1, r0
 80056b2:	6021      	streq	r1, [r4, #0]
 80056b4:	6063      	str	r3, [r4, #4]
 80056b6:	6054      	str	r4, [r2, #4]
 80056b8:	e7cb      	b.n	8005652 <_free_r+0x22>
 80056ba:	bd38      	pop	{r3, r4, r5, pc}
 80056bc:	20000324 	.word	0x20000324

080056c0 <sbrk_aligned>:
 80056c0:	b570      	push	{r4, r5, r6, lr}
 80056c2:	4e0e      	ldr	r6, [pc, #56]	; (80056fc <sbrk_aligned+0x3c>)
 80056c4:	460c      	mov	r4, r1
 80056c6:	6831      	ldr	r1, [r6, #0]
 80056c8:	4605      	mov	r5, r0
 80056ca:	b911      	cbnz	r1, 80056d2 <sbrk_aligned+0x12>
 80056cc:	f000 fbaa 	bl	8005e24 <_sbrk_r>
 80056d0:	6030      	str	r0, [r6, #0]
 80056d2:	4621      	mov	r1, r4
 80056d4:	4628      	mov	r0, r5
 80056d6:	f000 fba5 	bl	8005e24 <_sbrk_r>
 80056da:	1c43      	adds	r3, r0, #1
 80056dc:	d00a      	beq.n	80056f4 <sbrk_aligned+0x34>
 80056de:	1cc4      	adds	r4, r0, #3
 80056e0:	f024 0403 	bic.w	r4, r4, #3
 80056e4:	42a0      	cmp	r0, r4
 80056e6:	d007      	beq.n	80056f8 <sbrk_aligned+0x38>
 80056e8:	1a21      	subs	r1, r4, r0
 80056ea:	4628      	mov	r0, r5
 80056ec:	f000 fb9a 	bl	8005e24 <_sbrk_r>
 80056f0:	3001      	adds	r0, #1
 80056f2:	d101      	bne.n	80056f8 <sbrk_aligned+0x38>
 80056f4:	f04f 34ff 	mov.w	r4, #4294967295
 80056f8:	4620      	mov	r0, r4
 80056fa:	bd70      	pop	{r4, r5, r6, pc}
 80056fc:	20000328 	.word	0x20000328

08005700 <_malloc_r>:
 8005700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005704:	1ccd      	adds	r5, r1, #3
 8005706:	f025 0503 	bic.w	r5, r5, #3
 800570a:	3508      	adds	r5, #8
 800570c:	2d0c      	cmp	r5, #12
 800570e:	bf38      	it	cc
 8005710:	250c      	movcc	r5, #12
 8005712:	2d00      	cmp	r5, #0
 8005714:	4607      	mov	r7, r0
 8005716:	db01      	blt.n	800571c <_malloc_r+0x1c>
 8005718:	42a9      	cmp	r1, r5
 800571a:	d905      	bls.n	8005728 <_malloc_r+0x28>
 800571c:	230c      	movs	r3, #12
 800571e:	2600      	movs	r6, #0
 8005720:	603b      	str	r3, [r7, #0]
 8005722:	4630      	mov	r0, r6
 8005724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005728:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80057fc <_malloc_r+0xfc>
 800572c:	f000 f868 	bl	8005800 <__malloc_lock>
 8005730:	f8d8 3000 	ldr.w	r3, [r8]
 8005734:	461c      	mov	r4, r3
 8005736:	bb5c      	cbnz	r4, 8005790 <_malloc_r+0x90>
 8005738:	4629      	mov	r1, r5
 800573a:	4638      	mov	r0, r7
 800573c:	f7ff ffc0 	bl	80056c0 <sbrk_aligned>
 8005740:	1c43      	adds	r3, r0, #1
 8005742:	4604      	mov	r4, r0
 8005744:	d155      	bne.n	80057f2 <_malloc_r+0xf2>
 8005746:	f8d8 4000 	ldr.w	r4, [r8]
 800574a:	4626      	mov	r6, r4
 800574c:	2e00      	cmp	r6, #0
 800574e:	d145      	bne.n	80057dc <_malloc_r+0xdc>
 8005750:	2c00      	cmp	r4, #0
 8005752:	d048      	beq.n	80057e6 <_malloc_r+0xe6>
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	4631      	mov	r1, r6
 8005758:	4638      	mov	r0, r7
 800575a:	eb04 0903 	add.w	r9, r4, r3
 800575e:	f000 fb61 	bl	8005e24 <_sbrk_r>
 8005762:	4581      	cmp	r9, r0
 8005764:	d13f      	bne.n	80057e6 <_malloc_r+0xe6>
 8005766:	6821      	ldr	r1, [r4, #0]
 8005768:	4638      	mov	r0, r7
 800576a:	1a6d      	subs	r5, r5, r1
 800576c:	4629      	mov	r1, r5
 800576e:	f7ff ffa7 	bl	80056c0 <sbrk_aligned>
 8005772:	3001      	adds	r0, #1
 8005774:	d037      	beq.n	80057e6 <_malloc_r+0xe6>
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	442b      	add	r3, r5
 800577a:	6023      	str	r3, [r4, #0]
 800577c:	f8d8 3000 	ldr.w	r3, [r8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d038      	beq.n	80057f6 <_malloc_r+0xf6>
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	42a2      	cmp	r2, r4
 8005788:	d12b      	bne.n	80057e2 <_malloc_r+0xe2>
 800578a:	2200      	movs	r2, #0
 800578c:	605a      	str	r2, [r3, #4]
 800578e:	e00f      	b.n	80057b0 <_malloc_r+0xb0>
 8005790:	6822      	ldr	r2, [r4, #0]
 8005792:	1b52      	subs	r2, r2, r5
 8005794:	d41f      	bmi.n	80057d6 <_malloc_r+0xd6>
 8005796:	2a0b      	cmp	r2, #11
 8005798:	d917      	bls.n	80057ca <_malloc_r+0xca>
 800579a:	1961      	adds	r1, r4, r5
 800579c:	42a3      	cmp	r3, r4
 800579e:	6025      	str	r5, [r4, #0]
 80057a0:	bf18      	it	ne
 80057a2:	6059      	strne	r1, [r3, #4]
 80057a4:	6863      	ldr	r3, [r4, #4]
 80057a6:	bf08      	it	eq
 80057a8:	f8c8 1000 	streq.w	r1, [r8]
 80057ac:	5162      	str	r2, [r4, r5]
 80057ae:	604b      	str	r3, [r1, #4]
 80057b0:	4638      	mov	r0, r7
 80057b2:	f104 060b 	add.w	r6, r4, #11
 80057b6:	f000 f829 	bl	800580c <__malloc_unlock>
 80057ba:	f026 0607 	bic.w	r6, r6, #7
 80057be:	1d23      	adds	r3, r4, #4
 80057c0:	1af2      	subs	r2, r6, r3
 80057c2:	d0ae      	beq.n	8005722 <_malloc_r+0x22>
 80057c4:	1b9b      	subs	r3, r3, r6
 80057c6:	50a3      	str	r3, [r4, r2]
 80057c8:	e7ab      	b.n	8005722 <_malloc_r+0x22>
 80057ca:	42a3      	cmp	r3, r4
 80057cc:	6862      	ldr	r2, [r4, #4]
 80057ce:	d1dd      	bne.n	800578c <_malloc_r+0x8c>
 80057d0:	f8c8 2000 	str.w	r2, [r8]
 80057d4:	e7ec      	b.n	80057b0 <_malloc_r+0xb0>
 80057d6:	4623      	mov	r3, r4
 80057d8:	6864      	ldr	r4, [r4, #4]
 80057da:	e7ac      	b.n	8005736 <_malloc_r+0x36>
 80057dc:	4634      	mov	r4, r6
 80057de:	6876      	ldr	r6, [r6, #4]
 80057e0:	e7b4      	b.n	800574c <_malloc_r+0x4c>
 80057e2:	4613      	mov	r3, r2
 80057e4:	e7cc      	b.n	8005780 <_malloc_r+0x80>
 80057e6:	230c      	movs	r3, #12
 80057e8:	4638      	mov	r0, r7
 80057ea:	603b      	str	r3, [r7, #0]
 80057ec:	f000 f80e 	bl	800580c <__malloc_unlock>
 80057f0:	e797      	b.n	8005722 <_malloc_r+0x22>
 80057f2:	6025      	str	r5, [r4, #0]
 80057f4:	e7dc      	b.n	80057b0 <_malloc_r+0xb0>
 80057f6:	605b      	str	r3, [r3, #4]
 80057f8:	deff      	udf	#255	; 0xff
 80057fa:	bf00      	nop
 80057fc:	20000324 	.word	0x20000324

08005800 <__malloc_lock>:
 8005800:	4801      	ldr	r0, [pc, #4]	; (8005808 <__malloc_lock+0x8>)
 8005802:	f7ff bf05 	b.w	8005610 <__retarget_lock_acquire_recursive>
 8005806:	bf00      	nop
 8005808:	20000320 	.word	0x20000320

0800580c <__malloc_unlock>:
 800580c:	4801      	ldr	r0, [pc, #4]	; (8005814 <__malloc_unlock+0x8>)
 800580e:	f7ff bf00 	b.w	8005612 <__retarget_lock_release_recursive>
 8005812:	bf00      	nop
 8005814:	20000320 	.word	0x20000320

08005818 <__ssputs_r>:
 8005818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800581c:	461f      	mov	r7, r3
 800581e:	688e      	ldr	r6, [r1, #8]
 8005820:	4682      	mov	sl, r0
 8005822:	42be      	cmp	r6, r7
 8005824:	460c      	mov	r4, r1
 8005826:	4690      	mov	r8, r2
 8005828:	680b      	ldr	r3, [r1, #0]
 800582a:	d82c      	bhi.n	8005886 <__ssputs_r+0x6e>
 800582c:	898a      	ldrh	r2, [r1, #12]
 800582e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005832:	d026      	beq.n	8005882 <__ssputs_r+0x6a>
 8005834:	6965      	ldr	r5, [r4, #20]
 8005836:	6909      	ldr	r1, [r1, #16]
 8005838:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800583c:	eba3 0901 	sub.w	r9, r3, r1
 8005840:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005844:	1c7b      	adds	r3, r7, #1
 8005846:	444b      	add	r3, r9
 8005848:	106d      	asrs	r5, r5, #1
 800584a:	429d      	cmp	r5, r3
 800584c:	bf38      	it	cc
 800584e:	461d      	movcc	r5, r3
 8005850:	0553      	lsls	r3, r2, #21
 8005852:	d527      	bpl.n	80058a4 <__ssputs_r+0x8c>
 8005854:	4629      	mov	r1, r5
 8005856:	f7ff ff53 	bl	8005700 <_malloc_r>
 800585a:	4606      	mov	r6, r0
 800585c:	b360      	cbz	r0, 80058b8 <__ssputs_r+0xa0>
 800585e:	464a      	mov	r2, r9
 8005860:	6921      	ldr	r1, [r4, #16]
 8005862:	f7ff fed7 	bl	8005614 <memcpy>
 8005866:	89a3      	ldrh	r3, [r4, #12]
 8005868:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800586c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005870:	81a3      	strh	r3, [r4, #12]
 8005872:	6126      	str	r6, [r4, #16]
 8005874:	444e      	add	r6, r9
 8005876:	6026      	str	r6, [r4, #0]
 8005878:	463e      	mov	r6, r7
 800587a:	6165      	str	r5, [r4, #20]
 800587c:	eba5 0509 	sub.w	r5, r5, r9
 8005880:	60a5      	str	r5, [r4, #8]
 8005882:	42be      	cmp	r6, r7
 8005884:	d900      	bls.n	8005888 <__ssputs_r+0x70>
 8005886:	463e      	mov	r6, r7
 8005888:	4632      	mov	r2, r6
 800588a:	4641      	mov	r1, r8
 800588c:	6820      	ldr	r0, [r4, #0]
 800588e:	f000 faaf 	bl	8005df0 <memmove>
 8005892:	2000      	movs	r0, #0
 8005894:	68a3      	ldr	r3, [r4, #8]
 8005896:	1b9b      	subs	r3, r3, r6
 8005898:	60a3      	str	r3, [r4, #8]
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	4433      	add	r3, r6
 800589e:	6023      	str	r3, [r4, #0]
 80058a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a4:	462a      	mov	r2, r5
 80058a6:	f000 fadb 	bl	8005e60 <_realloc_r>
 80058aa:	4606      	mov	r6, r0
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d1e0      	bne.n	8005872 <__ssputs_r+0x5a>
 80058b0:	4650      	mov	r0, sl
 80058b2:	6921      	ldr	r1, [r4, #16]
 80058b4:	f7ff febc 	bl	8005630 <_free_r>
 80058b8:	230c      	movs	r3, #12
 80058ba:	f8ca 3000 	str.w	r3, [sl]
 80058be:	89a3      	ldrh	r3, [r4, #12]
 80058c0:	f04f 30ff 	mov.w	r0, #4294967295
 80058c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058c8:	81a3      	strh	r3, [r4, #12]
 80058ca:	e7e9      	b.n	80058a0 <__ssputs_r+0x88>

080058cc <_svfiprintf_r>:
 80058cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d0:	4698      	mov	r8, r3
 80058d2:	898b      	ldrh	r3, [r1, #12]
 80058d4:	4607      	mov	r7, r0
 80058d6:	061b      	lsls	r3, r3, #24
 80058d8:	460d      	mov	r5, r1
 80058da:	4614      	mov	r4, r2
 80058dc:	b09d      	sub	sp, #116	; 0x74
 80058de:	d50e      	bpl.n	80058fe <_svfiprintf_r+0x32>
 80058e0:	690b      	ldr	r3, [r1, #16]
 80058e2:	b963      	cbnz	r3, 80058fe <_svfiprintf_r+0x32>
 80058e4:	2140      	movs	r1, #64	; 0x40
 80058e6:	f7ff ff0b 	bl	8005700 <_malloc_r>
 80058ea:	6028      	str	r0, [r5, #0]
 80058ec:	6128      	str	r0, [r5, #16]
 80058ee:	b920      	cbnz	r0, 80058fa <_svfiprintf_r+0x2e>
 80058f0:	230c      	movs	r3, #12
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	f04f 30ff 	mov.w	r0, #4294967295
 80058f8:	e0d0      	b.n	8005a9c <_svfiprintf_r+0x1d0>
 80058fa:	2340      	movs	r3, #64	; 0x40
 80058fc:	616b      	str	r3, [r5, #20]
 80058fe:	2300      	movs	r3, #0
 8005900:	9309      	str	r3, [sp, #36]	; 0x24
 8005902:	2320      	movs	r3, #32
 8005904:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005908:	2330      	movs	r3, #48	; 0x30
 800590a:	f04f 0901 	mov.w	r9, #1
 800590e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005912:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005ab4 <_svfiprintf_r+0x1e8>
 8005916:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800591a:	4623      	mov	r3, r4
 800591c:	469a      	mov	sl, r3
 800591e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005922:	b10a      	cbz	r2, 8005928 <_svfiprintf_r+0x5c>
 8005924:	2a25      	cmp	r2, #37	; 0x25
 8005926:	d1f9      	bne.n	800591c <_svfiprintf_r+0x50>
 8005928:	ebba 0b04 	subs.w	fp, sl, r4
 800592c:	d00b      	beq.n	8005946 <_svfiprintf_r+0x7a>
 800592e:	465b      	mov	r3, fp
 8005930:	4622      	mov	r2, r4
 8005932:	4629      	mov	r1, r5
 8005934:	4638      	mov	r0, r7
 8005936:	f7ff ff6f 	bl	8005818 <__ssputs_r>
 800593a:	3001      	adds	r0, #1
 800593c:	f000 80a9 	beq.w	8005a92 <_svfiprintf_r+0x1c6>
 8005940:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005942:	445a      	add	r2, fp
 8005944:	9209      	str	r2, [sp, #36]	; 0x24
 8005946:	f89a 3000 	ldrb.w	r3, [sl]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 80a1 	beq.w	8005a92 <_svfiprintf_r+0x1c6>
 8005950:	2300      	movs	r3, #0
 8005952:	f04f 32ff 	mov.w	r2, #4294967295
 8005956:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800595a:	f10a 0a01 	add.w	sl, sl, #1
 800595e:	9304      	str	r3, [sp, #16]
 8005960:	9307      	str	r3, [sp, #28]
 8005962:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005966:	931a      	str	r3, [sp, #104]	; 0x68
 8005968:	4654      	mov	r4, sl
 800596a:	2205      	movs	r2, #5
 800596c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005970:	4850      	ldr	r0, [pc, #320]	; (8005ab4 <_svfiprintf_r+0x1e8>)
 8005972:	f000 fa67 	bl	8005e44 <memchr>
 8005976:	9a04      	ldr	r2, [sp, #16]
 8005978:	b9d8      	cbnz	r0, 80059b2 <_svfiprintf_r+0xe6>
 800597a:	06d0      	lsls	r0, r2, #27
 800597c:	bf44      	itt	mi
 800597e:	2320      	movmi	r3, #32
 8005980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005984:	0711      	lsls	r1, r2, #28
 8005986:	bf44      	itt	mi
 8005988:	232b      	movmi	r3, #43	; 0x2b
 800598a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800598e:	f89a 3000 	ldrb.w	r3, [sl]
 8005992:	2b2a      	cmp	r3, #42	; 0x2a
 8005994:	d015      	beq.n	80059c2 <_svfiprintf_r+0xf6>
 8005996:	4654      	mov	r4, sl
 8005998:	2000      	movs	r0, #0
 800599a:	f04f 0c0a 	mov.w	ip, #10
 800599e:	9a07      	ldr	r2, [sp, #28]
 80059a0:	4621      	mov	r1, r4
 80059a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059a6:	3b30      	subs	r3, #48	; 0x30
 80059a8:	2b09      	cmp	r3, #9
 80059aa:	d94d      	bls.n	8005a48 <_svfiprintf_r+0x17c>
 80059ac:	b1b0      	cbz	r0, 80059dc <_svfiprintf_r+0x110>
 80059ae:	9207      	str	r2, [sp, #28]
 80059b0:	e014      	b.n	80059dc <_svfiprintf_r+0x110>
 80059b2:	eba0 0308 	sub.w	r3, r0, r8
 80059b6:	fa09 f303 	lsl.w	r3, r9, r3
 80059ba:	4313      	orrs	r3, r2
 80059bc:	46a2      	mov	sl, r4
 80059be:	9304      	str	r3, [sp, #16]
 80059c0:	e7d2      	b.n	8005968 <_svfiprintf_r+0x9c>
 80059c2:	9b03      	ldr	r3, [sp, #12]
 80059c4:	1d19      	adds	r1, r3, #4
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	9103      	str	r1, [sp, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	bfbb      	ittet	lt
 80059ce:	425b      	neglt	r3, r3
 80059d0:	f042 0202 	orrlt.w	r2, r2, #2
 80059d4:	9307      	strge	r3, [sp, #28]
 80059d6:	9307      	strlt	r3, [sp, #28]
 80059d8:	bfb8      	it	lt
 80059da:	9204      	strlt	r2, [sp, #16]
 80059dc:	7823      	ldrb	r3, [r4, #0]
 80059de:	2b2e      	cmp	r3, #46	; 0x2e
 80059e0:	d10c      	bne.n	80059fc <_svfiprintf_r+0x130>
 80059e2:	7863      	ldrb	r3, [r4, #1]
 80059e4:	2b2a      	cmp	r3, #42	; 0x2a
 80059e6:	d134      	bne.n	8005a52 <_svfiprintf_r+0x186>
 80059e8:	9b03      	ldr	r3, [sp, #12]
 80059ea:	3402      	adds	r4, #2
 80059ec:	1d1a      	adds	r2, r3, #4
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	9203      	str	r2, [sp, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	bfb8      	it	lt
 80059f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80059fa:	9305      	str	r3, [sp, #20]
 80059fc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005ab8 <_svfiprintf_r+0x1ec>
 8005a00:	2203      	movs	r2, #3
 8005a02:	4650      	mov	r0, sl
 8005a04:	7821      	ldrb	r1, [r4, #0]
 8005a06:	f000 fa1d 	bl	8005e44 <memchr>
 8005a0a:	b138      	cbz	r0, 8005a1c <_svfiprintf_r+0x150>
 8005a0c:	2240      	movs	r2, #64	; 0x40
 8005a0e:	9b04      	ldr	r3, [sp, #16]
 8005a10:	eba0 000a 	sub.w	r0, r0, sl
 8005a14:	4082      	lsls	r2, r0
 8005a16:	4313      	orrs	r3, r2
 8005a18:	3401      	adds	r4, #1
 8005a1a:	9304      	str	r3, [sp, #16]
 8005a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a20:	2206      	movs	r2, #6
 8005a22:	4826      	ldr	r0, [pc, #152]	; (8005abc <_svfiprintf_r+0x1f0>)
 8005a24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a28:	f000 fa0c 	bl	8005e44 <memchr>
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	d038      	beq.n	8005aa2 <_svfiprintf_r+0x1d6>
 8005a30:	4b23      	ldr	r3, [pc, #140]	; (8005ac0 <_svfiprintf_r+0x1f4>)
 8005a32:	bb1b      	cbnz	r3, 8005a7c <_svfiprintf_r+0x1b0>
 8005a34:	9b03      	ldr	r3, [sp, #12]
 8005a36:	3307      	adds	r3, #7
 8005a38:	f023 0307 	bic.w	r3, r3, #7
 8005a3c:	3308      	adds	r3, #8
 8005a3e:	9303      	str	r3, [sp, #12]
 8005a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a42:	4433      	add	r3, r6
 8005a44:	9309      	str	r3, [sp, #36]	; 0x24
 8005a46:	e768      	b.n	800591a <_svfiprintf_r+0x4e>
 8005a48:	460c      	mov	r4, r1
 8005a4a:	2001      	movs	r0, #1
 8005a4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a50:	e7a6      	b.n	80059a0 <_svfiprintf_r+0xd4>
 8005a52:	2300      	movs	r3, #0
 8005a54:	f04f 0c0a 	mov.w	ip, #10
 8005a58:	4619      	mov	r1, r3
 8005a5a:	3401      	adds	r4, #1
 8005a5c:	9305      	str	r3, [sp, #20]
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a64:	3a30      	subs	r2, #48	; 0x30
 8005a66:	2a09      	cmp	r2, #9
 8005a68:	d903      	bls.n	8005a72 <_svfiprintf_r+0x1a6>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0c6      	beq.n	80059fc <_svfiprintf_r+0x130>
 8005a6e:	9105      	str	r1, [sp, #20]
 8005a70:	e7c4      	b.n	80059fc <_svfiprintf_r+0x130>
 8005a72:	4604      	mov	r4, r0
 8005a74:	2301      	movs	r3, #1
 8005a76:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a7a:	e7f0      	b.n	8005a5e <_svfiprintf_r+0x192>
 8005a7c:	ab03      	add	r3, sp, #12
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	462a      	mov	r2, r5
 8005a82:	4638      	mov	r0, r7
 8005a84:	4b0f      	ldr	r3, [pc, #60]	; (8005ac4 <_svfiprintf_r+0x1f8>)
 8005a86:	a904      	add	r1, sp, #16
 8005a88:	f3af 8000 	nop.w
 8005a8c:	1c42      	adds	r2, r0, #1
 8005a8e:	4606      	mov	r6, r0
 8005a90:	d1d6      	bne.n	8005a40 <_svfiprintf_r+0x174>
 8005a92:	89ab      	ldrh	r3, [r5, #12]
 8005a94:	065b      	lsls	r3, r3, #25
 8005a96:	f53f af2d 	bmi.w	80058f4 <_svfiprintf_r+0x28>
 8005a9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a9c:	b01d      	add	sp, #116	; 0x74
 8005a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa2:	ab03      	add	r3, sp, #12
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	462a      	mov	r2, r5
 8005aa8:	4638      	mov	r0, r7
 8005aaa:	4b06      	ldr	r3, [pc, #24]	; (8005ac4 <_svfiprintf_r+0x1f8>)
 8005aac:	a904      	add	r1, sp, #16
 8005aae:	f000 f87d 	bl	8005bac <_printf_i>
 8005ab2:	e7eb      	b.n	8005a8c <_svfiprintf_r+0x1c0>
 8005ab4:	0800608a 	.word	0x0800608a
 8005ab8:	08006090 	.word	0x08006090
 8005abc:	08006094 	.word	0x08006094
 8005ac0:	00000000 	.word	0x00000000
 8005ac4:	08005819 	.word	0x08005819

08005ac8 <_printf_common>:
 8005ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005acc:	4616      	mov	r6, r2
 8005ace:	4699      	mov	r9, r3
 8005ad0:	688a      	ldr	r2, [r1, #8]
 8005ad2:	690b      	ldr	r3, [r1, #16]
 8005ad4:	4607      	mov	r7, r0
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	bfb8      	it	lt
 8005ada:	4613      	movlt	r3, r2
 8005adc:	6033      	str	r3, [r6, #0]
 8005ade:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ae2:	460c      	mov	r4, r1
 8005ae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ae8:	b10a      	cbz	r2, 8005aee <_printf_common+0x26>
 8005aea:	3301      	adds	r3, #1
 8005aec:	6033      	str	r3, [r6, #0]
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	0699      	lsls	r1, r3, #26
 8005af2:	bf42      	ittt	mi
 8005af4:	6833      	ldrmi	r3, [r6, #0]
 8005af6:	3302      	addmi	r3, #2
 8005af8:	6033      	strmi	r3, [r6, #0]
 8005afa:	6825      	ldr	r5, [r4, #0]
 8005afc:	f015 0506 	ands.w	r5, r5, #6
 8005b00:	d106      	bne.n	8005b10 <_printf_common+0x48>
 8005b02:	f104 0a19 	add.w	sl, r4, #25
 8005b06:	68e3      	ldr	r3, [r4, #12]
 8005b08:	6832      	ldr	r2, [r6, #0]
 8005b0a:	1a9b      	subs	r3, r3, r2
 8005b0c:	42ab      	cmp	r3, r5
 8005b0e:	dc2b      	bgt.n	8005b68 <_printf_common+0xa0>
 8005b10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b14:	1e13      	subs	r3, r2, #0
 8005b16:	6822      	ldr	r2, [r4, #0]
 8005b18:	bf18      	it	ne
 8005b1a:	2301      	movne	r3, #1
 8005b1c:	0692      	lsls	r2, r2, #26
 8005b1e:	d430      	bmi.n	8005b82 <_printf_common+0xba>
 8005b20:	4649      	mov	r1, r9
 8005b22:	4638      	mov	r0, r7
 8005b24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b28:	47c0      	blx	r8
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	d023      	beq.n	8005b76 <_printf_common+0xae>
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	6922      	ldr	r2, [r4, #16]
 8005b32:	f003 0306 	and.w	r3, r3, #6
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	bf14      	ite	ne
 8005b3a:	2500      	movne	r5, #0
 8005b3c:	6833      	ldreq	r3, [r6, #0]
 8005b3e:	f04f 0600 	mov.w	r6, #0
 8005b42:	bf08      	it	eq
 8005b44:	68e5      	ldreq	r5, [r4, #12]
 8005b46:	f104 041a 	add.w	r4, r4, #26
 8005b4a:	bf08      	it	eq
 8005b4c:	1aed      	subeq	r5, r5, r3
 8005b4e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005b52:	bf08      	it	eq
 8005b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	bfc4      	itt	gt
 8005b5c:	1a9b      	subgt	r3, r3, r2
 8005b5e:	18ed      	addgt	r5, r5, r3
 8005b60:	42b5      	cmp	r5, r6
 8005b62:	d11a      	bne.n	8005b9a <_printf_common+0xd2>
 8005b64:	2000      	movs	r0, #0
 8005b66:	e008      	b.n	8005b7a <_printf_common+0xb2>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	4652      	mov	r2, sl
 8005b6c:	4649      	mov	r1, r9
 8005b6e:	4638      	mov	r0, r7
 8005b70:	47c0      	blx	r8
 8005b72:	3001      	adds	r0, #1
 8005b74:	d103      	bne.n	8005b7e <_printf_common+0xb6>
 8005b76:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b7e:	3501      	adds	r5, #1
 8005b80:	e7c1      	b.n	8005b06 <_printf_common+0x3e>
 8005b82:	2030      	movs	r0, #48	; 0x30
 8005b84:	18e1      	adds	r1, r4, r3
 8005b86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b8a:	1c5a      	adds	r2, r3, #1
 8005b8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b90:	4422      	add	r2, r4
 8005b92:	3302      	adds	r3, #2
 8005b94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b98:	e7c2      	b.n	8005b20 <_printf_common+0x58>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	4622      	mov	r2, r4
 8005b9e:	4649      	mov	r1, r9
 8005ba0:	4638      	mov	r0, r7
 8005ba2:	47c0      	blx	r8
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d0e6      	beq.n	8005b76 <_printf_common+0xae>
 8005ba8:	3601      	adds	r6, #1
 8005baa:	e7d9      	b.n	8005b60 <_printf_common+0x98>

08005bac <_printf_i>:
 8005bac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb0:	7e0f      	ldrb	r7, [r1, #24]
 8005bb2:	4691      	mov	r9, r2
 8005bb4:	2f78      	cmp	r7, #120	; 0x78
 8005bb6:	4680      	mov	r8, r0
 8005bb8:	460c      	mov	r4, r1
 8005bba:	469a      	mov	sl, r3
 8005bbc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005bc2:	d807      	bhi.n	8005bd4 <_printf_i+0x28>
 8005bc4:	2f62      	cmp	r7, #98	; 0x62
 8005bc6:	d80a      	bhi.n	8005bde <_printf_i+0x32>
 8005bc8:	2f00      	cmp	r7, #0
 8005bca:	f000 80d5 	beq.w	8005d78 <_printf_i+0x1cc>
 8005bce:	2f58      	cmp	r7, #88	; 0x58
 8005bd0:	f000 80c1 	beq.w	8005d56 <_printf_i+0x1aa>
 8005bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bdc:	e03a      	b.n	8005c54 <_printf_i+0xa8>
 8005bde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005be2:	2b15      	cmp	r3, #21
 8005be4:	d8f6      	bhi.n	8005bd4 <_printf_i+0x28>
 8005be6:	a101      	add	r1, pc, #4	; (adr r1, 8005bec <_printf_i+0x40>)
 8005be8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bec:	08005c45 	.word	0x08005c45
 8005bf0:	08005c59 	.word	0x08005c59
 8005bf4:	08005bd5 	.word	0x08005bd5
 8005bf8:	08005bd5 	.word	0x08005bd5
 8005bfc:	08005bd5 	.word	0x08005bd5
 8005c00:	08005bd5 	.word	0x08005bd5
 8005c04:	08005c59 	.word	0x08005c59
 8005c08:	08005bd5 	.word	0x08005bd5
 8005c0c:	08005bd5 	.word	0x08005bd5
 8005c10:	08005bd5 	.word	0x08005bd5
 8005c14:	08005bd5 	.word	0x08005bd5
 8005c18:	08005d5f 	.word	0x08005d5f
 8005c1c:	08005c85 	.word	0x08005c85
 8005c20:	08005d19 	.word	0x08005d19
 8005c24:	08005bd5 	.word	0x08005bd5
 8005c28:	08005bd5 	.word	0x08005bd5
 8005c2c:	08005d81 	.word	0x08005d81
 8005c30:	08005bd5 	.word	0x08005bd5
 8005c34:	08005c85 	.word	0x08005c85
 8005c38:	08005bd5 	.word	0x08005bd5
 8005c3c:	08005bd5 	.word	0x08005bd5
 8005c40:	08005d21 	.word	0x08005d21
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	1d1a      	adds	r2, r3, #4
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	602a      	str	r2, [r5, #0]
 8005c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c54:	2301      	movs	r3, #1
 8005c56:	e0a0      	b.n	8005d9a <_printf_i+0x1ee>
 8005c58:	6820      	ldr	r0, [r4, #0]
 8005c5a:	682b      	ldr	r3, [r5, #0]
 8005c5c:	0607      	lsls	r7, r0, #24
 8005c5e:	f103 0104 	add.w	r1, r3, #4
 8005c62:	6029      	str	r1, [r5, #0]
 8005c64:	d501      	bpl.n	8005c6a <_printf_i+0xbe>
 8005c66:	681e      	ldr	r6, [r3, #0]
 8005c68:	e003      	b.n	8005c72 <_printf_i+0xc6>
 8005c6a:	0646      	lsls	r6, r0, #25
 8005c6c:	d5fb      	bpl.n	8005c66 <_printf_i+0xba>
 8005c6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c72:	2e00      	cmp	r6, #0
 8005c74:	da03      	bge.n	8005c7e <_printf_i+0xd2>
 8005c76:	232d      	movs	r3, #45	; 0x2d
 8005c78:	4276      	negs	r6, r6
 8005c7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c7e:	230a      	movs	r3, #10
 8005c80:	4859      	ldr	r0, [pc, #356]	; (8005de8 <_printf_i+0x23c>)
 8005c82:	e012      	b.n	8005caa <_printf_i+0xfe>
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	6820      	ldr	r0, [r4, #0]
 8005c88:	1d19      	adds	r1, r3, #4
 8005c8a:	6029      	str	r1, [r5, #0]
 8005c8c:	0605      	lsls	r5, r0, #24
 8005c8e:	d501      	bpl.n	8005c94 <_printf_i+0xe8>
 8005c90:	681e      	ldr	r6, [r3, #0]
 8005c92:	e002      	b.n	8005c9a <_printf_i+0xee>
 8005c94:	0641      	lsls	r1, r0, #25
 8005c96:	d5fb      	bpl.n	8005c90 <_printf_i+0xe4>
 8005c98:	881e      	ldrh	r6, [r3, #0]
 8005c9a:	2f6f      	cmp	r7, #111	; 0x6f
 8005c9c:	bf0c      	ite	eq
 8005c9e:	2308      	moveq	r3, #8
 8005ca0:	230a      	movne	r3, #10
 8005ca2:	4851      	ldr	r0, [pc, #324]	; (8005de8 <_printf_i+0x23c>)
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005caa:	6865      	ldr	r5, [r4, #4]
 8005cac:	2d00      	cmp	r5, #0
 8005cae:	bfa8      	it	ge
 8005cb0:	6821      	ldrge	r1, [r4, #0]
 8005cb2:	60a5      	str	r5, [r4, #8]
 8005cb4:	bfa4      	itt	ge
 8005cb6:	f021 0104 	bicge.w	r1, r1, #4
 8005cba:	6021      	strge	r1, [r4, #0]
 8005cbc:	b90e      	cbnz	r6, 8005cc2 <_printf_i+0x116>
 8005cbe:	2d00      	cmp	r5, #0
 8005cc0:	d04b      	beq.n	8005d5a <_printf_i+0x1ae>
 8005cc2:	4615      	mov	r5, r2
 8005cc4:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cc8:	fb03 6711 	mls	r7, r3, r1, r6
 8005ccc:	5dc7      	ldrb	r7, [r0, r7]
 8005cce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cd2:	4637      	mov	r7, r6
 8005cd4:	42bb      	cmp	r3, r7
 8005cd6:	460e      	mov	r6, r1
 8005cd8:	d9f4      	bls.n	8005cc4 <_printf_i+0x118>
 8005cda:	2b08      	cmp	r3, #8
 8005cdc:	d10b      	bne.n	8005cf6 <_printf_i+0x14a>
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	07de      	lsls	r6, r3, #31
 8005ce2:	d508      	bpl.n	8005cf6 <_printf_i+0x14a>
 8005ce4:	6923      	ldr	r3, [r4, #16]
 8005ce6:	6861      	ldr	r1, [r4, #4]
 8005ce8:	4299      	cmp	r1, r3
 8005cea:	bfde      	ittt	le
 8005cec:	2330      	movle	r3, #48	; 0x30
 8005cee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cf2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cf6:	1b52      	subs	r2, r2, r5
 8005cf8:	6122      	str	r2, [r4, #16]
 8005cfa:	464b      	mov	r3, r9
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	4640      	mov	r0, r8
 8005d00:	f8cd a000 	str.w	sl, [sp]
 8005d04:	aa03      	add	r2, sp, #12
 8005d06:	f7ff fedf 	bl	8005ac8 <_printf_common>
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	d14a      	bne.n	8005da4 <_printf_i+0x1f8>
 8005d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d12:	b004      	add	sp, #16
 8005d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	f043 0320 	orr.w	r3, r3, #32
 8005d1e:	6023      	str	r3, [r4, #0]
 8005d20:	2778      	movs	r7, #120	; 0x78
 8005d22:	4832      	ldr	r0, [pc, #200]	; (8005dec <_printf_i+0x240>)
 8005d24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	6829      	ldr	r1, [r5, #0]
 8005d2c:	061f      	lsls	r7, r3, #24
 8005d2e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d32:	d402      	bmi.n	8005d3a <_printf_i+0x18e>
 8005d34:	065f      	lsls	r7, r3, #25
 8005d36:	bf48      	it	mi
 8005d38:	b2b6      	uxthmi	r6, r6
 8005d3a:	07df      	lsls	r7, r3, #31
 8005d3c:	bf48      	it	mi
 8005d3e:	f043 0320 	orrmi.w	r3, r3, #32
 8005d42:	6029      	str	r1, [r5, #0]
 8005d44:	bf48      	it	mi
 8005d46:	6023      	strmi	r3, [r4, #0]
 8005d48:	b91e      	cbnz	r6, 8005d52 <_printf_i+0x1a6>
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	f023 0320 	bic.w	r3, r3, #32
 8005d50:	6023      	str	r3, [r4, #0]
 8005d52:	2310      	movs	r3, #16
 8005d54:	e7a6      	b.n	8005ca4 <_printf_i+0xf8>
 8005d56:	4824      	ldr	r0, [pc, #144]	; (8005de8 <_printf_i+0x23c>)
 8005d58:	e7e4      	b.n	8005d24 <_printf_i+0x178>
 8005d5a:	4615      	mov	r5, r2
 8005d5c:	e7bd      	b.n	8005cda <_printf_i+0x12e>
 8005d5e:	682b      	ldr	r3, [r5, #0]
 8005d60:	6826      	ldr	r6, [r4, #0]
 8005d62:	1d18      	adds	r0, r3, #4
 8005d64:	6961      	ldr	r1, [r4, #20]
 8005d66:	6028      	str	r0, [r5, #0]
 8005d68:	0635      	lsls	r5, r6, #24
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	d501      	bpl.n	8005d72 <_printf_i+0x1c6>
 8005d6e:	6019      	str	r1, [r3, #0]
 8005d70:	e002      	b.n	8005d78 <_printf_i+0x1cc>
 8005d72:	0670      	lsls	r0, r6, #25
 8005d74:	d5fb      	bpl.n	8005d6e <_printf_i+0x1c2>
 8005d76:	8019      	strh	r1, [r3, #0]
 8005d78:	2300      	movs	r3, #0
 8005d7a:	4615      	mov	r5, r2
 8005d7c:	6123      	str	r3, [r4, #16]
 8005d7e:	e7bc      	b.n	8005cfa <_printf_i+0x14e>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	2100      	movs	r1, #0
 8005d84:	1d1a      	adds	r2, r3, #4
 8005d86:	602a      	str	r2, [r5, #0]
 8005d88:	681d      	ldr	r5, [r3, #0]
 8005d8a:	6862      	ldr	r2, [r4, #4]
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	f000 f859 	bl	8005e44 <memchr>
 8005d92:	b108      	cbz	r0, 8005d98 <_printf_i+0x1ec>
 8005d94:	1b40      	subs	r0, r0, r5
 8005d96:	6060      	str	r0, [r4, #4]
 8005d98:	6863      	ldr	r3, [r4, #4]
 8005d9a:	6123      	str	r3, [r4, #16]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005da2:	e7aa      	b.n	8005cfa <_printf_i+0x14e>
 8005da4:	462a      	mov	r2, r5
 8005da6:	4649      	mov	r1, r9
 8005da8:	4640      	mov	r0, r8
 8005daa:	6923      	ldr	r3, [r4, #16]
 8005dac:	47d0      	blx	sl
 8005dae:	3001      	adds	r0, #1
 8005db0:	d0ad      	beq.n	8005d0e <_printf_i+0x162>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	079b      	lsls	r3, r3, #30
 8005db6:	d413      	bmi.n	8005de0 <_printf_i+0x234>
 8005db8:	68e0      	ldr	r0, [r4, #12]
 8005dba:	9b03      	ldr	r3, [sp, #12]
 8005dbc:	4298      	cmp	r0, r3
 8005dbe:	bfb8      	it	lt
 8005dc0:	4618      	movlt	r0, r3
 8005dc2:	e7a6      	b.n	8005d12 <_printf_i+0x166>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	4632      	mov	r2, r6
 8005dc8:	4649      	mov	r1, r9
 8005dca:	4640      	mov	r0, r8
 8005dcc:	47d0      	blx	sl
 8005dce:	3001      	adds	r0, #1
 8005dd0:	d09d      	beq.n	8005d0e <_printf_i+0x162>
 8005dd2:	3501      	adds	r5, #1
 8005dd4:	68e3      	ldr	r3, [r4, #12]
 8005dd6:	9903      	ldr	r1, [sp, #12]
 8005dd8:	1a5b      	subs	r3, r3, r1
 8005dda:	42ab      	cmp	r3, r5
 8005ddc:	dcf2      	bgt.n	8005dc4 <_printf_i+0x218>
 8005dde:	e7eb      	b.n	8005db8 <_printf_i+0x20c>
 8005de0:	2500      	movs	r5, #0
 8005de2:	f104 0619 	add.w	r6, r4, #25
 8005de6:	e7f5      	b.n	8005dd4 <_printf_i+0x228>
 8005de8:	0800609b 	.word	0x0800609b
 8005dec:	080060ac 	.word	0x080060ac

08005df0 <memmove>:
 8005df0:	4288      	cmp	r0, r1
 8005df2:	b510      	push	{r4, lr}
 8005df4:	eb01 0402 	add.w	r4, r1, r2
 8005df8:	d902      	bls.n	8005e00 <memmove+0x10>
 8005dfa:	4284      	cmp	r4, r0
 8005dfc:	4623      	mov	r3, r4
 8005dfe:	d807      	bhi.n	8005e10 <memmove+0x20>
 8005e00:	1e43      	subs	r3, r0, #1
 8005e02:	42a1      	cmp	r1, r4
 8005e04:	d008      	beq.n	8005e18 <memmove+0x28>
 8005e06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e0e:	e7f8      	b.n	8005e02 <memmove+0x12>
 8005e10:	4601      	mov	r1, r0
 8005e12:	4402      	add	r2, r0
 8005e14:	428a      	cmp	r2, r1
 8005e16:	d100      	bne.n	8005e1a <memmove+0x2a>
 8005e18:	bd10      	pop	{r4, pc}
 8005e1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e22:	e7f7      	b.n	8005e14 <memmove+0x24>

08005e24 <_sbrk_r>:
 8005e24:	b538      	push	{r3, r4, r5, lr}
 8005e26:	2300      	movs	r3, #0
 8005e28:	4d05      	ldr	r5, [pc, #20]	; (8005e40 <_sbrk_r+0x1c>)
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	602b      	str	r3, [r5, #0]
 8005e30:	f7fc fb34 	bl	800249c <_sbrk>
 8005e34:	1c43      	adds	r3, r0, #1
 8005e36:	d102      	bne.n	8005e3e <_sbrk_r+0x1a>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	b103      	cbz	r3, 8005e3e <_sbrk_r+0x1a>
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	bd38      	pop	{r3, r4, r5, pc}
 8005e40:	2000031c 	.word	0x2000031c

08005e44 <memchr>:
 8005e44:	4603      	mov	r3, r0
 8005e46:	b510      	push	{r4, lr}
 8005e48:	b2c9      	uxtb	r1, r1
 8005e4a:	4402      	add	r2, r0
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	4618      	mov	r0, r3
 8005e50:	d101      	bne.n	8005e56 <memchr+0x12>
 8005e52:	2000      	movs	r0, #0
 8005e54:	e003      	b.n	8005e5e <memchr+0x1a>
 8005e56:	7804      	ldrb	r4, [r0, #0]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	428c      	cmp	r4, r1
 8005e5c:	d1f6      	bne.n	8005e4c <memchr+0x8>
 8005e5e:	bd10      	pop	{r4, pc}

08005e60 <_realloc_r>:
 8005e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e64:	4680      	mov	r8, r0
 8005e66:	4614      	mov	r4, r2
 8005e68:	460e      	mov	r6, r1
 8005e6a:	b921      	cbnz	r1, 8005e76 <_realloc_r+0x16>
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e72:	f7ff bc45 	b.w	8005700 <_malloc_r>
 8005e76:	b92a      	cbnz	r2, 8005e84 <_realloc_r+0x24>
 8005e78:	f7ff fbda 	bl	8005630 <_free_r>
 8005e7c:	4625      	mov	r5, r4
 8005e7e:	4628      	mov	r0, r5
 8005e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e84:	f000 f81b 	bl	8005ebe <_malloc_usable_size_r>
 8005e88:	4284      	cmp	r4, r0
 8005e8a:	4607      	mov	r7, r0
 8005e8c:	d802      	bhi.n	8005e94 <_realloc_r+0x34>
 8005e8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e92:	d812      	bhi.n	8005eba <_realloc_r+0x5a>
 8005e94:	4621      	mov	r1, r4
 8005e96:	4640      	mov	r0, r8
 8005e98:	f7ff fc32 	bl	8005700 <_malloc_r>
 8005e9c:	4605      	mov	r5, r0
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d0ed      	beq.n	8005e7e <_realloc_r+0x1e>
 8005ea2:	42bc      	cmp	r4, r7
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	4631      	mov	r1, r6
 8005ea8:	bf28      	it	cs
 8005eaa:	463a      	movcs	r2, r7
 8005eac:	f7ff fbb2 	bl	8005614 <memcpy>
 8005eb0:	4631      	mov	r1, r6
 8005eb2:	4640      	mov	r0, r8
 8005eb4:	f7ff fbbc 	bl	8005630 <_free_r>
 8005eb8:	e7e1      	b.n	8005e7e <_realloc_r+0x1e>
 8005eba:	4635      	mov	r5, r6
 8005ebc:	e7df      	b.n	8005e7e <_realloc_r+0x1e>

08005ebe <_malloc_usable_size_r>:
 8005ebe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ec2:	1f18      	subs	r0, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	bfbc      	itt	lt
 8005ec8:	580b      	ldrlt	r3, [r1, r0]
 8005eca:	18c0      	addlt	r0, r0, r3
 8005ecc:	4770      	bx	lr
	...

08005ed0 <_init>:
 8005ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed2:	bf00      	nop
 8005ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed6:	bc08      	pop	{r3}
 8005ed8:	469e      	mov	lr, r3
 8005eda:	4770      	bx	lr

08005edc <_fini>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	bf00      	nop
 8005ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee2:	bc08      	pop	{r3}
 8005ee4:	469e      	mov	lr, r3
 8005ee6:	4770      	bx	lr
