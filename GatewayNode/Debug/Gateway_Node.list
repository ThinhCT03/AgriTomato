
GateWay_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e2c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08005f38  08005f38  00015f38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006110  08006110  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006110  08006110  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006110  08006110  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006110  08006110  00016110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006114  08006114  00016114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000060  08006178  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08006178  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d3c1  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020b6  00000000  00000000  0002d48d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  0002f548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e2  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b2f  00000000  00000000  00030bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fddc  00000000  00000000  00048701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086d5e  00000000  00000000  000584dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a94  00000000  00000000  000df23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000e2cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08005f20 	.word	0x08005f20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08005f20 	.word	0x08005f20

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000938:	b4b0      	push	{r4, r5, r7}
 800093a:	b08f      	sub	sp, #60	; 0x3c
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000940:	f240 13b1 	movw	r3, #433	; 0x1b1
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000946:	2307      	movs	r3, #7
 8000948:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 800094c:	2307      	movs	r3, #7
 800094e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000952:	2301      	movs	r3, #1
 8000954:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8000958:	23ff      	movs	r3, #255	; 0xff
 800095a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 800095e:	2364      	movs	r3, #100	; 0x64
 8000960:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8000964:	2308      	movs	r3, #8
 8000966:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	461d      	mov	r5, r3
 800096c:	f107 040c 	add.w	r4, r7, #12
 8000970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000976:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000978:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800097c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	373c      	adds	r7, #60	; 0x3c
 8000984:	46bd      	mov	sp, r7
 8000986:	bcb0      	pop	{r4, r5, r7}
 8000988:	4770      	bx	lr

0800098a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800098a:	b580      	push	{r7, lr}
 800098c:	b084      	sub	sp, #16
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000994:	2101      	movs	r1, #1
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 f9ff 	bl	8000d9a <LoRa_read>
 800099c:	4603      	mov	r3, r0
 800099e:	73bb      	strb	r3, [r7, #14]
	data = read;
 80009a0:	7bbb      	ldrb	r3, [r7, #14]
 80009a2:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d107      	bne.n	80009ba <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80009aa:	7bbb      	ldrb	r3, [r7, #14]
 80009ac:	f023 0307 	bic.w	r3, r3, #7
 80009b0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
 80009b8:	e03e      	b.n	8000a38 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d10c      	bne.n	80009da <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80009c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009c4:	f023 0307 	bic.w	r3, r3, #7
 80009c8:	b25b      	sxtb	r3, r3
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	b25b      	sxtb	r3, r3
 80009d0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2201      	movs	r2, #1
 80009d6:	61da      	str	r2, [r3, #28]
 80009d8:	e02e      	b.n	8000a38 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	2b03      	cmp	r3, #3
 80009de:	d10c      	bne.n	80009fa <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80009e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009e4:	f023 0307 	bic.w	r3, r3, #7
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	f043 0303 	orr.w	r3, r3, #3
 80009ee:	b25b      	sxtb	r3, r3
 80009f0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2203      	movs	r2, #3
 80009f6:	61da      	str	r2, [r3, #28]
 80009f8:	e01e      	b.n	8000a38 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	2b05      	cmp	r3, #5
 80009fe:	d10c      	bne.n	8000a1a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000a00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a04:	f023 0307 	bic.w	r3, r3, #7
 8000a08:	b25b      	sxtb	r3, r3
 8000a0a:	f043 0305 	orr.w	r3, r3, #5
 8000a0e:	b25b      	sxtb	r3, r3
 8000a10:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2205      	movs	r2, #5
 8000a16:	61da      	str	r2, [r3, #28]
 8000a18:	e00e      	b.n	8000a38 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	2b06      	cmp	r3, #6
 8000a1e:	d10b      	bne.n	8000a38 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000a20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a24:	f023 0307 	bic.w	r3, r3, #7
 8000a28:	b25b      	sxtb	r3, r3
 8000a2a:	f043 0306 	orr.w	r3, r3, #6
 8000a2e:	b25b      	sxtb	r3, r3
 8000a30:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2206      	movs	r2, #6
 8000a36:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f000 f9c5 	bl	8000dce <LoRa_write>
	//HAL_Delay(10);
}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	889b      	ldrh	r3, [r3, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	4619      	mov	r1, r3
 8000a68:	f002 f96c 	bl	8002d44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	6998      	ldr	r0, [r3, #24]
 8000a70:	88fa      	ldrh	r2, [r7, #6]
 8000a72:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a76:	68b9      	ldr	r1, [r7, #8]
 8000a78:	f003 fac4 	bl	8004004 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000a7c:	bf00      	nop
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f003 fec4 	bl	8004810 <HAL_SPI_GetState>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d1f7      	bne.n	8000a7e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	6998      	ldr	r0, [r3, #24]
 8000a92:	8b3a      	ldrh	r2, [r7, #24]
 8000a94:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a98:	6839      	ldr	r1, [r7, #0]
 8000a9a:	f003 fbf7 	bl	800428c <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000a9e:	bf00      	nop
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f003 feb3 	bl	8004810 <HAL_SPI_GetState>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d1f7      	bne.n	8000aa0 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	6818      	ldr	r0, [r3, #0]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	889b      	ldrh	r3, [r3, #4]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4619      	mov	r1, r3
 8000abc:	f002 f942 	bl	8002d44 <HAL_GPIO_WritePin>
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	6818      	ldr	r0, [r3, #0]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	889b      	ldrh	r3, [r3, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f002 f92e 	bl	8002d44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	6998      	ldr	r0, [r3, #24]
 8000aec:	88fa      	ldrh	r2, [r7, #6]
 8000aee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000af2:	68b9      	ldr	r1, [r7, #8]
 8000af4:	f003 fa86 	bl	8004004 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000af8:	bf00      	nop
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f003 fe86 	bl	8004810 <HAL_SPI_GetState>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d1f7      	bne.n	8000afa <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	6998      	ldr	r0, [r3, #24]
 8000b0e:	8b3a      	ldrh	r2, [r7, #24]
 8000b10:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b14:	6839      	ldr	r1, [r7, #0]
 8000b16:	f003 fa75 	bl	8004004 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000b1a:	bf00      	nop
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f003 fe75 	bl	8004810 <HAL_SPI_GetState>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d1f7      	bne.n	8000b1c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	6818      	ldr	r0, [r3, #0]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	889b      	ldrh	r3, [r3, #4]
 8000b34:	2201      	movs	r2, #1
 8000b36:	4619      	mov	r1, r3
 8000b38:	f002 f904 	bl	8002d44 <HAL_GPIO_WritePin>
}
 8000b3c:	bf00      	nop
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000b50:	2126      	movs	r1, #38	; 0x26
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f000 f921 	bl	8000d9a <LoRa_read>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	73bb      	strb	r3, [r7, #14]

	if(value)
 8000b5c:	78fb      	ldrb	r3, [r7, #3]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d004      	beq.n	8000b6c <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000b62:	7bbb      	ldrb	r3, [r7, #14]
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	73fb      	strb	r3, [r7, #15]
 8000b6a:	e003      	b.n	8000b74 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000b6c:	7bbb      	ldrb	r3, [r7, #14]
 8000b6e:	f023 0308 	bic.w	r3, r3, #8
 8000b72:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	461a      	mov	r2, r3
 8000b78:	2126      	movs	r1, #38	; 0x26
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f000 f927 	bl	8000dce <LoRa_write>
	HAL_Delay(10);
 8000b80:	200a      	movs	r0, #10
 8000b82:	f001 fd77 	bl	8002674 <HAL_Delay>
}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b096      	sub	sp, #88	; 0x58
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000b98:	4a17      	ldr	r2, [pc, #92]	; (8000bf8 <LoRa_setAutoLDO+0x68>)
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	2250      	movs	r2, #80	; 0x50
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f004 fd5e 	bl	8005664 <memcpy>

	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bae:	461a      	mov	r2, r3
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	4093      	lsls	r3, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fc1b 	bl	80003f0 <__aeabi_i2d>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	3358      	adds	r3, #88	; 0x58
 8000bc4:	443b      	add	r3, r7
 8000bc6:	3b50      	subs	r3, #80	; 0x50
 8000bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bcc:	f7ff fda4 	bl	8000718 <__aeabi_ddiv>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	4610      	mov	r0, r2
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f7ff fe86 	bl	80008e8 <__aeabi_d2iz>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b10      	cmp	r3, #16
 8000be0:	bfcc      	ite	gt
 8000be2:	2301      	movgt	r3, #1
 8000be4:	2300      	movle	r3, #0
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	4619      	mov	r1, r3
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ffaa 	bl	8000b44 <LoRa_setLowDaraRateOptimization>
}
 8000bf0:	bf00      	nop
 8000bf2:	3758      	adds	r7, #88	; 0x58
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	08005f38 	.word	0x08005f38

08000bfc <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	04db      	lsls	r3, r3, #19
 8000c0a:	115b      	asrs	r3, r3, #5
 8000c0c:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	0c1b      	lsrs	r3, r3, #16
 8000c12:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000c14:	7afb      	ldrb	r3, [r7, #11]
 8000c16:	461a      	mov	r2, r3
 8000c18:	2106      	movs	r1, #6
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 f8d7 	bl	8000dce <LoRa_write>
	HAL_Delay(5);
 8000c20:	2005      	movs	r0, #5
 8000c22:	f001 fd27 	bl	8002674 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000c2c:	7afb      	ldrb	r3, [r7, #11]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	2107      	movs	r1, #7
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f000 f8cb 	bl	8000dce <LoRa_write>
	HAL_Delay(5);
 8000c38:	2005      	movs	r0, #5
 8000c3a:	f001 fd1b 	bl	8002674 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000c42:	7afb      	ldrb	r3, [r7, #11]
 8000c44:	461a      	mov	r2, r3
 8000c46:	2108      	movs	r1, #8
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f000 f8c0 	bl	8000dce <LoRa_write>
	HAL_Delay(5);
 8000c4e:	2005      	movs	r0, #5
 8000c50:	f001 fd10 	bl	8002674 <HAL_Delay>
}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	2b0c      	cmp	r3, #12
 8000c6a:	dd01      	ble.n	8000c70 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	dc01      	bgt.n	8000c7a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000c76:	2307      	movs	r3, #7
 8000c78:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000c7a:	211e      	movs	r1, #30
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f000 f88c 	bl	8000d9a <LoRa_read>
 8000c82:	4603      	mov	r3, r0
 8000c84:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000c86:	200a      	movs	r0, #10
 8000c88:	f001 fcf4 	bl	8002674 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	011b      	lsls	r3, r3, #4
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	4413      	add	r3, r2
 8000c9e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000ca0:	7bbb      	ldrb	r3, [r7, #14]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	211e      	movs	r1, #30
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f000 f891 	bl	8000dce <LoRa_write>
	HAL_Delay(10);
 8000cac:	200a      	movs	r0, #10
 8000cae:	f001 fce1 	bl	8002674 <HAL_Delay>

	LoRa_setAutoLDO(_LoRa);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff ff6c 	bl	8000b90 <LoRa_setAutoLDO>
}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	2109      	movs	r1, #9
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 f87b 	bl	8000dce <LoRa_write>
	HAL_Delay(10);
 8000cd8:	200a      	movs	r0, #10
 8000cda:	f001 fccb 	bl	8002674 <HAL_Delay>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000cf8:	78fb      	ldrb	r3, [r7, #3]
 8000cfa:	2b2c      	cmp	r3, #44	; 0x2c
 8000cfc:	d801      	bhi.n	8000d02 <LoRa_setOCP+0x1a>
		current = 45;
 8000cfe:	232d      	movs	r3, #45	; 0x2d
 8000d00:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000d02:	78fb      	ldrb	r3, [r7, #3]
 8000d04:	2bf0      	cmp	r3, #240	; 0xf0
 8000d06:	d901      	bls.n	8000d0c <LoRa_setOCP+0x24>
		current = 240;
 8000d08:	23f0      	movs	r3, #240	; 0xf0
 8000d0a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8000d0c:	78fb      	ldrb	r3, [r7, #3]
 8000d0e:	2b78      	cmp	r3, #120	; 0x78
 8000d10:	d809      	bhi.n	8000d26 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000d12:	78fb      	ldrb	r3, [r7, #3]
 8000d14:	3b2d      	subs	r3, #45	; 0x2d
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <LoRa_setOCP+0x78>)
 8000d18:	fb82 1203 	smull	r1, r2, r2, r3
 8000d1c:	1052      	asrs	r2, r2, #1
 8000d1e:	17db      	asrs	r3, r3, #31
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	73fb      	strb	r3, [r7, #15]
 8000d24:	e00b      	b.n	8000d3e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000d26:	78fb      	ldrb	r3, [r7, #3]
 8000d28:	2bf0      	cmp	r3, #240	; 0xf0
 8000d2a:	d808      	bhi.n	8000d3e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	331e      	adds	r3, #30
 8000d30:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <LoRa_setOCP+0x78>)
 8000d32:	fb82 1203 	smull	r1, r2, r2, r3
 8000d36:	1092      	asrs	r2, r2, #2
 8000d38:	17db      	asrs	r3, r3, #31
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	3320      	adds	r3, #32
 8000d42:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	461a      	mov	r2, r3
 8000d48:	210b      	movs	r1, #11
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 f83f 	bl	8000dce <LoRa_write>
	HAL_Delay(10);
 8000d50:	200a      	movs	r0, #10
 8000d52:	f001 fc8f 	bl	8002674 <HAL_Delay>
}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	66666667 	.word	0x66666667

08000d64 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000d6c:	211e      	movs	r1, #30
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 f813 	bl	8000d9a <LoRa_read>
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	f043 0307 	orr.w	r3, r3, #7
 8000d7e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000d80:	7bbb      	ldrb	r3, [r7, #14]
 8000d82:	461a      	mov	r2, r3
 8000d84:	211e      	movs	r1, #30
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f821 	bl	8000dce <LoRa_write>
	HAL_Delay(10);
 8000d8c:	200a      	movs	r0, #10
 8000d8e:	f001 fc71 	bl	8002674 <HAL_Delay>
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af02      	add	r7, sp, #8
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	460b      	mov	r3, r1
 8000da4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000da6:	78fb      	ldrb	r3, [r7, #3]
 8000da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000db0:	f107 030f 	add.w	r3, r7, #15
 8000db4:	f107 010e 	add.w	r1, r7, #14
 8000db8:	2201      	movs	r2, #1
 8000dba:	9200      	str	r2, [sp, #0]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff fe44 	bl	8000a4c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af02      	add	r7, sp, #8
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	70fb      	strb	r3, [r7, #3]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000dde:	78fb      	ldrb	r3, [r7, #3]
 8000de0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000de8:	78bb      	ldrb	r3, [r7, #2]
 8000dea:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000dec:	f107 030f 	add.w	r3, r7, #15
 8000df0:	f107 010e 	add.w	r1, r7, #14
 8000df4:	2201      	movs	r2, #1
 8000df6:	9200      	str	r2, [sp, #0]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff fe64 	bl	8000ac8 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	607a      	str	r2, [r7, #4]
 8000e12:	461a      	mov	r2, r3
 8000e14:	460b      	mov	r3, r1
 8000e16:	72fb      	strb	r3, [r7, #11]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8000e1c:	7afb      	ldrb	r3, [r7, #11]
 8000e1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	889b      	ldrh	r3, [r3, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	4619      	mov	r1, r3
 8000e32:	f001 ff87 	bl	8002d44 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6998      	ldr	r0, [r3, #24]
 8000e3a:	f107 0117 	add.w	r1, r7, #23
 8000e3e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e42:	2201      	movs	r2, #1
 8000e44:	f003 f8de 	bl	8004004 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e48:	bf00      	nop
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 fcde 	bl	8004810 <HAL_SPI_GetState>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d1f7      	bne.n	8000e4a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6998      	ldr	r0, [r3, #24]
 8000e5e:	7abb      	ldrb	r3, [r7, #10]
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f003 f8cc 	bl	8004004 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e6c:	bf00      	nop
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 fccc 	bl	8004810 <HAL_SPI_GetState>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d1f7      	bne.n	8000e6e <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	6818      	ldr	r0, [r3, #0]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	889b      	ldrh	r3, [r3, #4]
 8000e86:	2201      	movs	r2, #1
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f001 ff5b 	bl	8002d44 <HAL_GPIO_WritePin>
}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]

	return 1;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b086      	sub	sp, #24
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	60f8      	str	r0, [r7, #12]
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	460b      	mov	r3, r1
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	69db      	ldr	r3, [r3, #28]
 8000ec4:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f7ff fd5e 	bl	800098a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000ece:	210e      	movs	r1, #14
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f7ff ff62 	bl	8000d9a <LoRa_read>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000eda:	7cfb      	ldrb	r3, [r7, #19]
 8000edc:	461a      	mov	r2, r3
 8000ede:	210d      	movs	r1, #13
 8000ee0:	68f8      	ldr	r0, [r7, #12]
 8000ee2:	f7ff ff74 	bl	8000dce <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	2122      	movs	r1, #34	; 0x22
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f7ff ff6e 	bl	8000dce <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f7ff ff85 	bl	8000e08 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000efe:	2103      	movs	r1, #3
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f7ff fd42 	bl	800098a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000f06:	2112      	movs	r1, #18
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f7ff ff46 	bl	8000d9a <LoRa_read>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8000f12:	7cfb      	ldrb	r3, [r7, #19]
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d00a      	beq.n	8000f32 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000f1c:	22ff      	movs	r2, #255	; 0xff
 8000f1e:	2112      	movs	r1, #18
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f7ff ff54 	bl	8000dce <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000f26:	6979      	ldr	r1, [r7, #20]
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f7ff fd2e 	bl	800098a <LoRa_gotoMode>
			return 1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00f      	b.n	8000f52 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	80bb      	strh	r3, [r7, #4]
 8000f38:	88bb      	ldrh	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d105      	bne.n	8000f4a <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8000f3e:	6979      	ldr	r1, [r7, #20]
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f7ff fd22 	bl	800098a <LoRa_gotoMode>
				return 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e003      	b.n	8000f52 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f001 fb92 	bl	8002674 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000f50:	e7d9      	b.n	8000f06 <LoRa_transmit+0x5c>
	}
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000f62:	2105      	movs	r1, #5
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff fd10 	bl	800098a <LoRa_gotoMode>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000f72:	b590      	push	{r4, r7, lr}
 8000f74:	b089      	sub	sp, #36	; 0x24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
 8000f88:	e007      	b.n	8000f9a <LoRa_receive+0x28>
		data[i]=0;
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	4413      	add	r3, r2
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	3301      	adds	r3, #1
 8000f98:	61bb      	str	r3, [r7, #24]
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	dbf3      	blt.n	8000f8a <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f7ff fcf0 	bl	800098a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000faa:	2112      	movs	r1, #18
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f7ff fef4 	bl	8000d9a <LoRa_read>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000fb6:	7cfb      	ldrb	r3, [r7, #19]
 8000fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d02f      	beq.n	8001020 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000fc0:	22ff      	movs	r2, #255	; 0xff
 8000fc2:	2112      	movs	r1, #18
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f7ff ff02 	bl	8000dce <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000fca:	2113      	movs	r1, #19
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f7ff fee4 	bl	8000d9a <LoRa_read>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f7ff fede 	bl	8000d9a <LoRa_read>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000fe2:	7cfb      	ldrb	r3, [r7, #19]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	210d      	movs	r1, #13
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f7ff fef0 	bl	8000dce <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000fee:	7cba      	ldrb	r2, [r7, #18]
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	bf28      	it	cs
 8000ff6:	4613      	movcs	r3, r2
 8000ff8:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	e00b      	b.n	8001018 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	18d4      	adds	r4, r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f7ff fec6 	bl	8000d9a <LoRa_read>
 800100e:	4603      	mov	r3, r0
 8001010:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	7ffb      	ldrb	r3, [r7, #31]
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbef      	blt.n	8001000 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001020:	2105      	movs	r1, #5
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f7ff fcb1 	bl	800098a <LoRa_gotoMode>
    return min;
 8001028:	7ffb      	ldrb	r3, [r7, #31]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd90      	pop	{r4, r7, pc}

08001032 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001032:	b580      	push	{r7, lr}
 8001034:	b084      	sub	sp, #16
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ff2b 	bl	8000e96 <LoRa_isvalid>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 8096 	beq.w	8001174 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001048:	2100      	movs	r1, #0
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff fc9d 	bl	800098a <LoRa_gotoMode>
			HAL_Delay(10);
 8001050:	200a      	movs	r0, #10
 8001052:	f001 fb0f 	bl	8002674 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001056:	2101      	movs	r1, #1
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff fe9e 	bl	8000d9a <LoRa_read>
 800105e:	4603      	mov	r3, r0
 8001060:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001062:	200a      	movs	r0, #10
 8001064:	f001 fb06 	bl	8002674 <HAL_Delay>
			data = read | 0x80;
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800106e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001070:	7bbb      	ldrb	r3, [r7, #14]
 8001072:	461a      	mov	r2, r3
 8001074:	2101      	movs	r1, #1
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fea9 	bl	8000dce <LoRa_write>
			HAL_Delay(100);
 800107c:	2064      	movs	r0, #100	; 0x64
 800107e:	f001 faf9 	bl	8002674 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4619      	mov	r1, r3
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff fdb7 	bl	8000bfc <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001094:	4619      	mov	r1, r3
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fe12 	bl	8000cc0 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80010a2:	4619      	mov	r1, r3
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff fe1f 	bl	8000ce8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80010aa:	2223      	movs	r2, #35	; 0x23
 80010ac:	210c      	movs	r1, #12
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fe8d 	bl	8000dce <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff fe55 	bl	8000d64 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff fdca 	bl	8000c5c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80010c8:	22ff      	movs	r2, #255	; 0xff
 80010ca:	211f      	movs	r1, #31
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff fe7e 	bl	8000dce <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010dc:	011b      	lsls	r3, r3, #4
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	4413      	add	r3, r2
 80010ec:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	461a      	mov	r2, r3
 80010f2:	211d      	movs	r1, #29
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff fe6a 	bl	8000dce <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff fd48 	bl	8000b90 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	b29b      	uxth	r3, r3
 8001108:	b2db      	uxtb	r3, r3
 800110a:	461a      	mov	r2, r3
 800110c:	2120      	movs	r1, #32
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fe5d 	bl	8000dce <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001118:	b2db      	uxtb	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	2121      	movs	r1, #33	; 0x21
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fe55 	bl	8000dce <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001124:	2140      	movs	r1, #64	; 0x40
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff fe37 	bl	8000d9a <LoRa_read>
 800112c:	4603      	mov	r3, r0
 800112e:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001136:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001138:	7bbb      	ldrb	r3, [r7, #14]
 800113a:	461a      	mov	r2, r3
 800113c:	2140      	movs	r1, #64	; 0x40
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff fe45 	bl	8000dce <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001144:	2101      	movs	r1, #1
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fc1f 	bl	800098a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001152:	200a      	movs	r0, #10
 8001154:	f001 fa8e 	bl	8002674 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001158:	2142      	movs	r1, #66	; 0x42
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff fe1d 	bl	8000d9a <LoRa_read>
 8001160:	4603      	mov	r3, r0
 8001162:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	2b12      	cmp	r3, #18
 8001168:	d101      	bne.n	800116e <LoRa_init+0x13c>
				return LORA_OK;
 800116a:	23c8      	movs	r3, #200	; 0xc8
 800116c:	e004      	b.n	8001178 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 800116e:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8001172:	e001      	b.n	8001178 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8001174:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af02      	add	r7, sp, #8
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	f023 030f 	bic.w	r3, r3, #15
 8001190:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f043 030c 	orr.w	r3, r3, #12
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 80011ac:	7bbb      	ldrb	r3, [r7, #14]
 80011ae:	f043 030c 	orr.w	r3, r3, #12
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011c0:	f107 0208 	add.w	r2, r7, #8
 80011c4:	2364      	movs	r3, #100	; 0x64
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2304      	movs	r3, #4
 80011ca:	214e      	movs	r1, #78	; 0x4e
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <lcd_send_cmd+0x5c>)
 80011ce:	f001 ff2d 	bl	800302c <HAL_I2C_Master_Transmit>
}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200000f8 	.word	0x200000f8

080011e0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f023 030f 	bic.w	r3, r3, #15
 80011f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	f043 030d 	orr.w	r3, r3, #13
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	f043 0309 	orr.w	r3, r3, #9
 8001208:	b2db      	uxtb	r3, r3
 800120a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 800120c:	7bbb      	ldrb	r3, [r7, #14]
 800120e:	f043 030d 	orr.w	r3, r3, #13
 8001212:	b2db      	uxtb	r3, r3
 8001214:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 8001216:	7bbb      	ldrb	r3, [r7, #14]
 8001218:	f043 0309 	orr.w	r3, r3, #9
 800121c:	b2db      	uxtb	r3, r3
 800121e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001220:	f107 0208 	add.w	r2, r7, #8
 8001224:	2364      	movs	r3, #100	; 0x64
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2304      	movs	r3, #4
 800122a:	214e      	movs	r1, #78	; 0x4e
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <lcd_send_data+0x5c>)
 800122e:	f001 fefd 	bl	800302c <HAL_I2C_Master_Transmit>
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200000f8 	.word	0x200000f8

08001240 <lcd_clear>:


void lcd_clear(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);  // Lệnh "clear display"
 8001244:	2001      	movs	r0, #1
 8001246:	f7ff ff9b 	bl	8001180 <lcd_send_cmd>
    HAL_Delay(2);        // Delay khoảng 2ms để LCD xử lý
 800124a:	2002      	movs	r0, #2
 800124c:	f001 fa12 	bl	8002674 <HAL_Delay>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}

08001254 <lcd_put_cur>:
//		lcd_send_data (' ');
//	}
//}

void lcd_put_cur(int row, int col)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
    switch (row)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b03      	cmp	r3, #3
 8001262:	d81f      	bhi.n	80012a4 <lcd_put_cur+0x50>
 8001264:	a201      	add	r2, pc, #4	; (adr r2, 800126c <lcd_put_cur+0x18>)
 8001266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126a:	bf00      	nop
 800126c:	0800127d 	.word	0x0800127d
 8001270:	08001287 	.word	0x08001287
 8001274:	08001291 	.word	0x08001291
 8001278:	0800129b 	.word	0x0800129b
    {
        case 0:
            col |= 0x80;  // Dòng 1
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001282:	603b      	str	r3, [r7, #0]
            break;
 8001284:	e00e      	b.n	80012a4 <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;  // Dòng 2
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800128c:	603b      	str	r3, [r7, #0]
            break;
 800128e:	e009      	b.n	80012a4 <lcd_put_cur+0x50>
        case 2:
            col |= 0x94;  // Dòng 3
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	f043 0394 	orr.w	r3, r3, #148	; 0x94
 8001296:	603b      	str	r3, [r7, #0]
            break;
 8001298:	e004      	b.n	80012a4 <lcd_put_cur+0x50>
        case 3:
            col |= 0xD4;  // Dòng 4
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	f043 03d4 	orr.w	r3, r3, #212	; 0xd4
 80012a0:	603b      	str	r3, [r7, #0]
            break;
 80012a2:	bf00      	nop
    }

    lcd_send_cmd (col);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff69 	bl	8001180 <lcd_send_cmd>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop

080012b8 <lcd_init>:


void lcd_init (void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80012bc:	2032      	movs	r0, #50	; 0x32
 80012be:	f001 f9d9 	bl	8002674 <HAL_Delay>
	lcd_send_cmd (0x30);
 80012c2:	2030      	movs	r0, #48	; 0x30
 80012c4:	f7ff ff5c 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80012c8:	2005      	movs	r0, #5
 80012ca:	f001 f9d3 	bl	8002674 <HAL_Delay>
	lcd_send_cmd (0x30);
 80012ce:	2030      	movs	r0, #48	; 0x30
 80012d0:	f7ff ff56 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80012d4:	2001      	movs	r0, #1
 80012d6:	f001 f9cd 	bl	8002674 <HAL_Delay>
	lcd_send_cmd (0x30);
 80012da:	2030      	movs	r0, #48	; 0x30
 80012dc:	f7ff ff50 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(10);
 80012e0:	200a      	movs	r0, #10
 80012e2:	f001 f9c7 	bl	8002674 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80012e6:	2020      	movs	r0, #32
 80012e8:	f7ff ff4a 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(10);
 80012ec:	200a      	movs	r0, #10
 80012ee:	f001 f9c1 	bl	8002674 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80012f2:	2028      	movs	r0, #40	; 0x28
 80012f4:	f7ff ff44 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(1);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f001 f9bb 	bl	8002674 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80012fe:	2008      	movs	r0, #8
 8001300:	f7ff ff3e 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(1);
 8001304:	2001      	movs	r0, #1
 8001306:	f001 f9b5 	bl	8002674 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800130a:	2001      	movs	r0, #1
 800130c:	f7ff ff38 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(1);
 8001310:	2001      	movs	r0, #1
 8001312:	f001 f9af 	bl	8002674 <HAL_Delay>
	HAL_Delay(1);
 8001316:	2001      	movs	r0, #1
 8001318:	f001 f9ac 	bl	8002674 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800131c:	2006      	movs	r0, #6
 800131e:	f7ff ff2f 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(1);
 8001322:	2001      	movs	r0, #1
 8001324:	f001 f9a6 	bl	8002674 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001328:	200c      	movs	r0, #12
 800132a:	f7ff ff29 	bl	8001180 <lcd_send_cmd>
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}

08001332 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800133a:	e006      	b.n	800134a <lcd_send_string+0x18>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff4b 	bl	80011e0 <lcd_send_data>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f4      	bne.n	800133c <lcd_send_string+0xa>
}
 8001352:	bf00      	nop
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800135c:	b5b0      	push	{r4, r5, r7, lr}
 800135e:	b08e      	sub	sp, #56	; 0x38
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001362:	f001 f925 	bl	80025b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001366:	f000 f979 	bl	800165c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800136a:	f000 fa4b 	bl	8001804 <MX_GPIO_Init>
  MX_I2C1_Init();
 800136e:	f000 f9bb 	bl	80016e8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001372:	f000 f9e7 	bl	8001744 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001376:	f000 fa1b 	bl	80017b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800137a:	f7ff ff9d 	bl	80012b8 <lcd_init>
  water_relay = 0; // 0: OFF, 1: ON
 800137e:	4b9e      	ldr	r3, [pc, #632]	; (80015f8 <main+0x29c>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
  light_relay = 0; // 0: OFF, 1: ON
 8001384:	4b9d      	ldr	r3, [pc, #628]	; (80015fc <main+0x2a0>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
  fan_relay = 0; // 0: OFF, 1: ON
 800138a:	4b9d      	ldr	r3, [pc, #628]	; (8001600 <main+0x2a4>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
  relay_state = 0;
 8001390:	4b9c      	ldr	r3, [pc, #624]	; (8001604 <main+0x2a8>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]

//LORA STATUS CONFIG
  myLoRa = newLoRa();
 8001396:	4c9c      	ldr	r4, [pc, #624]	; (8001608 <main+0x2ac>)
 8001398:	463b      	mov	r3, r7
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff facc 	bl	8000938 <newLoRa>
 80013a0:	4625      	mov	r5, r4
 80013a2:	463c      	mov	r4, r7
 80013a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ac:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80013b0:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = NSS_GPIO_Port;
 80013b4:	4b94      	ldr	r3, [pc, #592]	; (8001608 <main+0x2ac>)
 80013b6:	4a95      	ldr	r2, [pc, #596]	; (800160c <main+0x2b0>)
 80013b8:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 80013ba:	4b93      	ldr	r3, [pc, #588]	; (8001608 <main+0x2ac>)
 80013bc:	2201      	movs	r2, #1
 80013be:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 80013c0:	4b91      	ldr	r3, [pc, #580]	; (8001608 <main+0x2ac>)
 80013c2:	4a92      	ldr	r2, [pc, #584]	; (800160c <main+0x2b0>)
 80013c4:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 80013c6:	4b90      	ldr	r3, [pc, #576]	; (8001608 <main+0x2ac>)
 80013c8:	2202      	movs	r2, #2
 80013ca:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 80013cc:	4b8e      	ldr	r3, [pc, #568]	; (8001608 <main+0x2ac>)
 80013ce:	4a8f      	ldr	r2, [pc, #572]	; (800160c <main+0x2b0>)
 80013d0:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 80013d2:	4b8d      	ldr	r3, [pc, #564]	; (8001608 <main+0x2ac>)
 80013d4:	2204      	movs	r2, #4
 80013d6:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 80013d8:	4b8b      	ldr	r3, [pc, #556]	; (8001608 <main+0x2ac>)
 80013da:	4a8d      	ldr	r2, [pc, #564]	; (8001610 <main+0x2b4>)
 80013dc:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 440;             // default = 433 MHz
 80013de:	4b8a      	ldr	r3, [pc, #552]	; (8001608 <main+0x2ac>)
 80013e0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80013e4:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 80013e6:	4b88      	ldr	r3, [pc, #544]	; (8001608 <main+0x2ac>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  myLoRa.bandWidth             = BW_31_25KHz;       // default = BW_125KHz
 80013ee:	4b86      	ldr	r3, [pc, #536]	; (8001608 <main+0x2ac>)
 80013f0:	2204      	movs	r2, #4
 80013f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 80013f6:	4b84      	ldr	r3, [pc, #528]	; (8001608 <main+0x2ac>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 80013fe:	4b82      	ldr	r3, [pc, #520]	; (8001608 <main+0x2ac>)
 8001400:	22ff      	movs	r2, #255	; 0xff
 8001402:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  myLoRa.overCurrentProtection = 130;             // default = 100 mA
 8001406:	4b80      	ldr	r3, [pc, #512]	; (8001608 <main+0x2ac>)
 8001408:	2282      	movs	r2, #130	; 0x82
 800140a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  myLoRa.preamble              = 9;              // default = 8;
 800140e:	4b7e      	ldr	r3, [pc, #504]	; (8001608 <main+0x2ac>)
 8001410:	2209      	movs	r2, #9
 8001412:	851a      	strh	r2, [r3, #40]	; 0x28

  if (LoRa_init(&myLoRa) == LORA_OK){
 8001414:	487c      	ldr	r0, [pc, #496]	; (8001608 <main+0x2ac>)
 8001416:	f7ff fe0c 	bl	8001032 <LoRa_init>
 800141a:	4603      	mov	r3, r0
 800141c:	2bc8      	cmp	r3, #200	; 0xc8
 800141e:	d102      	bne.n	8001426 <main+0xca>
	  LoRa_Status = 1;
 8001420:	4b7c      	ldr	r3, [pc, #496]	; (8001614 <main+0x2b8>)
 8001422:	2201      	movs	r2, #1
 8001424:	801a      	strh	r2, [r3, #0]
  }

  lcd_put_cur(1, 0);
 8001426:	2100      	movs	r1, #0
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff ff13 	bl	8001254 <lcd_put_cur>
  lcd_send_string ("INITIATE NETWORK...");
 800142e:	487a      	ldr	r0, [pc, #488]	; (8001618 <main+0x2bc>)
 8001430:	f7ff ff7f 	bl	8001332 <lcd_send_string>

//CONTINUOUSLY BOARDCAST 0xFF SIGNAL IN 15S TO START INITIATE THE NETWORK
  uint32_t timeout_ms = HAL_GetTick() + 15000;
 8001434:	f001 f914 	bl	8002660 <HAL_GetTick>
 8001438:	4603      	mov	r3, r0
 800143a:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 800143e:	3318      	adds	r3, #24
 8001440:	637b      	str	r3, [r7, #52]	; 0x34
  while (HAL_GetTick() < timeout_ms)
 8001442:	e012      	b.n	800146a <main+0x10e>
  {
	  TxBuffer[0] = 0xFF; // Tín hiệu đồng bộ mạng
 8001444:	4b75      	ldr	r3, [pc, #468]	; (800161c <main+0x2c0>)
 8001446:	22ff      	movs	r2, #255	; 0xff
 8001448:	701a      	strb	r2, [r3, #0]
	  TxBuffer[1] = 0xFF;
 800144a:	4b74      	ldr	r3, [pc, #464]	; (800161c <main+0x2c0>)
 800144c:	22ff      	movs	r2, #255	; 0xff
 800144e:	705a      	strb	r2, [r3, #1]
	  TxBuffer[2] = 0xFF;
 8001450:	4b72      	ldr	r3, [pc, #456]	; (800161c <main+0x2c0>)
 8001452:	22ff      	movs	r2, #255	; 0xff
 8001454:	709a      	strb	r2, [r3, #2]
	  TxBuffer[3] = 0xFF;
 8001456:	4b71      	ldr	r3, [pc, #452]	; (800161c <main+0x2c0>)
 8001458:	22ff      	movs	r2, #255	; 0xff
 800145a:	70da      	strb	r2, [r3, #3]
	  LoRa_transmit(&myLoRa, TxBuffer, 4, 500);
 800145c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001460:	2204      	movs	r2, #4
 8001462:	496e      	ldr	r1, [pc, #440]	; (800161c <main+0x2c0>)
 8001464:	4868      	ldr	r0, [pc, #416]	; (8001608 <main+0x2ac>)
 8001466:	f7ff fd20 	bl	8000eaa <LoRa_transmit>
  while (HAL_GetTick() < timeout_ms)
 800146a:	f001 f8f9 	bl	8002660 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001472:	4293      	cmp	r3, r2
 8001474:	d8e6      	bhi.n	8001444 <main+0xe8>
  }
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET); //DEBUG LED
 8001476:	2201      	movs	r2, #1
 8001478:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800147c:	4868      	ldr	r0, [pc, #416]	; (8001620 <main+0x2c4>)
 800147e:	f001 fc61 	bl	8002d44 <HAL_GPIO_WritePin>

//BOARDCAST PRE-START SIGNAL 0xC0
  TxBuffer[0] = 0xC0; //0xEE
 8001482:	4b66      	ldr	r3, [pc, #408]	; (800161c <main+0x2c0>)
 8001484:	22c0      	movs	r2, #192	; 0xc0
 8001486:	701a      	strb	r2, [r3, #0]
  TxBuffer[1] = 0xEE;
 8001488:	4b64      	ldr	r3, [pc, #400]	; (800161c <main+0x2c0>)
 800148a:	22ee      	movs	r2, #238	; 0xee
 800148c:	705a      	strb	r2, [r3, #1]
  TxBuffer[2] = 0xEE;
 800148e:	4b63      	ldr	r3, [pc, #396]	; (800161c <main+0x2c0>)
 8001490:	22ee      	movs	r2, #238	; 0xee
 8001492:	709a      	strb	r2, [r3, #2]
  TxBuffer[3] = 0xEE;
 8001494:	4b61      	ldr	r3, [pc, #388]	; (800161c <main+0x2c0>)
 8001496:	22ee      	movs	r2, #238	; 0xee
 8001498:	70da      	strb	r2, [r3, #3]
  LoRa_transmit(&myLoRa, TxBuffer, 4, 500);
 800149a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800149e:	2204      	movs	r2, #4
 80014a0:	495e      	ldr	r1, [pc, #376]	; (800161c <main+0x2c0>)
 80014a2:	4859      	ldr	r0, [pc, #356]	; (8001608 <main+0x2ac>)
 80014a4:	f7ff fd01 	bl	8000eaa <LoRa_transmit>

//WAIT UNTIL RECEIVED ALL ACK FROM SENSOR NODES
  LoRa_startReceiving(&myLoRa);
 80014a8:	4857      	ldr	r0, [pc, #348]	; (8001608 <main+0x2ac>)
 80014aa:	f7ff fd56 	bl	8000f5a <LoRa_startReceiving>
//  HAL_Delay(500); //Do we really need this?? gonna commented it to test!
  while ((receivedACK[0] != 0x01) || (receivedACK[1] != 0x02) || (receivedACK[2] != 0x03))
 80014ae:	bf00      	nop
 80014b0:	4b5c      	ldr	r3, [pc, #368]	; (8001624 <main+0x2c8>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d1fb      	bne.n	80014b0 <main+0x154>
 80014b8:	4b5a      	ldr	r3, [pc, #360]	; (8001624 <main+0x2c8>)
 80014ba:	785b      	ldrb	r3, [r3, #1]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d1f7      	bne.n	80014b0 <main+0x154>
 80014c0:	4b58      	ldr	r3, [pc, #352]	; (8001624 <main+0x2c8>)
 80014c2:	789b      	ldrb	r3, [r3, #2]
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d1f3      	bne.n	80014b0 <main+0x154>
  {
	  //wait for ACK
  }

//LCD INDICATE THAT HAVE RECEIVED ALL ACK
  lcd_clear();
 80014c8:	f7ff feba 	bl	8001240 <lcd_clear>
  lcd_put_cur(1, 2);
 80014cc:	2102      	movs	r1, #2
 80014ce:	2001      	movs	r0, #1
 80014d0:	f7ff fec0 	bl	8001254 <lcd_put_cur>
  lcd_send_string ("ALL SENSOR NODES");
 80014d4:	4854      	ldr	r0, [pc, #336]	; (8001628 <main+0x2cc>)
 80014d6:	f7ff ff2c 	bl	8001332 <lcd_send_string>
  lcd_put_cur(2, 3);
 80014da:	2103      	movs	r1, #3
 80014dc:	2002      	movs	r0, #2
 80014de:	f7ff feb9 	bl	8001254 <lcd_put_cur>
  lcd_send_string ("ARE DETECTED!");
 80014e2:	4852      	ldr	r0, [pc, #328]	; (800162c <main+0x2d0>)
 80014e4:	f7ff ff25 	bl	8001332 <lcd_send_string>
  HAL_Delay(3000);
 80014e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80014ec:	f001 f8c2 	bl	8002674 <HAL_Delay>
  lcd_clear();
 80014f0:	f7ff fea6 	bl	8001240 <lcd_clear>
  lcd_put_cur(1, 2);
 80014f4:	2102      	movs	r1, #2
 80014f6:	2001      	movs	r0, #1
 80014f8:	f7ff feac 	bl	8001254 <lcd_put_cur>
  lcd_send_string ("WELCOME USER TO");
 80014fc:	484c      	ldr	r0, [pc, #304]	; (8001630 <main+0x2d4>)
 80014fe:	f7ff ff18 	bl	8001332 <lcd_send_string>
  lcd_put_cur(2, 3);
 8001502:	2103      	movs	r1, #3
 8001504:	2002      	movs	r0, #2
 8001506:	f7ff fea5 	bl	8001254 <lcd_put_cur>
  lcd_send_string (" AGRITOMATO! ");
 800150a:	484a      	ldr	r0, [pc, #296]	; (8001634 <main+0x2d8>)
 800150c:	f7ff ff11 	bl	8001332 <lcd_send_string>
  HAL_Delay(3000);
 8001510:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001514:	f001 f8ae 	bl	8002674 <HAL_Delay>
  lcd_clear();
 8001518:	f7ff fe92 	bl	8001240 <lcd_clear>

//SENDING START SIGNAL 0xB0 TO ENTIRE NETWORK TO SYNCHRONIZE RTC WAKE UP OF DATA SENDIING TIMESLOT
  if ((receivedACK[0] == 0x01) && (receivedACK[1] == 0x02) && (receivedACK[2] == 0x03))
 800151c:	4b41      	ldr	r3, [pc, #260]	; (8001624 <main+0x2c8>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d11d      	bne.n	8001560 <main+0x204>
 8001524:	4b3f      	ldr	r3, [pc, #252]	; (8001624 <main+0x2c8>)
 8001526:	785b      	ldrb	r3, [r3, #1]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d119      	bne.n	8001560 <main+0x204>
 800152c:	4b3d      	ldr	r3, [pc, #244]	; (8001624 <main+0x2c8>)
 800152e:	789b      	ldrb	r3, [r3, #2]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d115      	bne.n	8001560 <main+0x204>
  {
	  TxBuffer[0] = 0xB0; //0xDD
 8001534:	4b39      	ldr	r3, [pc, #228]	; (800161c <main+0x2c0>)
 8001536:	22b0      	movs	r2, #176	; 0xb0
 8001538:	701a      	strb	r2, [r3, #0]
	  TxBuffer[1] = 0xDD;
 800153a:	4b38      	ldr	r3, [pc, #224]	; (800161c <main+0x2c0>)
 800153c:	22dd      	movs	r2, #221	; 0xdd
 800153e:	705a      	strb	r2, [r3, #1]
      TxBuffer[2] = 0xDD;
 8001540:	4b36      	ldr	r3, [pc, #216]	; (800161c <main+0x2c0>)
 8001542:	22dd      	movs	r2, #221	; 0xdd
 8001544:	709a      	strb	r2, [r3, #2]
      TxBuffer[3] = 0xDD;
 8001546:	4b35      	ldr	r3, [pc, #212]	; (800161c <main+0x2c0>)
 8001548:	22dd      	movs	r2, #221	; 0xdd
 800154a:	70da      	strb	r2, [r3, #3]
      LoRa_transmit(&myLoRa, TxBuffer, 4, 500);
 800154c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001550:	2204      	movs	r2, #4
 8001552:	4932      	ldr	r1, [pc, #200]	; (800161c <main+0x2c0>)
 8001554:	482c      	ldr	r0, [pc, #176]	; (8001608 <main+0x2ac>)
 8001556:	f7ff fca8 	bl	8000eaa <LoRa_transmit>
      Start = 0;
 800155a:	4b37      	ldr	r3, [pc, #220]	; (8001638 <main+0x2dc>)
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
  	  {

  	  }

// FINISHED SYNCHRONIZE THE NETWORK --> STEP INTO RECEIVE DATA MODE
  LoRa_startReceiving(&myLoRa);
 8001560:	4829      	ldr	r0, [pc, #164]	; (8001608 <main+0x2ac>)
 8001562:	f7ff fcfa 	bl	8000f5a <LoRa_startReceiving>
  HAL_UART_Receive_IT(&huart1, &ESP_rx_data, 1);
 8001566:	2201      	movs	r2, #1
 8001568:	4934      	ldr	r1, [pc, #208]	; (800163c <main+0x2e0>)
 800156a:	4835      	ldr	r0, [pc, #212]	; (8001640 <main+0x2e4>)
 800156c:	f003 faee 	bl	8004b4c <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#if new_feature_dev == 1

	  if (Data_Sensor_Interrupt == 1)
 8001570:	4b34      	ldr	r3, [pc, #208]	; (8001644 <main+0x2e8>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b01      	cmp	r3, #1
 8001578:	d10c      	bne.n	8001594 <main+0x238>
	  {
		  Received_Data_Handler();
 800157a:	f000 fbc9 	bl	8001d10 <Received_Data_Handler>
		  HAL_UART_Transmit_IT(&huart1, buffer, sizeof(buffer));
 800157e:	220e      	movs	r2, #14
 8001580:	4931      	ldr	r1, [pc, #196]	; (8001648 <main+0x2ec>)
 8001582:	482f      	ldr	r0, [pc, #188]	; (8001640 <main+0x2e4>)
 8001584:	f003 faad 	bl	8004ae2 <HAL_UART_Transmit_IT>
//		  Sendto_ESP_UART(&sensorData);
		  LoRa_startReceiving(&myLoRa);
 8001588:	481f      	ldr	r0, [pc, #124]	; (8001608 <main+0x2ac>)
 800158a:	f7ff fce6 	bl	8000f5a <LoRa_startReceiving>
		  Data_Sensor_Interrupt = 0;
 800158e:	4b2d      	ldr	r3, [pc, #180]	; (8001644 <main+0x2e8>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
	  }
	  LCD_Display(&sensorData);
 8001594:	482d      	ldr	r0, [pc, #180]	; (800164c <main+0x2f0>)
 8001596:	f000 f9df 	bl	8001958 <LCD_Display>
	  switch (control_mode)
 800159a:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <main+0x2f4>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d002      	beq.n	80015a8 <main+0x24c>
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d00b      	beq.n	80015be <main+0x262>
 80015a6:	e026      	b.n	80015f6 <main+0x29a>
	  {
	      case MODE_MANUAL:
	    	  if (manual_interrupt_flag == 1)
 80015a8:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <main+0x2f8>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d11e      	bne.n	80015f0 <main+0x294>
			  {
	    		  change_relay_state();
 80015b2:	f000 fdb9 	bl	8002128 <change_relay_state>
	    		  manual_interrupt_flag = 0;
 80015b6:	4b27      	ldr	r3, [pc, #156]	; (8001654 <main+0x2f8>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
			  }
	          break;
 80015bc:	e018      	b.n	80015f0 <main+0x294>

	      case MODE_AUTOMATE:
	    	  if ((RX_Data_Control[2] == 0x31) && (RX_Data_Control[3] == 0x32))
 80015be:	4b26      	ldr	r3, [pc, #152]	; (8001658 <main+0x2fc>)
 80015c0:	789b      	ldrb	r3, [r3, #2]
 80015c2:	2b31      	cmp	r3, #49	; 0x31
 80015c4:	d116      	bne.n	80015f4 <main+0x298>
 80015c6:	4b24      	ldr	r3, [pc, #144]	; (8001658 <main+0x2fc>)
 80015c8:	78db      	ldrb	r3, [r3, #3]
 80015ca:	2b32      	cmp	r3, #50	; 0x32
 80015cc:	d112      	bne.n	80015f4 <main+0x298>
	    	  {
	    		  LoRa_transmit(&myLoRa, RX_Data_Control, sizeof(RX_Data_Control), 500);
 80015ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015d2:	2210      	movs	r2, #16
 80015d4:	4920      	ldr	r1, [pc, #128]	; (8001658 <main+0x2fc>)
 80015d6:	480c      	ldr	r0, [pc, #48]	; (8001608 <main+0x2ac>)
 80015d8:	f7ff fc67 	bl	8000eaa <LoRa_transmit>
	    		  RX_Data_Control[2] = 0;
 80015dc:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <main+0x2fc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	709a      	strb	r2, [r3, #2]
	    		  RX_Data_Control[3] = 0;
 80015e2:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <main+0x2fc>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	70da      	strb	r2, [r3, #3]
	    		  LoRa_startReceiving(&myLoRa);
 80015e8:	4807      	ldr	r0, [pc, #28]	; (8001608 <main+0x2ac>)
 80015ea:	f7ff fcb6 	bl	8000f5a <LoRa_startReceiving>
	    	  }

	    	  break;
 80015ee:	e001      	b.n	80015f4 <main+0x298>
	          break;
 80015f0:	bf00      	nop
 80015f2:	e7bd      	b.n	8001570 <main+0x214>
	    	  break;
 80015f4:	bf00      	nop
	  if (Data_Sensor_Interrupt == 1)
 80015f6:	e7bb      	b.n	8001570 <main+0x214>
 80015f8:	200000d2 	.word	0x200000d2
 80015fc:	200000d3 	.word	0x200000d3
 8001600:	200000d4 	.word	0x200000d4
 8001604:	200000d5 	.word	0x200000d5
 8001608:	2000007c 	.word	0x2000007c
 800160c:	40010c00 	.word	0x40010c00
 8001610:	2000014c 	.word	0x2000014c
 8001614:	200000a8 	.word	0x200000a8
 8001618:	08005f88 	.word	0x08005f88
 800161c:	200000ac 	.word	0x200000ac
 8001620:	40011000 	.word	0x40011000
 8001624:	200000cc 	.word	0x200000cc
 8001628:	08005f9c 	.word	0x08005f9c
 800162c:	08005fb0 	.word	0x08005fb0
 8001630:	08005fc0 	.word	0x08005fc0
 8001634:	08005fd0 	.word	0x08005fd0
 8001638:	20000000 	.word	0x20000000
 800163c:	200000d0 	.word	0x200000d0
 8001640:	200001a4 	.word	0x200001a4
 8001644:	200000cf 	.word	0x200000cf
 8001648:	200000e8 	.word	0x200000e8
 800164c:	200000d8 	.word	0x200000d8
 8001650:	200000e6 	.word	0x200000e6
 8001654:	200000d1 	.word	0x200000d1
 8001658:	200000bc 	.word	0x200000bc

0800165c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b090      	sub	sp, #64	; 0x40
 8001660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001662:	f107 0318 	add.w	r3, r7, #24
 8001666:	2228      	movs	r2, #40	; 0x28
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f003 ffc6 	bl	80055fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800167e:	2301      	movs	r3, #1
 8001680:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001682:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001686:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800168c:	2301      	movs	r3, #1
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001690:	2302      	movs	r3, #2
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800169a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800169e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a0:	f107 0318 	add.w	r3, r7, #24
 80016a4:	4618      	mov	r0, r3
 80016a6:	f002 f819 	bl	80036dc <HAL_RCC_OscConfig>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016b0:	f000 fdae 	bl	8002210 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b4:	230f      	movs	r3, #15
 80016b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b8:	2302      	movs	r3, #2
 80016ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2102      	movs	r1, #2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 fa86 	bl	8003be0 <HAL_RCC_ClockConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016da:	f000 fd99 	bl	8002210 <Error_Handler>
  }
}
 80016de:	bf00      	nop
 80016e0:	3740      	adds	r7, #64	; 0x40
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <MX_I2C1_Init+0x50>)
 80016ee:	4a13      	ldr	r2, [pc, #76]	; (800173c <MX_I2C1_Init+0x54>)
 80016f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_I2C1_Init+0x50>)
 80016f4:	4a12      	ldr	r2, [pc, #72]	; (8001740 <MX_I2C1_Init+0x58>)
 80016f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_I2C1_Init+0x50>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_I2C1_Init+0x50>)
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_I2C1_Init+0x50>)
 8001706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800170a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <MX_I2C1_Init+0x50>)
 800170e:	2200      	movs	r2, #0
 8001710:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_I2C1_Init+0x50>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <MX_I2C1_Init+0x50>)
 800171a:	2200      	movs	r2, #0
 800171c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_I2C1_Init+0x50>)
 8001720:	2200      	movs	r2, #0
 8001722:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001724:	4804      	ldr	r0, [pc, #16]	; (8001738 <MX_I2C1_Init+0x50>)
 8001726:	f001 fb3d 	bl	8002da4 <HAL_I2C_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001730:	f000 fd6e 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200000f8 	.word	0x200000f8
 800173c:	40005400 	.word	0x40005400
 8001740:	00061a80 	.word	0x00061a80

08001744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_SPI1_Init+0x64>)
 800174a:	4a18      	ldr	r2, [pc, #96]	; (80017ac <MX_SPI1_Init+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <MX_SPI1_Init+0x64>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_SPI1_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001774:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001778:	2210      	movs	r2, #16
 800177a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <MX_SPI1_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001784:	2200      	movs	r2, #0
 8001786:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <MX_SPI1_Init+0x64>)
 800178a:	2200      	movs	r2, #0
 800178c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001790:	220a      	movs	r2, #10
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001796:	f002 fbb1 	bl	8003efc <HAL_SPI_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017a0:	f000 fd36 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	2000014c 	.word	0x2000014c
 80017ac:	40013000 	.word	0x40013000

080017b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_USART1_UART_Init+0x4c>)
 80017b6:	4a12      	ldr	r2, [pc, #72]	; (8001800 <MX_USART1_UART_Init+0x50>)
 80017b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <MX_USART1_UART_Init+0x4c>)
 80017bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_USART1_UART_Init+0x4c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_USART1_UART_Init+0x4c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <MX_USART1_UART_Init+0x4c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_USART1_UART_Init+0x4c>)
 80017d6:	220c      	movs	r2, #12
 80017d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <MX_USART1_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_USART1_UART_Init+0x4c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_USART1_UART_Init+0x4c>)
 80017e8:	f003 f92b 	bl	8004a42 <HAL_UART_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017f2:	f000 fd0d 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200001a4 	.word	0x200001a4
 8001800:	40013800 	.word	0x40013800

08001804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001818:	4b4a      	ldr	r3, [pc, #296]	; (8001944 <MX_GPIO_Init+0x140>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a49      	ldr	r2, [pc, #292]	; (8001944 <MX_GPIO_Init+0x140>)
 800181e:	f043 0310 	orr.w	r3, r3, #16
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b47      	ldr	r3, [pc, #284]	; (8001944 <MX_GPIO_Init+0x140>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001830:	4b44      	ldr	r3, [pc, #272]	; (8001944 <MX_GPIO_Init+0x140>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	4a43      	ldr	r2, [pc, #268]	; (8001944 <MX_GPIO_Init+0x140>)
 8001836:	f043 0320 	orr.w	r3, r3, #32
 800183a:	6193      	str	r3, [r2, #24]
 800183c:	4b41      	ldr	r3, [pc, #260]	; (8001944 <MX_GPIO_Init+0x140>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f003 0320 	and.w	r3, r3, #32
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001848:	4b3e      	ldr	r3, [pc, #248]	; (8001944 <MX_GPIO_Init+0x140>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a3d      	ldr	r2, [pc, #244]	; (8001944 <MX_GPIO_Init+0x140>)
 800184e:	f043 0304 	orr.w	r3, r3, #4
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	4b3b      	ldr	r3, [pc, #236]	; (8001944 <MX_GPIO_Init+0x140>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001860:	4b38      	ldr	r3, [pc, #224]	; (8001944 <MX_GPIO_Init+0x140>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a37      	ldr	r2, [pc, #220]	; (8001944 <MX_GPIO_Init+0x140>)
 8001866:	f043 0308 	orr.w	r3, r3, #8
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b35      	ldr	r3, [pc, #212]	; (8001944 <MX_GPIO_Init+0x140>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800187e:	4832      	ldr	r0, [pc, #200]	; (8001948 <MX_GPIO_Init+0x144>)
 8001880:	f001 fa60 	bl	8002d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8001884:	2201      	movs	r2, #1
 8001886:	2103      	movs	r1, #3
 8001888:	4830      	ldr	r0, [pc, #192]	; (800194c <MX_GPIO_Init+0x148>)
 800188a:	f001 fa5b 	bl	8002d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800188e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001894:	2301      	movs	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2302      	movs	r3, #2
 800189e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	4619      	mov	r1, r3
 80018a6:	4828      	ldr	r0, [pc, #160]	; (8001948 <MX_GPIO_Init+0x144>)
 80018a8:	f001 f8c8 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 80018ac:	2303      	movs	r3, #3
 80018ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b0:	2301      	movs	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	4619      	mov	r1, r3
 80018c2:	4822      	ldr	r0, [pc, #136]	; (800194c <MX_GPIO_Init+0x148>)
 80018c4:	f001 f8ba 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80018c8:	2304      	movs	r3, #4
 80018ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018cc:	4b20      	ldr	r3, [pc, #128]	; (8001950 <MX_GPIO_Init+0x14c>)
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f107 0310 	add.w	r3, r7, #16
 80018d8:	4619      	mov	r1, r3
 80018da:	481c      	ldr	r0, [pc, #112]	; (800194c <MX_GPIO_Init+0x148>)
 80018dc:	f001 f8ae 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : Fan_SW_Pin Next_State_Pin Prev_State_Pin Manual_Pin
                           Light_SW_Pin Water_pump_Pin */
  GPIO_InitStruct.Pin = Fan_SW_Pin|Next_State_Pin|Prev_State_Pin|Manual_Pin
 80018e0:	f24f 0318 	movw	r3, #61464	; 0xf018
 80018e4:	613b      	str	r3, [r7, #16]
                          |Light_SW_Pin|Water_pump_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018e6:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <MX_GPIO_Init+0x150>)
 80018e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ee:	f107 0310 	add.w	r3, r7, #16
 80018f2:	4619      	mov	r1, r3
 80018f4:	4815      	ldr	r0, [pc, #84]	; (800194c <MX_GPIO_Init+0x148>)
 80018f6:	f001 f8a1 	bl	8002a3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	2008      	movs	r0, #8
 8001900:	f000 ffb3 	bl	800286a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001904:	2008      	movs	r0, #8
 8001906:	f000 ffcc 	bl	80028a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	2009      	movs	r0, #9
 8001910:	f000 ffab 	bl	800286a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001914:	2009      	movs	r0, #9
 8001916:	f000 ffc4 	bl	80028a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	200a      	movs	r0, #10
 8001920:	f000 ffa3 	bl	800286a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001924:	200a      	movs	r0, #10
 8001926:	f000 ffbc 	bl	80028a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	2028      	movs	r0, #40	; 0x28
 8001930:	f000 ff9b 	bl	800286a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001934:	2028      	movs	r0, #40	; 0x28
 8001936:	f000 ffb4 	bl	80028a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800193a:	bf00      	nop
 800193c:	3720      	adds	r7, #32
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000
 8001948:	40011000 	.word	0x40011000
 800194c:	40010c00 	.word	0x40010c00
 8001950:	10110000 	.word	0x10110000
 8001954:	10210000 	.word	0x10210000

08001958 <LCD_Display>:

/* USER CODE BEGIN 4 */

//LCD DISPLAY FUNCTION
void LCD_Display(SensorData_t *sensorData)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
    if (Next_State_Flag)
 8001960:	4bc0      	ldr	r3, [pc, #768]	; (8001c64 <LCD_Display+0x30c>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d013      	beq.n	8001992 <LCD_Display+0x3a>
    {
        current_display_screen = (current_display_screen + 1) % SCREEN_TOTAL;
 800196a:	4bbf      	ldr	r3, [pc, #764]	; (8001c68 <LCD_Display+0x310>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	4bbe      	ldr	r3, [pc, #760]	; (8001c6c <LCD_Display+0x314>)
 8001972:	fb83 3102 	smull	r3, r1, r3, r2
 8001976:	17d3      	asrs	r3, r2, #31
 8001978:	1ac9      	subs	r1, r1, r3
 800197a:	460b      	mov	r3, r1
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	440b      	add	r3, r1
 8001980:	1ad1      	subs	r1, r2, r3
 8001982:	b2ca      	uxtb	r2, r1
 8001984:	4bb8      	ldr	r3, [pc, #736]	; (8001c68 <LCD_Display+0x310>)
 8001986:	701a      	strb	r2, [r3, #0]
        Next_State_Flag = 0;
 8001988:	4bb6      	ldr	r3, [pc, #728]	; (8001c64 <LCD_Display+0x30c>)
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
        lcd_clear();
 800198e:	f7ff fc57 	bl	8001240 <lcd_clear>
    }
    if (Prev_State_Flag)
 8001992:	4bb7      	ldr	r3, [pc, #732]	; (8001c70 <LCD_Display+0x318>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	d013      	beq.n	80019c4 <LCD_Display+0x6c>
    {
        current_display_screen = (current_display_screen + SCREEN_TOTAL - 1) % SCREEN_TOTAL;
 800199c:	4bb2      	ldr	r3, [pc, #712]	; (8001c68 <LCD_Display+0x310>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	1c9a      	adds	r2, r3, #2
 80019a2:	4bb2      	ldr	r3, [pc, #712]	; (8001c6c <LCD_Display+0x314>)
 80019a4:	fb83 3102 	smull	r3, r1, r3, r2
 80019a8:	17d3      	asrs	r3, r2, #31
 80019aa:	1ac9      	subs	r1, r1, r3
 80019ac:	460b      	mov	r3, r1
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	440b      	add	r3, r1
 80019b2:	1ad1      	subs	r1, r2, r3
 80019b4:	b2ca      	uxtb	r2, r1
 80019b6:	4bac      	ldr	r3, [pc, #688]	; (8001c68 <LCD_Display+0x310>)
 80019b8:	701a      	strb	r2, [r3, #0]
        Prev_State_Flag = 0;
 80019ba:	4bad      	ldr	r3, [pc, #692]	; (8001c70 <LCD_Display+0x318>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
        lcd_clear();
 80019c0:	f7ff fc3e 	bl	8001240 <lcd_clear>
    }
    char buffer[20];
    switch (current_display_screen)
 80019c4:	4ba8      	ldr	r3, [pc, #672]	; (8001c68 <LCD_Display+0x310>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	f000 8138 	beq.w	8001c3e <LCD_Display+0x2e6>
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	f300 8191 	bgt.w	8001cf6 <LCD_Display+0x39e>
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <LCD_Display+0x88>
 80019d8:	2b01      	cmp	r3, #1
 80019da:	f000 80e3 	beq.w	8001ba4 <LCD_Display+0x24c>
                }
                break;

             default:

                break;
 80019de:	e18a      	b.n	8001cf6 <LCD_Display+0x39e>
                lcd_put_cur(0, 0);
 80019e0:	2100      	movs	r1, #0
 80019e2:	2000      	movs	r0, #0
 80019e4:	f7ff fc36 	bl	8001254 <lcd_put_cur>
                sprintf(buffer, "ID:0x%X", sensorData->Check_ID);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	49a0      	ldr	r1, [pc, #640]	; (8001c74 <LCD_Display+0x31c>)
 80019f4:	4618      	mov	r0, r3
 80019f6:	f003 fde1 	bl	80055bc <siprintf>
                lcd_send_string(buffer);
 80019fa:	f107 030c 	add.w	r3, r7, #12
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fc97 	bl	8001332 <lcd_send_string>
                lcd_put_cur(2, 9);
 8001a04:	2109      	movs	r1, #9
 8001a06:	2002      	movs	r0, #2
 8001a08:	f7ff fc24 	bl	8001254 <lcd_put_cur>
                sprintf(buffer, "Mois:%d.%d%%", sensorData->soil_Moisture / 10, sensorData->soil_Moisture % 10);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	899b      	ldrh	r3, [r3, #12]
 8001a10:	4a99      	ldr	r2, [pc, #612]	; (8001c78 <LCD_Display+0x320>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	08db      	lsrs	r3, r3, #3
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	461c      	mov	r4, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	899a      	ldrh	r2, [r3, #12]
 8001a20:	4b95      	ldr	r3, [pc, #596]	; (8001c78 <LCD_Display+0x320>)
 8001a22:	fba3 1302 	umull	r1, r3, r3, r2
 8001a26:	08d9      	lsrs	r1, r3, #3
 8001a28:	460b      	mov	r3, r1
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	f107 000c 	add.w	r0, r7, #12
 8001a38:	4622      	mov	r2, r4
 8001a3a:	4990      	ldr	r1, [pc, #576]	; (8001c7c <LCD_Display+0x324>)
 8001a3c:	f003 fdbe 	bl	80055bc <siprintf>
                lcd_send_string(buffer);
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fc74 	bl	8001332 <lcd_send_string>
                lcd_put_cur(1, 0);
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f7ff fc01 	bl	8001254 <lcd_put_cur>
                sprintf(buffer, "Temp:%d.%dC", sensorData->Temperature / 10, sensorData->Temperature % 10);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	889b      	ldrh	r3, [r3, #4]
 8001a56:	4a88      	ldr	r2, [pc, #544]	; (8001c78 <LCD_Display+0x320>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	08db      	lsrs	r3, r3, #3
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	461c      	mov	r4, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	889a      	ldrh	r2, [r3, #4]
 8001a66:	4b84      	ldr	r3, [pc, #528]	; (8001c78 <LCD_Display+0x320>)
 8001a68:	fba3 1302 	umull	r1, r3, r3, r2
 8001a6c:	08d9      	lsrs	r1, r3, #3
 8001a6e:	460b      	mov	r3, r1
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	440b      	add	r3, r1
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	f107 000c 	add.w	r0, r7, #12
 8001a7e:	4622      	mov	r2, r4
 8001a80:	497f      	ldr	r1, [pc, #508]	; (8001c80 <LCD_Display+0x328>)
 8001a82:	f003 fd9b 	bl	80055bc <siprintf>
                lcd_send_string(buffer);
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fc51 	bl	8001332 <lcd_send_string>
                lcd_put_cur(2, 0);
 8001a90:	2100      	movs	r1, #0
 8001a92:	2002      	movs	r0, #2
 8001a94:	f7ff fbde 	bl	8001254 <lcd_put_cur>
                lcd_send_string("         ");
 8001a98:	487a      	ldr	r0, [pc, #488]	; (8001c84 <LCD_Display+0x32c>)
 8001a9a:	f7ff fc4a 	bl	8001332 <lcd_send_string>
                lcd_put_cur(2, 0);
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	2002      	movs	r0, #2
 8001aa2:	f7ff fbd7 	bl	8001254 <lcd_put_cur>
                sprintf(buffer, "Lux:%d.%d", sensorData->LUX / 10, sensorData->LUX % 10);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	88db      	ldrh	r3, [r3, #6]
 8001aaa:	4a73      	ldr	r2, [pc, #460]	; (8001c78 <LCD_Display+0x320>)
 8001aac:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab0:	08db      	lsrs	r3, r3, #3
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	461c      	mov	r4, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	88da      	ldrh	r2, [r3, #6]
 8001aba:	4b6f      	ldr	r3, [pc, #444]	; (8001c78 <LCD_Display+0x320>)
 8001abc:	fba3 1302 	umull	r1, r3, r3, r2
 8001ac0:	08d9      	lsrs	r1, r3, #3
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	f107 000c 	add.w	r0, r7, #12
 8001ad2:	4622      	mov	r2, r4
 8001ad4:	496c      	ldr	r1, [pc, #432]	; (8001c88 <LCD_Display+0x330>)
 8001ad6:	f003 fd71 	bl	80055bc <siprintf>
                lcd_send_string(buffer);
 8001ada:	f107 030c 	add.w	r3, r7, #12
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fc27 	bl	8001332 <lcd_send_string>
                lcd_put_cur(1, 11);
 8001ae4:	210b      	movs	r1, #11
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f7ff fbb4 	bl	8001254 <lcd_put_cur>
                sprintf(buffer, "Hum:%d.%d%%", sensorData->Humidity / 10, sensorData->Humidity % 10);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	885b      	ldrh	r3, [r3, #2]
 8001af0:	4a61      	ldr	r2, [pc, #388]	; (8001c78 <LCD_Display+0x320>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	08db      	lsrs	r3, r3, #3
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	461c      	mov	r4, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	885a      	ldrh	r2, [r3, #2]
 8001b00:	4b5d      	ldr	r3, [pc, #372]	; (8001c78 <LCD_Display+0x320>)
 8001b02:	fba3 1302 	umull	r1, r3, r3, r2
 8001b06:	08d9      	lsrs	r1, r3, #3
 8001b08:	460b      	mov	r3, r1
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	f107 000c 	add.w	r0, r7, #12
 8001b18:	4622      	mov	r2, r4
 8001b1a:	495c      	ldr	r1, [pc, #368]	; (8001c8c <LCD_Display+0x334>)
 8001b1c:	f003 fd4e 	bl	80055bc <siprintf>
                lcd_send_string(buffer);
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fc04 	bl	8001332 <lcd_send_string>
                lcd_put_cur(3, 0);
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f7ff fb91 	bl	8001254 <lcd_put_cur>
                lcd_send_string("         ");
 8001b32:	4854      	ldr	r0, [pc, #336]	; (8001c84 <LCD_Display+0x32c>)
 8001b34:	f7ff fbfd 	bl	8001332 <lcd_send_string>
                lcd_put_cur(3, 0);
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2003      	movs	r0, #3
 8001b3c:	f7ff fb8a 	bl	8001254 <lcd_put_cur>
                sprintf(buffer, "MQ:%d", sensorData->Data_MQ135);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	891b      	ldrh	r3, [r3, #8]
 8001b44:	461a      	mov	r2, r3
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	4951      	ldr	r1, [pc, #324]	; (8001c90 <LCD_Display+0x338>)
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f003 fd35 	bl	80055bc <siprintf>
                lcd_send_string(buffer);
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fbeb 	bl	8001332 <lcd_send_string>
                lcd_put_cur(3, 8);
 8001b5c:	2108      	movs	r1, #8
 8001b5e:	2003      	movs	r0, #3
 8001b60:	f7ff fb78 	bl	8001254 <lcd_put_cur>
                sprintf(buffer, "Soil:%d.%dC", sensorData->soil_Temp / 10, sensorData->soil_Temp % 10);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	895b      	ldrh	r3, [r3, #10]
 8001b68:	4a43      	ldr	r2, [pc, #268]	; (8001c78 <LCD_Display+0x320>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	08db      	lsrs	r3, r3, #3
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	461c      	mov	r4, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	895a      	ldrh	r2, [r3, #10]
 8001b78:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <LCD_Display+0x320>)
 8001b7a:	fba3 1302 	umull	r1, r3, r3, r2
 8001b7e:	08d9      	lsrs	r1, r3, #3
 8001b80:	460b      	mov	r3, r1
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	f107 000c 	add.w	r0, r7, #12
 8001b90:	4622      	mov	r2, r4
 8001b92:	4940      	ldr	r1, [pc, #256]	; (8001c94 <LCD_Display+0x33c>)
 8001b94:	f003 fd12 	bl	80055bc <siprintf>
                lcd_send_string(buffer);
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fbc8 	bl	8001332 <lcd_send_string>
                break;
 8001ba2:	e0a9      	b.n	8001cf8 <LCD_Display+0x3a0>
                lcd_put_cur(0, 3);
 8001ba4:	2103      	movs	r1, #3
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f7ff fb54 	bl	8001254 <lcd_put_cur>
                lcd_send_string("RELAY STATUS");
 8001bac:	483a      	ldr	r0, [pc, #232]	; (8001c98 <LCD_Display+0x340>)
 8001bae:	f7ff fbc0 	bl	8001332 <lcd_send_string>
                lcd_put_cur(1, 0);
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f7ff fb4d 	bl	8001254 <lcd_put_cur>
                sprintf(buffer, "WATER: %s", water_relay ? "ON " : "OFF");
 8001bba:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <LCD_Display+0x344>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <LCD_Display+0x270>
 8001bc4:	4a36      	ldr	r2, [pc, #216]	; (8001ca0 <LCD_Display+0x348>)
 8001bc6:	e000      	b.n	8001bca <LCD_Display+0x272>
 8001bc8:	4a36      	ldr	r2, [pc, #216]	; (8001ca4 <LCD_Display+0x34c>)
 8001bca:	f107 030c 	add.w	r3, r7, #12
 8001bce:	4936      	ldr	r1, [pc, #216]	; (8001ca8 <LCD_Display+0x350>)
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f003 fcf3 	bl	80055bc <siprintf>
                lcd_send_string(buffer);
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fba9 	bl	8001332 <lcd_send_string>
                lcd_put_cur(2, 0);
 8001be0:	2100      	movs	r1, #0
 8001be2:	2002      	movs	r0, #2
 8001be4:	f7ff fb36 	bl	8001254 <lcd_put_cur>
                sprintf(buffer, "FAN  : %s", fan_relay ? "ON " : "OFF");
 8001be8:	4b30      	ldr	r3, [pc, #192]	; (8001cac <LCD_Display+0x354>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <LCD_Display+0x29e>
 8001bf2:	4a2b      	ldr	r2, [pc, #172]	; (8001ca0 <LCD_Display+0x348>)
 8001bf4:	e000      	b.n	8001bf8 <LCD_Display+0x2a0>
 8001bf6:	4a2b      	ldr	r2, [pc, #172]	; (8001ca4 <LCD_Display+0x34c>)
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	492c      	ldr	r1, [pc, #176]	; (8001cb0 <LCD_Display+0x358>)
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 fcdc 	bl	80055bc <siprintf>
                lcd_send_string(buffer);
 8001c04:	f107 030c 	add.w	r3, r7, #12
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fb92 	bl	8001332 <lcd_send_string>
                lcd_put_cur(3, 0);
 8001c0e:	2100      	movs	r1, #0
 8001c10:	2003      	movs	r0, #3
 8001c12:	f7ff fb1f 	bl	8001254 <lcd_put_cur>
                sprintf(buffer, "LIGHT: %s", light_relay ? "ON " : "OFF");
 8001c16:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <LCD_Display+0x35c>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <LCD_Display+0x2cc>
 8001c20:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <LCD_Display+0x348>)
 8001c22:	e000      	b.n	8001c26 <LCD_Display+0x2ce>
 8001c24:	4a1f      	ldr	r2, [pc, #124]	; (8001ca4 <LCD_Display+0x34c>)
 8001c26:	f107 030c 	add.w	r3, r7, #12
 8001c2a:	4923      	ldr	r1, [pc, #140]	; (8001cb8 <LCD_Display+0x360>)
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f003 fcc5 	bl	80055bc <siprintf>
                lcd_send_string(buffer);
 8001c32:	f107 030c 	add.w	r3, r7, #12
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fb7b 	bl	8001332 <lcd_send_string>
                break;
 8001c3c:	e05c      	b.n	8001cf8 <LCD_Display+0x3a0>
                if (control_mode == MODE_MANUAL)
 8001c3e:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <LCD_Display+0x364>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d140      	bne.n	8001cc8 <LCD_Display+0x370>
                    lcd_put_cur(1, 3);
 8001c46:	2103      	movs	r1, #3
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f7ff fb03 	bl	8001254 <lcd_put_cur>
                    lcd_send_string("CURRENT MODE:");
 8001c4e:	481c      	ldr	r0, [pc, #112]	; (8001cc0 <LCD_Display+0x368>)
 8001c50:	f7ff fb6f 	bl	8001332 <lcd_send_string>
                    lcd_put_cur(2, 3);
 8001c54:	2103      	movs	r1, #3
 8001c56:	2002      	movs	r0, #2
 8001c58:	f7ff fafc 	bl	8001254 <lcd_put_cur>
                    lcd_send_string("MANUAL MODE  ");
 8001c5c:	4819      	ldr	r0, [pc, #100]	; (8001cc4 <LCD_Display+0x36c>)
 8001c5e:	f7ff fb68 	bl	8001332 <lcd_send_string>
                break;
 8001c62:	e049      	b.n	8001cf8 <LCD_Display+0x3a0>
 8001c64:	200000d6 	.word	0x200000d6
 8001c68:	200000e7 	.word	0x200000e7
 8001c6c:	55555556 	.word	0x55555556
 8001c70:	200000d7 	.word	0x200000d7
 8001c74:	08005fe0 	.word	0x08005fe0
 8001c78:	cccccccd 	.word	0xcccccccd
 8001c7c:	08005fe8 	.word	0x08005fe8
 8001c80:	08005ff8 	.word	0x08005ff8
 8001c84:	08006004 	.word	0x08006004
 8001c88:	08006010 	.word	0x08006010
 8001c8c:	0800601c 	.word	0x0800601c
 8001c90:	08006028 	.word	0x08006028
 8001c94:	08006030 	.word	0x08006030
 8001c98:	0800603c 	.word	0x0800603c
 8001c9c:	200000d2 	.word	0x200000d2
 8001ca0:	0800604c 	.word	0x0800604c
 8001ca4:	08006050 	.word	0x08006050
 8001ca8:	08006054 	.word	0x08006054
 8001cac:	200000d4 	.word	0x200000d4
 8001cb0:	08006060 	.word	0x08006060
 8001cb4:	200000d3 	.word	0x200000d3
 8001cb8:	0800606c 	.word	0x0800606c
 8001cbc:	200000e6 	.word	0x200000e6
 8001cc0:	08006078 	.word	0x08006078
 8001cc4:	08006088 	.word	0x08006088
                else if (control_mode == MODE_AUTOMATE)
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <LCD_Display+0x3a8>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d10e      	bne.n	8001cee <LCD_Display+0x396>
                    lcd_put_cur(1, 3);
 8001cd0:	2103      	movs	r1, #3
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f7ff fabe 	bl	8001254 <lcd_put_cur>
                    lcd_send_string("CURRENT MODE:");
 8001cd8:	480a      	ldr	r0, [pc, #40]	; (8001d04 <LCD_Display+0x3ac>)
 8001cda:	f7ff fb2a 	bl	8001332 <lcd_send_string>
                    lcd_put_cur(2, 3);
 8001cde:	2103      	movs	r1, #3
 8001ce0:	2002      	movs	r0, #2
 8001ce2:	f7ff fab7 	bl	8001254 <lcd_put_cur>
                    lcd_send_string("AUTOMATE MODE");
 8001ce6:	4808      	ldr	r0, [pc, #32]	; (8001d08 <LCD_Display+0x3b0>)
 8001ce8:	f7ff fb23 	bl	8001332 <lcd_send_string>
                break;
 8001cec:	e004      	b.n	8001cf8 <LCD_Display+0x3a0>
                    lcd_send_string("UNKNOWN");
 8001cee:	4807      	ldr	r0, [pc, #28]	; (8001d0c <LCD_Display+0x3b4>)
 8001cf0:	f7ff fb1f 	bl	8001332 <lcd_send_string>
                break;
 8001cf4:	e000      	b.n	8001cf8 <LCD_Display+0x3a0>
                break;
 8001cf6:	bf00      	nop
        }
}
 8001cf8:	bf00      	nop
 8001cfa:	3724      	adds	r7, #36	; 0x24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd90      	pop	{r4, r7, pc}
 8001d00:	200000e6 	.word	0x200000e6
 8001d04:	08006078 	.word	0x08006078
 8001d08:	08006098 	.word	0x08006098
 8001d0c:	080060a8 	.word	0x080060a8

08001d10 <Received_Data_Handler>:


void Received_Data_Handler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
	if(Received_Data[0] == 0xA1)
 8001d16:	4b7d      	ldr	r3, [pc, #500]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2ba1      	cmp	r3, #161	; 0xa1
 8001d1c:	d174      	bne.n	8001e08 <Received_Data_Handler+0xf8>
	{
		sensorData.Check_ID    = Received_Data[0];
 8001d1e:	4b7b      	ldr	r3, [pc, #492]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001d20:	781a      	ldrb	r2, [r3, #0]
 8001d22:	4b7b      	ldr	r3, [pc, #492]	; (8001f10 <Received_Data_Handler+0x200>)
 8001d24:	701a      	strb	r2, [r3, #0]
		sensorData.Humidity    = Received_Data[2] | (Received_Data[1] << 8);
 8001d26:	4b79      	ldr	r3, [pc, #484]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001d28:	789b      	ldrb	r3, [r3, #2]
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	4b77      	ldr	r3, [pc, #476]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001d2e:	785b      	ldrb	r3, [r3, #1]
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	4313      	orrs	r3, r2
 8001d36:	b21b      	sxth	r3, r3
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b75      	ldr	r3, [pc, #468]	; (8001f10 <Received_Data_Handler+0x200>)
 8001d3c:	805a      	strh	r2, [r3, #2]
		sensorData.Temperature = Received_Data[4] | (Received_Data[3] << 8);
 8001d3e:	4b73      	ldr	r3, [pc, #460]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001d40:	791b      	ldrb	r3, [r3, #4]
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	4b71      	ldr	r3, [pc, #452]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001d46:	78db      	ldrb	r3, [r3, #3]
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	b21b      	sxth	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b21b      	sxth	r3, r3
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	4b6f      	ldr	r3, [pc, #444]	; (8001f10 <Received_Data_Handler+0x200>)
 8001d54:	809a      	strh	r2, [r3, #4]
		sensorData.LUX         = Received_Data[6] | (Received_Data[5] << 8);
 8001d56:	4b6d      	ldr	r3, [pc, #436]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001d58:	799b      	ldrb	r3, [r3, #6]
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	4b6b      	ldr	r3, [pc, #428]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001d5e:	795b      	ldrb	r3, [r3, #5]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	b21b      	sxth	r3, r3
 8001d64:	4313      	orrs	r3, r2
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	4b69      	ldr	r3, [pc, #420]	; (8001f10 <Received_Data_Handler+0x200>)
 8001d6c:	80da      	strh	r2, [r3, #6]
		sensorData.Data_MQ135  = Received_Data[8] | (Received_Data[7] << 8);
 8001d6e:	4b67      	ldr	r3, [pc, #412]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001d70:	7a1b      	ldrb	r3, [r3, #8]
 8001d72:	b21a      	sxth	r2, r3
 8001d74:	4b65      	ldr	r3, [pc, #404]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001d76:	79db      	ldrb	r3, [r3, #7]
 8001d78:	021b      	lsls	r3, r3, #8
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	b21b      	sxth	r3, r3
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	4b63      	ldr	r3, [pc, #396]	; (8001f10 <Received_Data_Handler+0x200>)
 8001d84:	811a      	strh	r2, [r3, #8]
#if new_feature_dev == 1
		RX_Data_Control[0] = 0xA3;
 8001d86:	4b63      	ldr	r3, [pc, #396]	; (8001f14 <Received_Data_Handler+0x204>)
 8001d88:	22a3      	movs	r2, #163	; 0xa3
 8001d8a:	701a      	strb	r2, [r3, #0]
		RX_Data_Control[1] = 0xBB;
 8001d8c:	4b61      	ldr	r3, [pc, #388]	; (8001f14 <Received_Data_Handler+0x204>)
 8001d8e:	22bb      	movs	r2, #187	; 0xbb
 8001d90:	705a      	strb	r2, [r3, #1]
		RX_Data_Control[2] = 0x31;
 8001d92:	4b60      	ldr	r3, [pc, #384]	; (8001f14 <Received_Data_Handler+0x204>)
 8001d94:	2231      	movs	r2, #49	; 0x31
 8001d96:	709a      	strb	r2, [r3, #2]

		buffer[0] = 0xA1;
 8001d98:	4b5f      	ldr	r3, [pc, #380]	; (8001f18 <Received_Data_Handler+0x208>)
 8001d9a:	22a1      	movs	r2, #161	; 0xa1
 8001d9c:	701a      	strb	r2, [r3, #0]
		buffer[1] = Received_Data[1];
 8001d9e:	4b5b      	ldr	r3, [pc, #364]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001da0:	785a      	ldrb	r2, [r3, #1]
 8001da2:	4b5d      	ldr	r3, [pc, #372]	; (8001f18 <Received_Data_Handler+0x208>)
 8001da4:	705a      	strb	r2, [r3, #1]
		buffer[2] = Received_Data[2];
 8001da6:	4b59      	ldr	r3, [pc, #356]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001da8:	789a      	ldrb	r2, [r3, #2]
 8001daa:	4b5b      	ldr	r3, [pc, #364]	; (8001f18 <Received_Data_Handler+0x208>)
 8001dac:	709a      	strb	r2, [r3, #2]
		buffer[3] = Received_Data[3];
 8001dae:	4b57      	ldr	r3, [pc, #348]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001db0:	78da      	ldrb	r2, [r3, #3]
 8001db2:	4b59      	ldr	r3, [pc, #356]	; (8001f18 <Received_Data_Handler+0x208>)
 8001db4:	70da      	strb	r2, [r3, #3]
		buffer[4] = Received_Data[4];
 8001db6:	4b55      	ldr	r3, [pc, #340]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001db8:	791a      	ldrb	r2, [r3, #4]
 8001dba:	4b57      	ldr	r3, [pc, #348]	; (8001f18 <Received_Data_Handler+0x208>)
 8001dbc:	711a      	strb	r2, [r3, #4]
		buffer[5] = Received_Data[5];
 8001dbe:	4b53      	ldr	r3, [pc, #332]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001dc0:	795a      	ldrb	r2, [r3, #5]
 8001dc2:	4b55      	ldr	r3, [pc, #340]	; (8001f18 <Received_Data_Handler+0x208>)
 8001dc4:	715a      	strb	r2, [r3, #5]
		buffer[6] = Received_Data[6];
 8001dc6:	4b51      	ldr	r3, [pc, #324]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001dc8:	799a      	ldrb	r2, [r3, #6]
 8001dca:	4b53      	ldr	r3, [pc, #332]	; (8001f18 <Received_Data_Handler+0x208>)
 8001dcc:	719a      	strb	r2, [r3, #6]
		buffer[7] = Received_Data[7];
 8001dce:	4b4f      	ldr	r3, [pc, #316]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001dd0:	79da      	ldrb	r2, [r3, #7]
 8001dd2:	4b51      	ldr	r3, [pc, #324]	; (8001f18 <Received_Data_Handler+0x208>)
 8001dd4:	71da      	strb	r2, [r3, #7]
		buffer[8] = Received_Data[8];
 8001dd6:	4b4d      	ldr	r3, [pc, #308]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001dd8:	7a1a      	ldrb	r2, [r3, #8]
 8001dda:	4b4f      	ldr	r3, [pc, #316]	; (8001f18 <Received_Data_Handler+0x208>)
 8001ddc:	721a      	strb	r2, [r3, #8]


		for (int i = 4; i < 12 ; i++) {
 8001dde:	2304      	movs	r3, #4
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	e00b      	b.n	8001dfc <Received_Data_Handler+0xec>
		    RX_Data_Control[i] = Received_Data[i-3];  // Sao chép dữ liệu cũ từ vị trí 1 trở đi
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	3b03      	subs	r3, #3
 8001de8:	4a48      	ldr	r2, [pc, #288]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001dea:	5cd1      	ldrb	r1, [r2, r3]
 8001dec:	4a49      	ldr	r2, [pc, #292]	; (8001f14 <Received_Data_Handler+0x204>)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4413      	add	r3, r2
 8001df2:	460a      	mov	r2, r1
 8001df4:	701a      	strb	r2, [r3, #0]
		for (int i = 4; i < 12 ; i++) {
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b0b      	cmp	r3, #11
 8001e00:	ddf0      	ble.n	8001de4 <Received_Data_Handler+0xd4>
		}
		change_relay_state_update_manual();
 8001e02:	f000 f9cb 	bl	800219c <change_relay_state_update_manual>
    	light_relay  = (relay_status >> 0) & 0x01; // Lấy bit 0
    	fan_relay = (relay_status >> 1) & 0x01; // Lấy bit 1
    	water_relay = (relay_status >> 2) & 0x01; // Lấy bit 2
    }
#endif
}
 8001e06:	e07c      	b.n	8001f02 <Received_Data_Handler+0x1f2>
	else if(Received_Data[0] == 0xA2)
 8001e08:	4b40      	ldr	r3, [pc, #256]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2ba2      	cmp	r3, #162	; 0xa2
 8001e0e:	d15b      	bne.n	8001ec8 <Received_Data_Handler+0x1b8>
		sensorData.Check_ID    = Received_Data[0];
 8001e10:	4b3e      	ldr	r3, [pc, #248]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001e12:	781a      	ldrb	r2, [r3, #0]
 8001e14:	4b3e      	ldr	r3, [pc, #248]	; (8001f10 <Received_Data_Handler+0x200>)
 8001e16:	701a      	strb	r2, [r3, #0]
	    sensorData.soil_Temp = Received_Data[2] | (Received_Data[1] << 8);
 8001e18:	4b3c      	ldr	r3, [pc, #240]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001e1a:	789b      	ldrb	r3, [r3, #2]
 8001e1c:	b21a      	sxth	r2, r3
 8001e1e:	4b3b      	ldr	r3, [pc, #236]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001e20:	785b      	ldrb	r3, [r3, #1]
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	4313      	orrs	r3, r2
 8001e28:	b21b      	sxth	r3, r3
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <Received_Data_Handler+0x200>)
 8001e2e:	815a      	strh	r2, [r3, #10]
	    sensorData.soil_Moisture = Received_Data[4] | (Received_Data[3] << 8);
 8001e30:	4b36      	ldr	r3, [pc, #216]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001e32:	791b      	ldrb	r3, [r3, #4]
 8001e34:	b21a      	sxth	r2, r3
 8001e36:	4b35      	ldr	r3, [pc, #212]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001e38:	78db      	ldrb	r3, [r3, #3]
 8001e3a:	021b      	lsls	r3, r3, #8
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	b21b      	sxth	r3, r3
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <Received_Data_Handler+0x200>)
 8001e46:	819a      	strh	r2, [r3, #12]
		RX_Data_Control[3] = 0x32;
 8001e48:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <Received_Data_Handler+0x204>)
 8001e4a:	2232      	movs	r2, #50	; 0x32
 8001e4c:	70da      	strb	r2, [r3, #3]
		buffer[0] = 0xA1;
 8001e4e:	4b32      	ldr	r3, [pc, #200]	; (8001f18 <Received_Data_Handler+0x208>)
 8001e50:	22a1      	movs	r2, #161	; 0xa1
 8001e52:	701a      	strb	r2, [r3, #0]
		buffer[9] = Received_Data[1];
 8001e54:	4b2d      	ldr	r3, [pc, #180]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001e56:	785a      	ldrb	r2, [r3, #1]
 8001e58:	4b2f      	ldr	r3, [pc, #188]	; (8001f18 <Received_Data_Handler+0x208>)
 8001e5a:	725a      	strb	r2, [r3, #9]
		buffer[10] = Received_Data[2];
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001e5e:	789a      	ldrb	r2, [r3, #2]
 8001e60:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <Received_Data_Handler+0x208>)
 8001e62:	729a      	strb	r2, [r3, #10]
		buffer[11] = Received_Data[3];
 8001e64:	4b29      	ldr	r3, [pc, #164]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001e66:	78da      	ldrb	r2, [r3, #3]
 8001e68:	4b2b      	ldr	r3, [pc, #172]	; (8001f18 <Received_Data_Handler+0x208>)
 8001e6a:	72da      	strb	r2, [r3, #11]
		buffer[12] = Received_Data[4];
 8001e6c:	4b27      	ldr	r3, [pc, #156]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001e6e:	791a      	ldrb	r2, [r3, #4]
 8001e70:	4b29      	ldr	r3, [pc, #164]	; (8001f18 <Received_Data_Handler+0x208>)
 8001e72:	731a      	strb	r2, [r3, #12]
		buffer[13] = (water_relay << 2) | (fan_relay << 1) | light_relay;
 8001e74:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <Received_Data_Handler+0x20c>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	b25a      	sxtb	r2, r3
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <Received_Data_Handler+0x210>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	b25b      	sxtb	r3, r3
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	b25a      	sxtb	r2, r3
 8001e8c:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <Received_Data_Handler+0x214>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	b25b      	sxtb	r3, r3
 8001e94:	4313      	orrs	r3, r2
 8001e96:	b25b      	sxtb	r3, r3
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <Received_Data_Handler+0x208>)
 8001e9c:	735a      	strb	r2, [r3, #13]
		for (int i = 12; i < 16 ; i++) {
 8001e9e:	230c      	movs	r3, #12
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	e00b      	b.n	8001ebc <Received_Data_Handler+0x1ac>
		    RX_Data_Control[i] = Received_Data[i - 11];  // Sao chép dữ liệu cũ từ vị trí 1 trở đi
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	3b0b      	subs	r3, #11
 8001ea8:	4a18      	ldr	r2, [pc, #96]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001eaa:	5cd1      	ldrb	r1, [r2, r3]
 8001eac:	4a19      	ldr	r2, [pc, #100]	; (8001f14 <Received_Data_Handler+0x204>)
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	460a      	mov	r2, r1
 8001eb4:	701a      	strb	r2, [r3, #0]
		for (int i = 12; i < 16 ; i++) {
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b0f      	cmp	r3, #15
 8001ec0:	ddf0      	ble.n	8001ea4 <Received_Data_Handler+0x194>
		change_relay_state_update_manual();
 8001ec2:	f000 f96b 	bl	800219c <change_relay_state_update_manual>
}
 8001ec6:	e01c      	b.n	8001f02 <Received_Data_Handler+0x1f2>
    else if (Received_Data[0] == 0xA3)
 8001ec8:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2ba3      	cmp	r3, #163	; 0xa3
 8001ece:	d118      	bne.n	8001f02 <Received_Data_Handler+0x1f2>
    	uint8_t relay_status = Received_Data[1];
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <Received_Data_Handler+0x1fc>)
 8001ed2:	785b      	ldrb	r3, [r3, #1]
 8001ed4:	71fb      	strb	r3, [r7, #7]
    	light_relay  = (relay_status >> 0) & 0x01; // Lấy bit 0
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <Received_Data_Handler+0x214>)
 8001ee0:	701a      	strb	r2, [r3, #0]
    	fan_relay = (relay_status >> 1) & 0x01; // Lấy bit 1
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	085b      	lsrs	r3, r3, #1
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <Received_Data_Handler+0x210>)
 8001ef0:	701a      	strb	r2, [r3, #0]
    	water_relay = (relay_status >> 2) & 0x01; // Lấy bit 2
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	089b      	lsrs	r3, r3, #2
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <Received_Data_Handler+0x20c>)
 8001f00:	701a      	strb	r2, [r3, #0]
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200000b0 	.word	0x200000b0
 8001f10:	200000d8 	.word	0x200000d8
 8001f14:	200000bc 	.word	0x200000bc
 8001f18:	200000e8 	.word	0x200000e8
 8001f1c:	200000d2 	.word	0x200000d2
 8001f20:	200000d4 	.word	0x200000d4
 8001f24:	200000d3 	.word	0x200000d3

08001f28 <HAL_GPIO_EXTI_Callback>:
//    HAL_UART_Transmit_IT(&huart1, buffer, sizeof(buffer));
//}

//THIS WAKE UP TRIGGERED BY GPIO DIO0, HAPPENS WHEN A DATA RECEIVED BY SX1278 MODULE
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == DIO0_Pin)
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d12a      	bne.n	8001f8e <HAL_GPIO_EXTI_Callback+0x66>
    {
    	if (Start == 1) // Start over the network
 8001f38:	4b4d      	ldr	r3, [pc, #308]	; (8002070 <HAL_GPIO_EXTI_Callback+0x148>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d11c      	bne.n	8001f7c <HAL_GPIO_EXTI_Callback+0x54>
    	{
    		LoRa_receive(&myLoRa, Received_Data, 9);
 8001f42:	2209      	movs	r2, #9
 8001f44:	494b      	ldr	r1, [pc, #300]	; (8002074 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001f46:	484c      	ldr	r0, [pc, #304]	; (8002078 <HAL_GPIO_EXTI_Callback+0x150>)
 8001f48:	f7ff f813 	bl	8000f72 <LoRa_receive>
    		if (Received_Data[0] == 0x01)
 8001f4c:	4b49      	ldr	r3, [pc, #292]	; (8002074 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d103      	bne.n	8001f5c <HAL_GPIO_EXTI_Callback+0x34>
    		{
    			receivedACK[0] = 0x01;
 8001f54:	4b49      	ldr	r3, [pc, #292]	; (800207c <HAL_GPIO_EXTI_Callback+0x154>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	701a      	strb	r2, [r3, #0]

    else if (GPIO_Pin == Next_State_Pin)
    {
    	Next_State_Flag = 1;
    }
}
 8001f5a:	e084      	b.n	8002066 <HAL_GPIO_EXTI_Callback+0x13e>
    		else if (Received_Data[0] == 0x02)
 8001f5c:	4b45      	ldr	r3, [pc, #276]	; (8002074 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d103      	bne.n	8001f6c <HAL_GPIO_EXTI_Callback+0x44>
    			receivedACK[1] = 0x02;
 8001f64:	4b45      	ldr	r3, [pc, #276]	; (800207c <HAL_GPIO_EXTI_Callback+0x154>)
 8001f66:	2202      	movs	r2, #2
 8001f68:	705a      	strb	r2, [r3, #1]
}
 8001f6a:	e07c      	b.n	8002066 <HAL_GPIO_EXTI_Callback+0x13e>
    		else if (Received_Data[0] == 0x03)
 8001f6c:	4b41      	ldr	r3, [pc, #260]	; (8002074 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d178      	bne.n	8002066 <HAL_GPIO_EXTI_Callback+0x13e>
    			receivedACK[2] = 0x03;
 8001f74:	4b41      	ldr	r3, [pc, #260]	; (800207c <HAL_GPIO_EXTI_Callback+0x154>)
 8001f76:	2203      	movs	r2, #3
 8001f78:	709a      	strb	r2, [r3, #2]
}
 8001f7a:	e074      	b.n	8002066 <HAL_GPIO_EXTI_Callback+0x13e>
    		LoRa_receive(&myLoRa, Received_Data, 9);
 8001f7c:	2209      	movs	r2, #9
 8001f7e:	493d      	ldr	r1, [pc, #244]	; (8002074 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001f80:	483d      	ldr	r0, [pc, #244]	; (8002078 <HAL_GPIO_EXTI_Callback+0x150>)
 8001f82:	f7fe fff6 	bl	8000f72 <LoRa_receive>
    		Data_Sensor_Interrupt = 1;
 8001f86:	4b3e      	ldr	r3, [pc, #248]	; (8002080 <HAL_GPIO_EXTI_Callback+0x158>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
}
 8001f8c:	e06b      	b.n	8002066 <HAL_GPIO_EXTI_Callback+0x13e>
    else if (GPIO_Pin == Light_SW_Pin)
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d115      	bne.n	8001fc0 <HAL_GPIO_EXTI_Callback+0x98>
    	control_mode = MODE_MANUAL;
 8001f94:	4b3b      	ldr	r3, [pc, #236]	; (8002084 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
    	manual_interrupt_flag = 1;
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <HAL_GPIO_EXTI_Callback+0x160>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	701a      	strb	r2, [r3, #0]
    	__HAL_GPIO_EXTI_CLEAR_IT(Light_SW_Pin);  // Clear the interrupt flag
 8001fa0:	4b3a      	ldr	r3, [pc, #232]	; (800208c <HAL_GPIO_EXTI_Callback+0x164>)
 8001fa2:	2208      	movs	r2, #8
 8001fa4:	615a      	str	r2, [r3, #20]
    	if (light_relay == 0)
 8001fa6:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <HAL_GPIO_EXTI_Callback+0x168>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d103      	bne.n	8001fb8 <HAL_GPIO_EXTI_Callback+0x90>
    		light_relay = 1;
 8001fb0:	4b37      	ldr	r3, [pc, #220]	; (8002090 <HAL_GPIO_EXTI_Callback+0x168>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	701a      	strb	r2, [r3, #0]
}
 8001fb6:	e056      	b.n	8002066 <HAL_GPIO_EXTI_Callback+0x13e>
    		light_relay = 0;
 8001fb8:	4b35      	ldr	r3, [pc, #212]	; (8002090 <HAL_GPIO_EXTI_Callback+0x168>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
}
 8001fbe:	e052      	b.n	8002066 <HAL_GPIO_EXTI_Callback+0x13e>
    else if (GPIO_Pin == Water_pump_Pin)
 8001fc0:	88fb      	ldrh	r3, [r7, #6]
 8001fc2:	2b10      	cmp	r3, #16
 8001fc4:	d115      	bne.n	8001ff2 <HAL_GPIO_EXTI_Callback+0xca>
    	control_mode = MODE_MANUAL;
 8001fc6:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
    	manual_interrupt_flag = 1;
 8001fcc:	4b2e      	ldr	r3, [pc, #184]	; (8002088 <HAL_GPIO_EXTI_Callback+0x160>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
    	__HAL_GPIO_EXTI_CLEAR_IT(Water_pump_Pin);  // Clear the interrupt flag
 8001fd2:	4b2e      	ldr	r3, [pc, #184]	; (800208c <HAL_GPIO_EXTI_Callback+0x164>)
 8001fd4:	2210      	movs	r2, #16
 8001fd6:	615a      	str	r2, [r3, #20]
    	if (water_relay == 0)
 8001fd8:	4b2e      	ldr	r3, [pc, #184]	; (8002094 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d103      	bne.n	8001fea <HAL_GPIO_EXTI_Callback+0xc2>
    		water_relay = 1;
 8001fe2:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
}
 8001fe8:	e03d      	b.n	8002066 <HAL_GPIO_EXTI_Callback+0x13e>
    		water_relay = 0;
 8001fea:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
}
 8001ff0:	e039      	b.n	8002066 <HAL_GPIO_EXTI_Callback+0x13e>
    else if (GPIO_Pin == Fan_SW_Pin)
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ff8:	d116      	bne.n	8002028 <HAL_GPIO_EXTI_Callback+0x100>
    	control_mode = MODE_MANUAL;
 8001ffa:	4b22      	ldr	r3, [pc, #136]	; (8002084 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
    	manual_interrupt_flag = 1;
 8002000:	4b21      	ldr	r3, [pc, #132]	; (8002088 <HAL_GPIO_EXTI_Callback+0x160>)
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]
    	__HAL_GPIO_EXTI_CLEAR_IT(Fan_SW_Pin);  // Clear the interrupt flag
 8002006:	4b21      	ldr	r3, [pc, #132]	; (800208c <HAL_GPIO_EXTI_Callback+0x164>)
 8002008:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800200c:	615a      	str	r2, [r3, #20]
    	if (fan_relay == 0)
 800200e:	4b22      	ldr	r3, [pc, #136]	; (8002098 <HAL_GPIO_EXTI_Callback+0x170>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d103      	bne.n	8002020 <HAL_GPIO_EXTI_Callback+0xf8>
    		fan_relay = 1;
 8002018:	4b1f      	ldr	r3, [pc, #124]	; (8002098 <HAL_GPIO_EXTI_Callback+0x170>)
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
}
 800201e:	e022      	b.n	8002066 <HAL_GPIO_EXTI_Callback+0x13e>
    		fan_relay = 0;
 8002020:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <HAL_GPIO_EXTI_Callback+0x170>)
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
}
 8002026:	e01e      	b.n	8002066 <HAL_GPIO_EXTI_Callback+0x13e>
    else if (GPIO_Pin == Manual_Pin)
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800202e:	d10b      	bne.n	8002048 <HAL_GPIO_EXTI_Callback+0x120>
        if (control_mode == MODE_AUTOMATE)
 8002030:	4b14      	ldr	r3, [pc, #80]	; (8002084 <HAL_GPIO_EXTI_Callback+0x15c>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d103      	bne.n	8002040 <HAL_GPIO_EXTI_Callback+0x118>
            control_mode = MODE_MANUAL;
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_GPIO_EXTI_Callback+0x15c>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
}
 800203e:	e012      	b.n	8002066 <HAL_GPIO_EXTI_Callback+0x13e>
            control_mode = MODE_AUTOMATE;
 8002040:	4b10      	ldr	r3, [pc, #64]	; (8002084 <HAL_GPIO_EXTI_Callback+0x15c>)
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
}
 8002046:	e00e      	b.n	8002066 <HAL_GPIO_EXTI_Callback+0x13e>
    else if (GPIO_Pin == Prev_State_Pin)
 8002048:	88fb      	ldrh	r3, [r7, #6]
 800204a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800204e:	d103      	bne.n	8002058 <HAL_GPIO_EXTI_Callback+0x130>
    	Prev_State_Flag = 1;
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <HAL_GPIO_EXTI_Callback+0x174>)
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
}
 8002056:	e006      	b.n	8002066 <HAL_GPIO_EXTI_Callback+0x13e>
    else if (GPIO_Pin == Next_State_Pin)
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800205e:	d102      	bne.n	8002066 <HAL_GPIO_EXTI_Callback+0x13e>
    	Next_State_Flag = 1;
 8002060:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x178>)
 8002062:	2201      	movs	r2, #1
 8002064:	701a      	strb	r2, [r3, #0]
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000000 	.word	0x20000000
 8002074:	200000b0 	.word	0x200000b0
 8002078:	2000007c 	.word	0x2000007c
 800207c:	200000cc 	.word	0x200000cc
 8002080:	200000cf 	.word	0x200000cf
 8002084:	200000e6 	.word	0x200000e6
 8002088:	200000d1 	.word	0x200000d1
 800208c:	40010400 	.word	0x40010400
 8002090:	200000d3 	.word	0x200000d3
 8002094:	200000d2 	.word	0x200000d2
 8002098:	200000d4 	.word	0x200000d4
 800209c:	200000d7 	.word	0x200000d7
 80020a0:	200000d6 	.word	0x200000d6

080020a4 <HAL_UART_RxCpltCallback>:

//INTERRUPT WHEN HAVE A REQUEST FROM ESP32
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a15      	ldr	r2, [pc, #84]	; (8002108 <HAL_UART_RxCpltCallback+0x64>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d123      	bne.n	80020fe <HAL_UART_RxCpltCallback+0x5a>
    {
        // Xử lý dữ liệu nhận được trong rx_data (bật bơm, đèn, quạt)

    	HAL_UART_Receive_IT(&huart1, &ESP_rx_data, 1); //Cấu hình nhận data từ UART cho lần ngắt sau
 80020b6:	2201      	movs	r2, #1
 80020b8:	4914      	ldr	r1, [pc, #80]	; (800210c <HAL_UART_RxCpltCallback+0x68>)
 80020ba:	4815      	ldr	r0, [pc, #84]	; (8002110 <HAL_UART_RxCpltCallback+0x6c>)
 80020bc:	f002 fd46 	bl	8004b4c <HAL_UART_Receive_IT>
		manual_interrupt_flag = 1;
 80020c0:	4b14      	ldr	r3, [pc, #80]	; (8002114 <HAL_UART_RxCpltCallback+0x70>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	701a      	strb	r2, [r3, #0]
		control_mode = MODE_MANUAL;
 80020c6:	4b14      	ldr	r3, [pc, #80]	; (8002118 <HAL_UART_RxCpltCallback+0x74>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
		light_relay  = (ESP_rx_data >> 0) & 0x01; // Lấy bit 0
 80020cc:	4b0f      	ldr	r3, [pc, #60]	; (800210c <HAL_UART_RxCpltCallback+0x68>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <HAL_UART_RxCpltCallback+0x78>)
 80020d8:	701a      	strb	r2, [r3, #0]
		fan_relay = (ESP_rx_data >> 1) & 0x01; // Lấy bit 1
 80020da:	4b0c      	ldr	r3, [pc, #48]	; (800210c <HAL_UART_RxCpltCallback+0x68>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	085b      	lsrs	r3, r3, #1
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <HAL_UART_RxCpltCallback+0x7c>)
 80020ea:	701a      	strb	r2, [r3, #0]
		water_relay = (ESP_rx_data >> 2) & 0x01; // Lấy bit 2
 80020ec:	4b07      	ldr	r3, [pc, #28]	; (800210c <HAL_UART_RxCpltCallback+0x68>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_UART_RxCpltCallback+0x80>)
 80020fc:	701a      	strb	r2, [r3, #0]
    }
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40013800 	.word	0x40013800
 800210c:	200000d0 	.word	0x200000d0
 8002110:	200001a4 	.word	0x200001a4
 8002114:	200000d1 	.word	0x200000d1
 8002118:	200000e6 	.word	0x200000e6
 800211c:	200000d3 	.word	0x200000d3
 8002120:	200000d4 	.word	0x200000d4
 8002124:	200000d2 	.word	0x200000d2

08002128 <change_relay_state>:

void change_relay_state(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
    // Prepare the packet for transmission
    relay_state = (water_relay) | (light_relay << 1) | (fan_relay << 2);
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <change_relay_state+0x5c>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	b25a      	sxtb	r2, r3
 8002136:	4b14      	ldr	r3, [pc, #80]	; (8002188 <change_relay_state+0x60>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	b25b      	sxtb	r3, r3
 800213e:	4313      	orrs	r3, r2
 8002140:	b25a      	sxtb	r2, r3
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <change_relay_state+0x64>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	b25b      	sxtb	r3, r3
 800214c:	4313      	orrs	r3, r2
 800214e:	b25b      	sxtb	r3, r3
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <change_relay_state+0x68>)
 8002154:	701a      	strb	r2, [r3, #0]
    TxBuffer[0] = 0xA3;       // Control node ID
 8002156:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <change_relay_state+0x6c>)
 8002158:	22a3      	movs	r2, #163	; 0xa3
 800215a:	701a      	strb	r2, [r3, #0]
    TxBuffer[1] = 0xAA;
 800215c:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <change_relay_state+0x6c>)
 800215e:	22aa      	movs	r2, #170	; 0xaa
 8002160:	705a      	strb	r2, [r3, #1]
    TxBuffer[2] = relay_state; // Relay state byte
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <change_relay_state+0x68>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <change_relay_state+0x6c>)
 800216a:	709a      	strb	r2, [r3, #2]

    // Transmit the packet
    LoRa_transmit(&myLoRa, TxBuffer, 3, 500);
 800216c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002170:	2203      	movs	r2, #3
 8002172:	4908      	ldr	r1, [pc, #32]	; (8002194 <change_relay_state+0x6c>)
 8002174:	4808      	ldr	r0, [pc, #32]	; (8002198 <change_relay_state+0x70>)
 8002176:	f7fe fe98 	bl	8000eaa <LoRa_transmit>

    // Switch back to receive mode
    LoRa_startReceiving(&myLoRa);
 800217a:	4807      	ldr	r0, [pc, #28]	; (8002198 <change_relay_state+0x70>)
 800217c:	f7fe feed 	bl	8000f5a <LoRa_startReceiving>
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}
 8002184:	200000d3 	.word	0x200000d3
 8002188:	200000d2 	.word	0x200000d2
 800218c:	200000d4 	.word	0x200000d4
 8002190:	200000d5 	.word	0x200000d5
 8002194:	200000ac 	.word	0x200000ac
 8002198:	2000007c 	.word	0x2000007c

0800219c <change_relay_state_update_manual>:


void change_relay_state_update_manual(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
    // Prepare the packet for transmission
    relay_state = (water_relay) | (light_relay << 1) | (fan_relay << 2);
 80021a0:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <change_relay_state_update_manual+0x5c>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	b25a      	sxtb	r2, r3
 80021aa:	4b14      	ldr	r3, [pc, #80]	; (80021fc <change_relay_state_update_manual+0x60>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	b25b      	sxtb	r3, r3
 80021b2:	4313      	orrs	r3, r2
 80021b4:	b25a      	sxtb	r2, r3
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <change_relay_state_update_manual+0x64>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	b25b      	sxtb	r3, r3
 80021c0:	4313      	orrs	r3, r2
 80021c2:	b25b      	sxtb	r3, r3
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <change_relay_state_update_manual+0x68>)
 80021c8:	701a      	strb	r2, [r3, #0]
    TxBuffer[0] = 0xA3;       // Control node ID
 80021ca:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <change_relay_state_update_manual+0x6c>)
 80021cc:	22a3      	movs	r2, #163	; 0xa3
 80021ce:	701a      	strb	r2, [r3, #0]
    TxBuffer[1] = 0xCC;
 80021d0:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <change_relay_state_update_manual+0x6c>)
 80021d2:	22cc      	movs	r2, #204	; 0xcc
 80021d4:	705a      	strb	r2, [r3, #1]
    TxBuffer[2] = relay_state; // Relay state byte
 80021d6:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <change_relay_state_update_manual+0x68>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <change_relay_state_update_manual+0x6c>)
 80021de:	709a      	strb	r2, [r3, #2]

    // Transmit the packet
    LoRa_transmit(&myLoRa, TxBuffer, 3, 500);
 80021e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021e4:	2203      	movs	r2, #3
 80021e6:	4908      	ldr	r1, [pc, #32]	; (8002208 <change_relay_state_update_manual+0x6c>)
 80021e8:	4808      	ldr	r0, [pc, #32]	; (800220c <change_relay_state_update_manual+0x70>)
 80021ea:	f7fe fe5e 	bl	8000eaa <LoRa_transmit>

    // Switch back to receive mode
    LoRa_startReceiving(&myLoRa);
 80021ee:	4807      	ldr	r0, [pc, #28]	; (800220c <change_relay_state_update_manual+0x70>)
 80021f0:	f7fe feb3 	bl	8000f5a <LoRa_startReceiving>
}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200000d3 	.word	0x200000d3
 80021fc:	200000d2 	.word	0x200000d2
 8002200:	200000d4 	.word	0x200000d4
 8002204:	200000d5 	.word	0x200000d5
 8002208:	200000ac 	.word	0x200000ac
 800220c:	2000007c 	.word	0x2000007c

08002210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002214:	b672      	cpsid	i
}
 8002216:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002218:	e7fe      	b.n	8002218 <Error_Handler+0x8>
	...

0800221c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <HAL_MspInit+0x5c>)
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	4a14      	ldr	r2, [pc, #80]	; (8002278 <HAL_MspInit+0x5c>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6193      	str	r3, [r2, #24]
 800222e:	4b12      	ldr	r3, [pc, #72]	; (8002278 <HAL_MspInit+0x5c>)
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800223a:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <HAL_MspInit+0x5c>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	4a0e      	ldr	r2, [pc, #56]	; (8002278 <HAL_MspInit+0x5c>)
 8002240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002244:	61d3      	str	r3, [r2, #28]
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <HAL_MspInit+0x5c>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_MspInit+0x60>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	4a04      	ldr	r2, [pc, #16]	; (800227c <HAL_MspInit+0x60>)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800226e:	bf00      	nop
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	40021000 	.word	0x40021000
 800227c:	40010000 	.word	0x40010000

08002280 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 0310 	add.w	r3, r7, #16
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a15      	ldr	r2, [pc, #84]	; (80022f0 <HAL_I2C_MspInit+0x70>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d123      	bne.n	80022e8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a0:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <HAL_I2C_MspInit+0x74>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	4a13      	ldr	r2, [pc, #76]	; (80022f4 <HAL_I2C_MspInit+0x74>)
 80022a6:	f043 0308 	orr.w	r3, r3, #8
 80022aa:	6193      	str	r3, [r2, #24]
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <HAL_I2C_MspInit+0x74>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022b8:	23c0      	movs	r3, #192	; 0xc0
 80022ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022bc:	2312      	movs	r3, #18
 80022be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022c0:	2303      	movs	r3, #3
 80022c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c4:	f107 0310 	add.w	r3, r7, #16
 80022c8:	4619      	mov	r1, r3
 80022ca:	480b      	ldr	r0, [pc, #44]	; (80022f8 <HAL_I2C_MspInit+0x78>)
 80022cc:	f000 fbb6 	bl	8002a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022d0:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <HAL_I2C_MspInit+0x74>)
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	4a07      	ldr	r2, [pc, #28]	; (80022f4 <HAL_I2C_MspInit+0x74>)
 80022d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022da:	61d3      	str	r3, [r2, #28]
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_I2C_MspInit+0x74>)
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022e8:	bf00      	nop
 80022ea:	3720      	adds	r7, #32
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40005400 	.word	0x40005400
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40010c00 	.word	0x40010c00

080022fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 0310 	add.w	r3, r7, #16
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a1b      	ldr	r2, [pc, #108]	; (8002384 <HAL_SPI_MspInit+0x88>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d12f      	bne.n	800237c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800231c:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <HAL_SPI_MspInit+0x8c>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	4a19      	ldr	r2, [pc, #100]	; (8002388 <HAL_SPI_MspInit+0x8c>)
 8002322:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002326:	6193      	str	r3, [r2, #24]
 8002328:	4b17      	ldr	r3, [pc, #92]	; (8002388 <HAL_SPI_MspInit+0x8c>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002334:	4b14      	ldr	r3, [pc, #80]	; (8002388 <HAL_SPI_MspInit+0x8c>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	4a13      	ldr	r2, [pc, #76]	; (8002388 <HAL_SPI_MspInit+0x8c>)
 800233a:	f043 0304 	orr.w	r3, r3, #4
 800233e:	6193      	str	r3, [r2, #24]
 8002340:	4b11      	ldr	r3, [pc, #68]	; (8002388 <HAL_SPI_MspInit+0x8c>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800234c:	23a0      	movs	r3, #160	; 0xa0
 800234e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002350:	2302      	movs	r3, #2
 8002352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002354:	2303      	movs	r3, #3
 8002356:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	4619      	mov	r1, r3
 800235e:	480b      	ldr	r0, [pc, #44]	; (800238c <HAL_SPI_MspInit+0x90>)
 8002360:	f000 fb6c 	bl	8002a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002364:	2340      	movs	r3, #64	; 0x40
 8002366:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002370:	f107 0310 	add.w	r3, r7, #16
 8002374:	4619      	mov	r1, r3
 8002376:	4805      	ldr	r0, [pc, #20]	; (800238c <HAL_SPI_MspInit+0x90>)
 8002378:	f000 fb60 	bl	8002a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800237c:	bf00      	nop
 800237e:	3720      	adds	r7, #32
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40013000 	.word	0x40013000
 8002388:	40021000 	.word	0x40021000
 800238c:	40010800 	.word	0x40010800

08002390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 0310 	add.w	r3, r7, #16
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a20      	ldr	r2, [pc, #128]	; (800242c <HAL_UART_MspInit+0x9c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d139      	bne.n	8002424 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023b0:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <HAL_UART_MspInit+0xa0>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	4a1e      	ldr	r2, [pc, #120]	; (8002430 <HAL_UART_MspInit+0xa0>)
 80023b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ba:	6193      	str	r3, [r2, #24]
 80023bc:	4b1c      	ldr	r3, [pc, #112]	; (8002430 <HAL_UART_MspInit+0xa0>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c8:	4b19      	ldr	r3, [pc, #100]	; (8002430 <HAL_UART_MspInit+0xa0>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	4a18      	ldr	r2, [pc, #96]	; (8002430 <HAL_UART_MspInit+0xa0>)
 80023ce:	f043 0304 	orr.w	r3, r3, #4
 80023d2:	6193      	str	r3, [r2, #24]
 80023d4:	4b16      	ldr	r3, [pc, #88]	; (8002430 <HAL_UART_MspInit+0xa0>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ea:	2303      	movs	r3, #3
 80023ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ee:	f107 0310 	add.w	r3, r7, #16
 80023f2:	4619      	mov	r1, r3
 80023f4:	480f      	ldr	r0, [pc, #60]	; (8002434 <HAL_UART_MspInit+0xa4>)
 80023f6:	f000 fb21 	bl	8002a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002408:	f107 0310 	add.w	r3, r7, #16
 800240c:	4619      	mov	r1, r3
 800240e:	4809      	ldr	r0, [pc, #36]	; (8002434 <HAL_UART_MspInit+0xa4>)
 8002410:	f000 fb14 	bl	8002a3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002414:	2200      	movs	r2, #0
 8002416:	2100      	movs	r1, #0
 8002418:	2025      	movs	r0, #37	; 0x25
 800241a:	f000 fa26 	bl	800286a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800241e:	2025      	movs	r0, #37	; 0x25
 8002420:	f000 fa3f 	bl	80028a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002424:	bf00      	nop
 8002426:	3720      	adds	r7, #32
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40013800 	.word	0x40013800
 8002430:	40021000 	.word	0x40021000
 8002434:	40010800 	.word	0x40010800

08002438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800243c:	e7fe      	b.n	800243c <NMI_Handler+0x4>

0800243e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002442:	e7fe      	b.n	8002442 <HardFault_Handler+0x4>

08002444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002448:	e7fe      	b.n	8002448 <MemManage_Handler+0x4>

0800244a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800244e:	e7fe      	b.n	800244e <BusFault_Handler+0x4>

08002450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <UsageFault_Handler+0x4>

08002456 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr

0800247a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800247e:	f000 f8dd 	bl	800263c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}

08002486 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 800248a:	2004      	movs	r0, #4
 800248c:	f000 fc72 	bl	8002d74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}

08002494 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Light_SW_Pin);
 8002498:	2008      	movs	r0, #8
 800249a:	f000 fc6b 	bl	8002d74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Water_pump_Pin);
 80024a6:	2010      	movs	r0, #16
 80024a8:	f000 fc64 	bl	8002d74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <USART1_IRQHandler+0x10>)
 80024b6:	f002 fb6f 	bl	8004b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200001a4 	.word	0x200001a4

080024c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Fan_SW_Pin);
 80024c8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80024cc:	f000 fc52 	bl	8002d74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Next_State_Pin);
 80024d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024d4:	f000 fc4e 	bl	8002d74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Prev_State_Pin);
 80024d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024dc:	f000 fc4a 	bl	8002d74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Manual_Pin);
 80024e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80024e4:	f000 fc46 	bl	8002d74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024f4:	4a14      	ldr	r2, [pc, #80]	; (8002548 <_sbrk+0x5c>)
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <_sbrk+0x60>)
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002500:	4b13      	ldr	r3, [pc, #76]	; (8002550 <_sbrk+0x64>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d102      	bne.n	800250e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <_sbrk+0x64>)
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <_sbrk+0x68>)
 800250c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <_sbrk+0x64>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	429a      	cmp	r2, r3
 800251a:	d207      	bcs.n	800252c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800251c:	f003 f876 	bl	800560c <__errno>
 8002520:	4603      	mov	r3, r0
 8002522:	220c      	movs	r2, #12
 8002524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002526:	f04f 33ff 	mov.w	r3, #4294967295
 800252a:	e009      	b.n	8002540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800252c:	4b08      	ldr	r3, [pc, #32]	; (8002550 <_sbrk+0x64>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002532:	4b07      	ldr	r3, [pc, #28]	; (8002550 <_sbrk+0x64>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	4a05      	ldr	r2, [pc, #20]	; (8002550 <_sbrk+0x64>)
 800253c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800253e:	68fb      	ldr	r3, [r7, #12]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20005000 	.word	0x20005000
 800254c:	00000400 	.word	0x00000400
 8002550:	200001ec 	.word	0x200001ec
 8002554:	20000340 	.word	0x20000340

08002558 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002564:	f7ff fff8 	bl	8002558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002568:	480b      	ldr	r0, [pc, #44]	; (8002598 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800256a:	490c      	ldr	r1, [pc, #48]	; (800259c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800256c:	4a0c      	ldr	r2, [pc, #48]	; (80025a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002570:	e002      	b.n	8002578 <LoopCopyDataInit>

08002572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002576:	3304      	adds	r3, #4

08002578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800257a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800257c:	d3f9      	bcc.n	8002572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800257e:	4a09      	ldr	r2, [pc, #36]	; (80025a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002580:	4c09      	ldr	r4, [pc, #36]	; (80025a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002584:	e001      	b.n	800258a <LoopFillZerobss>

08002586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002588:	3204      	adds	r2, #4

0800258a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800258a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800258c:	d3fb      	bcc.n	8002586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800258e:	f003 f843 	bl	8005618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002592:	f7fe fee3 	bl	800135c <main>
  bx lr
 8002596:	4770      	bx	lr
  ldr r0, =_sdata
 8002598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800259c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80025a0:	08006118 	.word	0x08006118
  ldr r2, =_sbss
 80025a4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80025a8:	2000033c 	.word	0x2000033c

080025ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025ac:	e7fe      	b.n	80025ac <ADC1_2_IRQHandler>
	...

080025b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <HAL_Init+0x28>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <HAL_Init+0x28>)
 80025ba:	f043 0310 	orr.w	r3, r3, #16
 80025be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c0:	2003      	movs	r0, #3
 80025c2:	f000 f947 	bl	8002854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025c6:	200f      	movs	r0, #15
 80025c8:	f000 f808 	bl	80025dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025cc:	f7ff fe26 	bl	800221c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40022000 	.word	0x40022000

080025dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025e4:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_InitTick+0x54>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_InitTick+0x58>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	4619      	mov	r1, r3
 80025ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f95f 	bl	80028be <HAL_SYSTICK_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e00e      	b.n	8002628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b0f      	cmp	r3, #15
 800260e:	d80a      	bhi.n	8002626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002610:	2200      	movs	r2, #0
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	f04f 30ff 	mov.w	r0, #4294967295
 8002618:	f000 f927 	bl	800286a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800261c:	4a06      	ldr	r2, [pc, #24]	; (8002638 <HAL_InitTick+0x5c>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000004 	.word	0x20000004
 8002634:	2000000c 	.word	0x2000000c
 8002638:	20000008 	.word	0x20000008

0800263c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_IncTick+0x1c>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4b05      	ldr	r3, [pc, #20]	; (800265c <HAL_IncTick+0x20>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4413      	add	r3, r2
 800264c:	4a03      	ldr	r2, [pc, #12]	; (800265c <HAL_IncTick+0x20>)
 800264e:	6013      	str	r3, [r2, #0]
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	2000000c 	.word	0x2000000c
 800265c:	200001f0 	.word	0x200001f0

08002660 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return uwTick;
 8002664:	4b02      	ldr	r3, [pc, #8]	; (8002670 <HAL_GetTick+0x10>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	200001f0 	.word	0x200001f0

08002674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800267c:	f7ff fff0 	bl	8002660 <HAL_GetTick>
 8002680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d005      	beq.n	800269a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800268e:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <HAL_Delay+0x44>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4413      	add	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800269a:	bf00      	nop
 800269c:	f7ff ffe0 	bl	8002660 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d8f7      	bhi.n	800269c <HAL_Delay+0x28>
  {
  }
}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	2000000c 	.word	0x2000000c

080026bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <__NVIC_SetPriorityGrouping+0x44>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026d8:	4013      	ands	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ee:	4a04      	ldr	r2, [pc, #16]	; (8002700 <__NVIC_SetPriorityGrouping+0x44>)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	60d3      	str	r3, [r2, #12]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <__NVIC_GetPriorityGrouping+0x18>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	0a1b      	lsrs	r3, r3, #8
 800270e:	f003 0307 	and.w	r3, r3, #7
}
 8002712:	4618      	mov	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	2b00      	cmp	r3, #0
 8002730:	db0b      	blt.n	800274a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	f003 021f 	and.w	r2, r3, #31
 8002738:	4906      	ldr	r1, [pc, #24]	; (8002754 <__NVIC_EnableIRQ+0x34>)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	2001      	movs	r0, #1
 8002742:	fa00 f202 	lsl.w	r2, r0, r2
 8002746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr
 8002754:	e000e100 	.word	0xe000e100

08002758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	6039      	str	r1, [r7, #0]
 8002762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002768:	2b00      	cmp	r3, #0
 800276a:	db0a      	blt.n	8002782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	b2da      	uxtb	r2, r3
 8002770:	490c      	ldr	r1, [pc, #48]	; (80027a4 <__NVIC_SetPriority+0x4c>)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	0112      	lsls	r2, r2, #4
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	440b      	add	r3, r1
 800277c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002780:	e00a      	b.n	8002798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4908      	ldr	r1, [pc, #32]	; (80027a8 <__NVIC_SetPriority+0x50>)
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	3b04      	subs	r3, #4
 8002790:	0112      	lsls	r2, r2, #4
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	440b      	add	r3, r1
 8002796:	761a      	strb	r2, [r3, #24]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000e100 	.word	0xe000e100
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b089      	sub	sp, #36	; 0x24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f1c3 0307 	rsb	r3, r3, #7
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	bf28      	it	cs
 80027ca:	2304      	movcs	r3, #4
 80027cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3304      	adds	r3, #4
 80027d2:	2b06      	cmp	r3, #6
 80027d4:	d902      	bls.n	80027dc <NVIC_EncodePriority+0x30>
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3b03      	subs	r3, #3
 80027da:	e000      	b.n	80027de <NVIC_EncodePriority+0x32>
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e0:	f04f 32ff 	mov.w	r2, #4294967295
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43da      	mvns	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	401a      	ands	r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f4:	f04f 31ff 	mov.w	r1, #4294967295
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	fa01 f303 	lsl.w	r3, r1, r3
 80027fe:	43d9      	mvns	r1, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002804:	4313      	orrs	r3, r2
         );
}
 8002806:	4618      	mov	r0, r3
 8002808:	3724      	adds	r7, #36	; 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3b01      	subs	r3, #1
 800281c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002820:	d301      	bcc.n	8002826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002822:	2301      	movs	r3, #1
 8002824:	e00f      	b.n	8002846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002826:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <SysTick_Config+0x40>)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3b01      	subs	r3, #1
 800282c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800282e:	210f      	movs	r1, #15
 8002830:	f04f 30ff 	mov.w	r0, #4294967295
 8002834:	f7ff ff90 	bl	8002758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <SysTick_Config+0x40>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800283e:	4b04      	ldr	r3, [pc, #16]	; (8002850 <SysTick_Config+0x40>)
 8002840:	2207      	movs	r2, #7
 8002842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	e000e010 	.word	0xe000e010

08002854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff ff2d 	bl	80026bc <__NVIC_SetPriorityGrouping>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800286a:	b580      	push	{r7, lr}
 800286c:	b086      	sub	sp, #24
 800286e:	af00      	add	r7, sp, #0
 8002870:	4603      	mov	r3, r0
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800287c:	f7ff ff42 	bl	8002704 <__NVIC_GetPriorityGrouping>
 8002880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	6978      	ldr	r0, [r7, #20]
 8002888:	f7ff ff90 	bl	80027ac <NVIC_EncodePriority>
 800288c:	4602      	mov	r2, r0
 800288e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff5f 	bl	8002758 <__NVIC_SetPriority>
}
 800289a:	bf00      	nop
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff35 	bl	8002720 <__NVIC_EnableIRQ>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff ffa2 	bl	8002810 <SysTick_Config>
 80028cc:	4603      	mov	r3, r0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b085      	sub	sp, #20
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d008      	beq.n	8002900 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2204      	movs	r2, #4
 80028f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e020      	b.n	8002942 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 020e 	bic.w	r2, r2, #14
 800290e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002928:	2101      	movs	r1, #1
 800292a:	fa01 f202 	lsl.w	r2, r1, r2
 800292e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002940:	7bfb      	ldrb	r3, [r7, #15]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d005      	beq.n	8002970 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2204      	movs	r2, #4
 8002968:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	73fb      	strb	r3, [r7, #15]
 800296e:	e051      	b.n	8002a14 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 020e 	bic.w	r2, r2, #14
 800297e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0201 	bic.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a22      	ldr	r2, [pc, #136]	; (8002a20 <HAL_DMA_Abort_IT+0xd4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d029      	beq.n	80029ee <HAL_DMA_Abort_IT+0xa2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a21      	ldr	r2, [pc, #132]	; (8002a24 <HAL_DMA_Abort_IT+0xd8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d022      	beq.n	80029ea <HAL_DMA_Abort_IT+0x9e>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1f      	ldr	r2, [pc, #124]	; (8002a28 <HAL_DMA_Abort_IT+0xdc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01a      	beq.n	80029e4 <HAL_DMA_Abort_IT+0x98>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a1e      	ldr	r2, [pc, #120]	; (8002a2c <HAL_DMA_Abort_IT+0xe0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d012      	beq.n	80029de <HAL_DMA_Abort_IT+0x92>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1c      	ldr	r2, [pc, #112]	; (8002a30 <HAL_DMA_Abort_IT+0xe4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00a      	beq.n	80029d8 <HAL_DMA_Abort_IT+0x8c>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1b      	ldr	r2, [pc, #108]	; (8002a34 <HAL_DMA_Abort_IT+0xe8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d102      	bne.n	80029d2 <HAL_DMA_Abort_IT+0x86>
 80029cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029d0:	e00e      	b.n	80029f0 <HAL_DMA_Abort_IT+0xa4>
 80029d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029d6:	e00b      	b.n	80029f0 <HAL_DMA_Abort_IT+0xa4>
 80029d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029dc:	e008      	b.n	80029f0 <HAL_DMA_Abort_IT+0xa4>
 80029de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029e2:	e005      	b.n	80029f0 <HAL_DMA_Abort_IT+0xa4>
 80029e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029e8:	e002      	b.n	80029f0 <HAL_DMA_Abort_IT+0xa4>
 80029ea:	2310      	movs	r3, #16
 80029ec:	e000      	b.n	80029f0 <HAL_DMA_Abort_IT+0xa4>
 80029ee:	2301      	movs	r3, #1
 80029f0:	4a11      	ldr	r2, [pc, #68]	; (8002a38 <HAL_DMA_Abort_IT+0xec>)
 80029f2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	4798      	blx	r3
    } 
  }
  return status;
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40020008 	.word	0x40020008
 8002a24:	4002001c 	.word	0x4002001c
 8002a28:	40020030 	.word	0x40020030
 8002a2c:	40020044 	.word	0x40020044
 8002a30:	40020058 	.word	0x40020058
 8002a34:	4002006c 	.word	0x4002006c
 8002a38:	40020000 	.word	0x40020000

08002a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b08b      	sub	sp, #44	; 0x2c
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a46:	2300      	movs	r3, #0
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a4e:	e169      	b.n	8002d24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a50:	2201      	movs	r2, #1
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	f040 8158 	bne.w	8002d1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4a9a      	ldr	r2, [pc, #616]	; (8002cdc <HAL_GPIO_Init+0x2a0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d05e      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
 8002a78:	4a98      	ldr	r2, [pc, #608]	; (8002cdc <HAL_GPIO_Init+0x2a0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d875      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002a7e:	4a98      	ldr	r2, [pc, #608]	; (8002ce0 <HAL_GPIO_Init+0x2a4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d058      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
 8002a84:	4a96      	ldr	r2, [pc, #600]	; (8002ce0 <HAL_GPIO_Init+0x2a4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d86f      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002a8a:	4a96      	ldr	r2, [pc, #600]	; (8002ce4 <HAL_GPIO_Init+0x2a8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d052      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
 8002a90:	4a94      	ldr	r2, [pc, #592]	; (8002ce4 <HAL_GPIO_Init+0x2a8>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d869      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002a96:	4a94      	ldr	r2, [pc, #592]	; (8002ce8 <HAL_GPIO_Init+0x2ac>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d04c      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
 8002a9c:	4a92      	ldr	r2, [pc, #584]	; (8002ce8 <HAL_GPIO_Init+0x2ac>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d863      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002aa2:	4a92      	ldr	r2, [pc, #584]	; (8002cec <HAL_GPIO_Init+0x2b0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d046      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
 8002aa8:	4a90      	ldr	r2, [pc, #576]	; (8002cec <HAL_GPIO_Init+0x2b0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d85d      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002aae:	2b12      	cmp	r3, #18
 8002ab0:	d82a      	bhi.n	8002b08 <HAL_GPIO_Init+0xcc>
 8002ab2:	2b12      	cmp	r3, #18
 8002ab4:	d859      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002ab6:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <HAL_GPIO_Init+0x80>)
 8002ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abc:	08002b37 	.word	0x08002b37
 8002ac0:	08002b11 	.word	0x08002b11
 8002ac4:	08002b23 	.word	0x08002b23
 8002ac8:	08002b65 	.word	0x08002b65
 8002acc:	08002b6b 	.word	0x08002b6b
 8002ad0:	08002b6b 	.word	0x08002b6b
 8002ad4:	08002b6b 	.word	0x08002b6b
 8002ad8:	08002b6b 	.word	0x08002b6b
 8002adc:	08002b6b 	.word	0x08002b6b
 8002ae0:	08002b6b 	.word	0x08002b6b
 8002ae4:	08002b6b 	.word	0x08002b6b
 8002ae8:	08002b6b 	.word	0x08002b6b
 8002aec:	08002b6b 	.word	0x08002b6b
 8002af0:	08002b6b 	.word	0x08002b6b
 8002af4:	08002b6b 	.word	0x08002b6b
 8002af8:	08002b6b 	.word	0x08002b6b
 8002afc:	08002b6b 	.word	0x08002b6b
 8002b00:	08002b19 	.word	0x08002b19
 8002b04:	08002b2d 	.word	0x08002b2d
 8002b08:	4a79      	ldr	r2, [pc, #484]	; (8002cf0 <HAL_GPIO_Init+0x2b4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d013      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b0e:	e02c      	b.n	8002b6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	623b      	str	r3, [r7, #32]
          break;
 8002b16:	e029      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	623b      	str	r3, [r7, #32]
          break;
 8002b20:	e024      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	3308      	adds	r3, #8
 8002b28:	623b      	str	r3, [r7, #32]
          break;
 8002b2a:	e01f      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	330c      	adds	r3, #12
 8002b32:	623b      	str	r3, [r7, #32]
          break;
 8002b34:	e01a      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d102      	bne.n	8002b44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b3e:	2304      	movs	r3, #4
 8002b40:	623b      	str	r3, [r7, #32]
          break;
 8002b42:	e013      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d105      	bne.n	8002b58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	611a      	str	r2, [r3, #16]
          break;
 8002b56:	e009      	b.n	8002b6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b58:	2308      	movs	r3, #8
 8002b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	615a      	str	r2, [r3, #20]
          break;
 8002b62:	e003      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b64:	2300      	movs	r3, #0
 8002b66:	623b      	str	r3, [r7, #32]
          break;
 8002b68:	e000      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          break;
 8002b6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2bff      	cmp	r3, #255	; 0xff
 8002b70:	d801      	bhi.n	8002b76 <HAL_GPIO_Init+0x13a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	e001      	b.n	8002b7a <HAL_GPIO_Init+0x13e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2bff      	cmp	r3, #255	; 0xff
 8002b80:	d802      	bhi.n	8002b88 <HAL_GPIO_Init+0x14c>
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	e002      	b.n	8002b8e <HAL_GPIO_Init+0x152>
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	3b08      	subs	r3, #8
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	210f      	movs	r1, #15
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	6a39      	ldr	r1, [r7, #32]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 80b1 	beq.w	8002d1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bbc:	4b4d      	ldr	r3, [pc, #308]	; (8002cf4 <HAL_GPIO_Init+0x2b8>)
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	4a4c      	ldr	r2, [pc, #304]	; (8002cf4 <HAL_GPIO_Init+0x2b8>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6193      	str	r3, [r2, #24]
 8002bc8:	4b4a      	ldr	r3, [pc, #296]	; (8002cf4 <HAL_GPIO_Init+0x2b8>)
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bd4:	4a48      	ldr	r2, [pc, #288]	; (8002cf8 <HAL_GPIO_Init+0x2bc>)
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	089b      	lsrs	r3, r3, #2
 8002bda:	3302      	adds	r3, #2
 8002bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	220f      	movs	r2, #15
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a40      	ldr	r2, [pc, #256]	; (8002cfc <HAL_GPIO_Init+0x2c0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d013      	beq.n	8002c28 <HAL_GPIO_Init+0x1ec>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a3f      	ldr	r2, [pc, #252]	; (8002d00 <HAL_GPIO_Init+0x2c4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00d      	beq.n	8002c24 <HAL_GPIO_Init+0x1e8>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a3e      	ldr	r2, [pc, #248]	; (8002d04 <HAL_GPIO_Init+0x2c8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d007      	beq.n	8002c20 <HAL_GPIO_Init+0x1e4>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a3d      	ldr	r2, [pc, #244]	; (8002d08 <HAL_GPIO_Init+0x2cc>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d101      	bne.n	8002c1c <HAL_GPIO_Init+0x1e0>
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e006      	b.n	8002c2a <HAL_GPIO_Init+0x1ee>
 8002c1c:	2304      	movs	r3, #4
 8002c1e:	e004      	b.n	8002c2a <HAL_GPIO_Init+0x1ee>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e002      	b.n	8002c2a <HAL_GPIO_Init+0x1ee>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <HAL_GPIO_Init+0x1ee>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2c:	f002 0203 	and.w	r2, r2, #3
 8002c30:	0092      	lsls	r2, r2, #2
 8002c32:	4093      	lsls	r3, r2
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c3a:	492f      	ldr	r1, [pc, #188]	; (8002cf8 <HAL_GPIO_Init+0x2bc>)
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	089b      	lsrs	r3, r3, #2
 8002c40:	3302      	adds	r3, #2
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d006      	beq.n	8002c62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c54:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	492c      	ldr	r1, [pc, #176]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	608b      	str	r3, [r1, #8]
 8002c60:	e006      	b.n	8002c70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c62:	4b2a      	ldr	r3, [pc, #168]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	4928      	ldr	r1, [pc, #160]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d006      	beq.n	8002c8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c7c:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	4922      	ldr	r1, [pc, #136]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60cb      	str	r3, [r1, #12]
 8002c88:	e006      	b.n	8002c98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c8a:	4b20      	ldr	r3, [pc, #128]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	491e      	ldr	r1, [pc, #120]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d006      	beq.n	8002cb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ca4:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	4918      	ldr	r1, [pc, #96]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
 8002cb0:	e006      	b.n	8002cc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cb2:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	4914      	ldr	r1, [pc, #80]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d021      	beq.n	8002d10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	490e      	ldr	r1, [pc, #56]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	600b      	str	r3, [r1, #0]
 8002cd8:	e021      	b.n	8002d1e <HAL_GPIO_Init+0x2e2>
 8002cda:	bf00      	nop
 8002cdc:	10320000 	.word	0x10320000
 8002ce0:	10310000 	.word	0x10310000
 8002ce4:	10220000 	.word	0x10220000
 8002ce8:	10210000 	.word	0x10210000
 8002cec:	10120000 	.word	0x10120000
 8002cf0:	10110000 	.word	0x10110000
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40010000 	.word	0x40010000
 8002cfc:	40010800 	.word	0x40010800
 8002d00:	40010c00 	.word	0x40010c00
 8002d04:	40011000 	.word	0x40011000
 8002d08:	40011400 	.word	0x40011400
 8002d0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <HAL_GPIO_Init+0x304>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	4909      	ldr	r1, [pc, #36]	; (8002d40 <HAL_GPIO_Init+0x304>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	3301      	adds	r3, #1
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f47f ae8e 	bne.w	8002a50 <HAL_GPIO_Init+0x14>
  }
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	372c      	adds	r7, #44	; 0x2c
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	40010400 	.word	0x40010400

08002d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	807b      	strh	r3, [r7, #2]
 8002d50:	4613      	mov	r3, r2
 8002d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d54:	787b      	ldrb	r3, [r7, #1]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d5a:	887a      	ldrh	r2, [r7, #2]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d60:	e003      	b.n	8002d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d62:	887b      	ldrh	r3, [r7, #2]
 8002d64:	041a      	lsls	r2, r3, #16
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	611a      	str	r2, [r3, #16]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d7e:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d006      	beq.n	8002d98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d8a:	4a05      	ldr	r2, [pc, #20]	; (8002da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff f8c8 	bl	8001f28 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40010400 	.word	0x40010400

08002da4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e12b      	b.n	800300e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff fa58 	bl	8002280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2224      	movs	r2, #36	; 0x24
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002df6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e08:	f001 f832 	bl	8003e70 <HAL_RCC_GetPCLK1Freq>
 8002e0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4a81      	ldr	r2, [pc, #516]	; (8003018 <HAL_I2C_Init+0x274>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d807      	bhi.n	8002e28 <HAL_I2C_Init+0x84>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a80      	ldr	r2, [pc, #512]	; (800301c <HAL_I2C_Init+0x278>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	bf94      	ite	ls
 8002e20:	2301      	movls	r3, #1
 8002e22:	2300      	movhi	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	e006      	b.n	8002e36 <HAL_I2C_Init+0x92>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4a7d      	ldr	r2, [pc, #500]	; (8003020 <HAL_I2C_Init+0x27c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	bf94      	ite	ls
 8002e30:	2301      	movls	r3, #1
 8002e32:	2300      	movhi	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e0e7      	b.n	800300e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4a78      	ldr	r2, [pc, #480]	; (8003024 <HAL_I2C_Init+0x280>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	0c9b      	lsrs	r3, r3, #18
 8002e48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	4a6a      	ldr	r2, [pc, #424]	; (8003018 <HAL_I2C_Init+0x274>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d802      	bhi.n	8002e78 <HAL_I2C_Init+0xd4>
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	3301      	adds	r3, #1
 8002e76:	e009      	b.n	8002e8c <HAL_I2C_Init+0xe8>
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	4a69      	ldr	r2, [pc, #420]	; (8003028 <HAL_I2C_Init+0x284>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	099b      	lsrs	r3, r3, #6
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	430b      	orrs	r3, r1
 8002e92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	495c      	ldr	r1, [pc, #368]	; (8003018 <HAL_I2C_Init+0x274>)
 8002ea8:	428b      	cmp	r3, r1
 8002eaa:	d819      	bhi.n	8002ee0 <HAL_I2C_Init+0x13c>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1e59      	subs	r1, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eba:	1c59      	adds	r1, r3, #1
 8002ebc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ec0:	400b      	ands	r3, r1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_I2C_Init+0x138>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1e59      	subs	r1, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eda:	e051      	b.n	8002f80 <HAL_I2C_Init+0x1dc>
 8002edc:	2304      	movs	r3, #4
 8002ede:	e04f      	b.n	8002f80 <HAL_I2C_Init+0x1dc>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d111      	bne.n	8002f0c <HAL_I2C_Init+0x168>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1e58      	subs	r0, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6859      	ldr	r1, [r3, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	440b      	add	r3, r1
 8002ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e012      	b.n	8002f32 <HAL_I2C_Init+0x18e>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	1e58      	subs	r0, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6859      	ldr	r1, [r3, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	0099      	lsls	r1, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f22:	3301      	adds	r3, #1
 8002f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_Init+0x196>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e022      	b.n	8002f80 <HAL_I2C_Init+0x1dc>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10e      	bne.n	8002f60 <HAL_I2C_Init+0x1bc>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	1e58      	subs	r0, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6859      	ldr	r1, [r3, #4]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	440b      	add	r3, r1
 8002f50:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f54:	3301      	adds	r3, #1
 8002f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f5e:	e00f      	b.n	8002f80 <HAL_I2C_Init+0x1dc>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1e58      	subs	r0, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	0099      	lsls	r1, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f76:	3301      	adds	r3, #1
 8002f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	6809      	ldr	r1, [r1, #0]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6911      	ldr	r1, [r2, #16]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68d2      	ldr	r2, [r2, #12]
 8002fba:	4311      	orrs	r1, r2
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	000186a0 	.word	0x000186a0
 800301c:	001e847f 	.word	0x001e847f
 8003020:	003d08ff 	.word	0x003d08ff
 8003024:	431bde83 	.word	0x431bde83
 8003028:	10624dd3 	.word	0x10624dd3

0800302c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af02      	add	r7, sp, #8
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	461a      	mov	r2, r3
 8003038:	460b      	mov	r3, r1
 800303a:	817b      	strh	r3, [r7, #10]
 800303c:	4613      	mov	r3, r2
 800303e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003040:	f7ff fb0e 	bl	8002660 <HAL_GetTick>
 8003044:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b20      	cmp	r3, #32
 8003050:	f040 80e0 	bne.w	8003214 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	2319      	movs	r3, #25
 800305a:	2201      	movs	r2, #1
 800305c:	4970      	ldr	r1, [pc, #448]	; (8003220 <HAL_I2C_Master_Transmit+0x1f4>)
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f964 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800306a:	2302      	movs	r3, #2
 800306c:	e0d3      	b.n	8003216 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_I2C_Master_Transmit+0x50>
 8003078:	2302      	movs	r3, #2
 800307a:	e0cc      	b.n	8003216 <HAL_I2C_Master_Transmit+0x1ea>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b01      	cmp	r3, #1
 8003090:	d007      	beq.n	80030a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0201 	orr.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2221      	movs	r2, #33	; 0x21
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2210      	movs	r2, #16
 80030be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	893a      	ldrh	r2, [r7, #8]
 80030d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4a50      	ldr	r2, [pc, #320]	; (8003224 <HAL_I2C_Master_Transmit+0x1f8>)
 80030e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030e4:	8979      	ldrh	r1, [r7, #10]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	6a3a      	ldr	r2, [r7, #32]
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 f89c 	bl	8003228 <I2C_MasterRequestWrite>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e08d      	b.n	8003216 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003110:	e066      	b.n	80031e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	6a39      	ldr	r1, [r7, #32]
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 fa22 	bl	8003560 <I2C_WaitOnTXEFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00d      	beq.n	800313e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	2b04      	cmp	r3, #4
 8003128:	d107      	bne.n	800313a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003138:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e06b      	b.n	8003216 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	781a      	ldrb	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	3b01      	subs	r3, #1
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b04      	cmp	r3, #4
 800317a:	d11b      	bne.n	80031b4 <HAL_I2C_Master_Transmit+0x188>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003180:	2b00      	cmp	r3, #0
 8003182:	d017      	beq.n	80031b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	781a      	ldrb	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	6a39      	ldr	r1, [r7, #32]
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 fa19 	bl	80035f0 <I2C_WaitOnBTFFlagUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00d      	beq.n	80031e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d107      	bne.n	80031dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e01a      	b.n	8003216 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d194      	bne.n	8003112 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	e000      	b.n	8003216 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003214:	2302      	movs	r3, #2
  }
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	00100002 	.word	0x00100002
 8003224:	ffff0000 	.word	0xffff0000

08003228 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	460b      	mov	r3, r1
 8003236:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b08      	cmp	r3, #8
 8003242:	d006      	beq.n	8003252 <I2C_MasterRequestWrite+0x2a>
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d003      	beq.n	8003252 <I2C_MasterRequestWrite+0x2a>
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003250:	d108      	bne.n	8003264 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	e00b      	b.n	800327c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	2b12      	cmp	r3, #18
 800326a:	d107      	bne.n	800327c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800327a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 f84f 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00d      	beq.n	80032b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032a2:	d103      	bne.n	80032ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e035      	b.n	800331c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032b8:	d108      	bne.n	80032cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ba:	897b      	ldrh	r3, [r7, #10]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032c8:	611a      	str	r2, [r3, #16]
 80032ca:	e01b      	b.n	8003304 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032cc:	897b      	ldrh	r3, [r7, #10]
 80032ce:	11db      	asrs	r3, r3, #7
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f003 0306 	and.w	r3, r3, #6
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	f063 030f 	orn	r3, r3, #15
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	490e      	ldr	r1, [pc, #56]	; (8003324 <I2C_MasterRequestWrite+0xfc>)
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f898 	bl	8003420 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e010      	b.n	800331c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032fa:	897b      	ldrh	r3, [r7, #10]
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	4907      	ldr	r1, [pc, #28]	; (8003328 <I2C_MasterRequestWrite+0x100>)
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f888 	bl	8003420 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	00010008 	.word	0x00010008
 8003328:	00010002 	.word	0x00010002

0800332c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	4613      	mov	r3, r2
 800333a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800333c:	e048      	b.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d044      	beq.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003346:	f7ff f98b 	bl	8002660 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d302      	bcc.n	800335c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d139      	bne.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	0c1b      	lsrs	r3, r3, #16
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b01      	cmp	r3, #1
 8003364:	d10d      	bne.n	8003382 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	43da      	mvns	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	4013      	ands	r3, r2
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	e00c      	b.n	800339c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	43da      	mvns	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	4013      	ands	r3, r2
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	bf0c      	ite	eq
 8003394:	2301      	moveq	r3, #1
 8003396:	2300      	movne	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d116      	bne.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	f043 0220 	orr.w	r2, r3, #32
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e023      	b.n	8003418 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	0c1b      	lsrs	r3, r3, #16
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d10d      	bne.n	80033f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	43da      	mvns	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4013      	ands	r3, r2
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	e00c      	b.n	8003410 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	43da      	mvns	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	4013      	ands	r3, r2
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	bf0c      	ite	eq
 8003408:	2301      	moveq	r3, #1
 800340a:	2300      	movne	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	429a      	cmp	r2, r3
 8003414:	d093      	beq.n	800333e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800342e:	e071      	b.n	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800343e:	d123      	bne.n	8003488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800344e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003458:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	f043 0204 	orr.w	r2, r3, #4
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e067      	b.n	8003558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348e:	d041      	beq.n	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003490:	f7ff f8e6 	bl	8002660 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	429a      	cmp	r2, r3
 800349e:	d302      	bcc.n	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d136      	bne.n	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	0c1b      	lsrs	r3, r3, #16
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d10c      	bne.n	80034ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	43da      	mvns	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4013      	ands	r3, r2
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bf14      	ite	ne
 80034c2:	2301      	movne	r3, #1
 80034c4:	2300      	moveq	r3, #0
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	e00b      	b.n	80034e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	43da      	mvns	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4013      	ands	r3, r2
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf14      	ite	ne
 80034dc:	2301      	movne	r3, #1
 80034de:	2300      	moveq	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d016      	beq.n	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f043 0220 	orr.w	r2, r3, #32
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e021      	b.n	8003558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	0c1b      	lsrs	r3, r3, #16
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b01      	cmp	r3, #1
 800351c:	d10c      	bne.n	8003538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	43da      	mvns	r2, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	4013      	ands	r3, r2
 800352a:	b29b      	uxth	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	bf14      	ite	ne
 8003530:	2301      	movne	r3, #1
 8003532:	2300      	moveq	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	e00b      	b.n	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	43da      	mvns	r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4013      	ands	r3, r2
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	bf14      	ite	ne
 800354a:	2301      	movne	r3, #1
 800354c:	2300      	moveq	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	f47f af6d 	bne.w	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800356c:	e034      	b.n	80035d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f886 	bl	8003680 <I2C_IsAcknowledgeFailed>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e034      	b.n	80035e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d028      	beq.n	80035d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003586:	f7ff f86b 	bl	8002660 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	429a      	cmp	r2, r3
 8003594:	d302      	bcc.n	800359c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d11d      	bne.n	80035d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a6:	2b80      	cmp	r3, #128	; 0x80
 80035a8:	d016      	beq.n	80035d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	f043 0220 	orr.w	r2, r3, #32
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e007      	b.n	80035e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e2:	2b80      	cmp	r3, #128	; 0x80
 80035e4:	d1c3      	bne.n	800356e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035fc:	e034      	b.n	8003668 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f83e 	bl	8003680 <I2C_IsAcknowledgeFailed>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e034      	b.n	8003678 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003614:	d028      	beq.n	8003668 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003616:	f7ff f823 	bl	8002660 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	429a      	cmp	r2, r3
 8003624:	d302      	bcc.n	800362c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d11d      	bne.n	8003668 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b04      	cmp	r3, #4
 8003638:	d016      	beq.n	8003668 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	f043 0220 	orr.w	r2, r3, #32
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e007      	b.n	8003678 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b04      	cmp	r3, #4
 8003674:	d1c3      	bne.n	80035fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003696:	d11b      	bne.n	80036d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f043 0204 	orr.w	r2, r3, #4
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr

080036dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e272      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 8087 	beq.w	800380a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036fc:	4b92      	ldr	r3, [pc, #584]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 030c 	and.w	r3, r3, #12
 8003704:	2b04      	cmp	r3, #4
 8003706:	d00c      	beq.n	8003722 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003708:	4b8f      	ldr	r3, [pc, #572]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 030c 	and.w	r3, r3, #12
 8003710:	2b08      	cmp	r3, #8
 8003712:	d112      	bne.n	800373a <HAL_RCC_OscConfig+0x5e>
 8003714:	4b8c      	ldr	r3, [pc, #560]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800371c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003720:	d10b      	bne.n	800373a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003722:	4b89      	ldr	r3, [pc, #548]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d06c      	beq.n	8003808 <HAL_RCC_OscConfig+0x12c>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d168      	bne.n	8003808 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e24c      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003742:	d106      	bne.n	8003752 <HAL_RCC_OscConfig+0x76>
 8003744:	4b80      	ldr	r3, [pc, #512]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a7f      	ldr	r2, [pc, #508]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 800374a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	e02e      	b.n	80037b0 <HAL_RCC_OscConfig+0xd4>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10c      	bne.n	8003774 <HAL_RCC_OscConfig+0x98>
 800375a:	4b7b      	ldr	r3, [pc, #492]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a7a      	ldr	r2, [pc, #488]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 8003760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	4b78      	ldr	r3, [pc, #480]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a77      	ldr	r2, [pc, #476]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 800376c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e01d      	b.n	80037b0 <HAL_RCC_OscConfig+0xd4>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800377c:	d10c      	bne.n	8003798 <HAL_RCC_OscConfig+0xbc>
 800377e:	4b72      	ldr	r3, [pc, #456]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a71      	ldr	r2, [pc, #452]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 8003784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	4b6f      	ldr	r3, [pc, #444]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a6e      	ldr	r2, [pc, #440]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 8003790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e00b      	b.n	80037b0 <HAL_RCC_OscConfig+0xd4>
 8003798:	4b6b      	ldr	r3, [pc, #428]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a6a      	ldr	r2, [pc, #424]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 800379e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	4b68      	ldr	r3, [pc, #416]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a67      	ldr	r2, [pc, #412]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 80037aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d013      	beq.n	80037e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b8:	f7fe ff52 	bl	8002660 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c0:	f7fe ff4e 	bl	8002660 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b64      	cmp	r3, #100	; 0x64
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e200      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d2:	4b5d      	ldr	r3, [pc, #372]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0xe4>
 80037de:	e014      	b.n	800380a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fe ff3e 	bl	8002660 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e8:	f7fe ff3a 	bl	8002660 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b64      	cmp	r3, #100	; 0x64
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e1ec      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fa:	4b53      	ldr	r3, [pc, #332]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x10c>
 8003806:	e000      	b.n	800380a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d063      	beq.n	80038de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003816:	4b4c      	ldr	r3, [pc, #304]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00b      	beq.n	800383a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003822:	4b49      	ldr	r3, [pc, #292]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	2b08      	cmp	r3, #8
 800382c:	d11c      	bne.n	8003868 <HAL_RCC_OscConfig+0x18c>
 800382e:	4b46      	ldr	r3, [pc, #280]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d116      	bne.n	8003868 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383a:	4b43      	ldr	r3, [pc, #268]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <HAL_RCC_OscConfig+0x176>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d001      	beq.n	8003852 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e1c0      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003852:	4b3d      	ldr	r3, [pc, #244]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4939      	ldr	r1, [pc, #228]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003866:	e03a      	b.n	80038de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d020      	beq.n	80038b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003870:	4b36      	ldr	r3, [pc, #216]	; (800394c <HAL_RCC_OscConfig+0x270>)
 8003872:	2201      	movs	r2, #1
 8003874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003876:	f7fe fef3 	bl	8002660 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800387e:	f7fe feef 	bl	8002660 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e1a1      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003890:	4b2d      	ldr	r3, [pc, #180]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0f0      	beq.n	800387e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389c:	4b2a      	ldr	r3, [pc, #168]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	4927      	ldr	r1, [pc, #156]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	600b      	str	r3, [r1, #0]
 80038b0:	e015      	b.n	80038de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b2:	4b26      	ldr	r3, [pc, #152]	; (800394c <HAL_RCC_OscConfig+0x270>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fe fed2 	bl	8002660 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c0:	f7fe fece 	bl	8002660 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e180      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d2:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d03a      	beq.n	8003960 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d019      	beq.n	8003926 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f2:	4b17      	ldr	r3, [pc, #92]	; (8003950 <HAL_RCC_OscConfig+0x274>)
 80038f4:	2201      	movs	r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f8:	f7fe feb2 	bl	8002660 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003900:	f7fe feae 	bl	8002660 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e160      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003912:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <HAL_RCC_OscConfig+0x26c>)
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800391e:	2001      	movs	r0, #1
 8003920:	f000 face 	bl	8003ec0 <RCC_Delay>
 8003924:	e01c      	b.n	8003960 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003926:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <HAL_RCC_OscConfig+0x274>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800392c:	f7fe fe98 	bl	8002660 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003932:	e00f      	b.n	8003954 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003934:	f7fe fe94 	bl	8002660 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d908      	bls.n	8003954 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e146      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4f8>
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	42420000 	.word	0x42420000
 8003950:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003954:	4b92      	ldr	r3, [pc, #584]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e9      	bne.n	8003934 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80a6 	beq.w	8003aba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800396e:	2300      	movs	r3, #0
 8003970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003972:	4b8b      	ldr	r3, [pc, #556]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10d      	bne.n	800399a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800397e:	4b88      	ldr	r3, [pc, #544]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	4a87      	ldr	r2, [pc, #540]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003988:	61d3      	str	r3, [r2, #28]
 800398a:	4b85      	ldr	r3, [pc, #532]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003996:	2301      	movs	r3, #1
 8003998:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399a:	4b82      	ldr	r3, [pc, #520]	; (8003ba4 <HAL_RCC_OscConfig+0x4c8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d118      	bne.n	80039d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039a6:	4b7f      	ldr	r3, [pc, #508]	; (8003ba4 <HAL_RCC_OscConfig+0x4c8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a7e      	ldr	r2, [pc, #504]	; (8003ba4 <HAL_RCC_OscConfig+0x4c8>)
 80039ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039b2:	f7fe fe55 	bl	8002660 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ba:	f7fe fe51 	bl	8002660 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b64      	cmp	r3, #100	; 0x64
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e103      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039cc:	4b75      	ldr	r3, [pc, #468]	; (8003ba4 <HAL_RCC_OscConfig+0x4c8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d106      	bne.n	80039ee <HAL_RCC_OscConfig+0x312>
 80039e0:	4b6f      	ldr	r3, [pc, #444]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	4a6e      	ldr	r2, [pc, #440]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	6213      	str	r3, [r2, #32]
 80039ec:	e02d      	b.n	8003a4a <HAL_RCC_OscConfig+0x36e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCC_OscConfig+0x334>
 80039f6:	4b6a      	ldr	r3, [pc, #424]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	4a69      	ldr	r2, [pc, #420]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	6213      	str	r3, [r2, #32]
 8003a02:	4b67      	ldr	r3, [pc, #412]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	4a66      	ldr	r2, [pc, #408]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003a08:	f023 0304 	bic.w	r3, r3, #4
 8003a0c:	6213      	str	r3, [r2, #32]
 8003a0e:	e01c      	b.n	8003a4a <HAL_RCC_OscConfig+0x36e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	2b05      	cmp	r3, #5
 8003a16:	d10c      	bne.n	8003a32 <HAL_RCC_OscConfig+0x356>
 8003a18:	4b61      	ldr	r3, [pc, #388]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	4a60      	ldr	r2, [pc, #384]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003a1e:	f043 0304 	orr.w	r3, r3, #4
 8003a22:	6213      	str	r3, [r2, #32]
 8003a24:	4b5e      	ldr	r3, [pc, #376]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	4a5d      	ldr	r2, [pc, #372]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	6213      	str	r3, [r2, #32]
 8003a30:	e00b      	b.n	8003a4a <HAL_RCC_OscConfig+0x36e>
 8003a32:	4b5b      	ldr	r3, [pc, #364]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	4a5a      	ldr	r2, [pc, #360]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003a38:	f023 0301 	bic.w	r3, r3, #1
 8003a3c:	6213      	str	r3, [r2, #32]
 8003a3e:	4b58      	ldr	r3, [pc, #352]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	4a57      	ldr	r2, [pc, #348]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003a44:	f023 0304 	bic.w	r3, r3, #4
 8003a48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d015      	beq.n	8003a7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a52:	f7fe fe05 	bl	8002660 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a58:	e00a      	b.n	8003a70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5a:	f7fe fe01 	bl	8002660 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e0b1      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a70:	4b4b      	ldr	r3, [pc, #300]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0ee      	beq.n	8003a5a <HAL_RCC_OscConfig+0x37e>
 8003a7c:	e014      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7e:	f7fe fdef 	bl	8002660 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a84:	e00a      	b.n	8003a9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a86:	f7fe fdeb 	bl	8002660 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e09b      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a9c:	4b40      	ldr	r3, [pc, #256]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1ee      	bne.n	8003a86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d105      	bne.n	8003aba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aae:	4b3c      	ldr	r3, [pc, #240]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	4a3b      	ldr	r2, [pc, #236]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 8087 	beq.w	8003bd2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ac4:	4b36      	ldr	r3, [pc, #216]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 030c 	and.w	r3, r3, #12
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d061      	beq.n	8003b94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d146      	bne.n	8003b66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad8:	4b33      	ldr	r3, [pc, #204]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ade:	f7fe fdbf 	bl	8002660 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae6:	f7fe fdbb 	bl	8002660 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e06d      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af8:	4b29      	ldr	r3, [pc, #164]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f0      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0c:	d108      	bne.n	8003b20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b0e:	4b24      	ldr	r3, [pc, #144]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	4921      	ldr	r1, [pc, #132]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b20:	4b1f      	ldr	r3, [pc, #124]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a19      	ldr	r1, [r3, #32]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	430b      	orrs	r3, r1
 8003b32:	491b      	ldr	r1, [pc, #108]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b38:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3e:	f7fe fd8f 	bl	8002660 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b46:	f7fe fd8b 	bl	8002660 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e03d      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b58:	4b11      	ldr	r3, [pc, #68]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0f0      	beq.n	8003b46 <HAL_RCC_OscConfig+0x46a>
 8003b64:	e035      	b.n	8003bd2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b66:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6c:	f7fe fd78 	bl	8002660 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b74:	f7fe fd74 	bl	8002660 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e026      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b86:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <HAL_RCC_OscConfig+0x4c4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0x498>
 8003b92:	e01e      	b.n	8003bd2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d107      	bne.n	8003bac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e019      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4f8>
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40007000 	.word	0x40007000
 8003ba8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_RCC_OscConfig+0x500>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d106      	bne.n	8003bce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d001      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40021000 	.word	0x40021000

08003be0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e0d0      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bf4:	4b6a      	ldr	r3, [pc, #424]	; (8003da0 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d910      	bls.n	8003c24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c02:	4b67      	ldr	r3, [pc, #412]	; (8003da0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 0207 	bic.w	r2, r3, #7
 8003c0a:	4965      	ldr	r1, [pc, #404]	; (8003da0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c12:	4b63      	ldr	r3, [pc, #396]	; (8003da0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d001      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e0b8      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d020      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c3c:	4b59      	ldr	r3, [pc, #356]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	4a58      	ldr	r2, [pc, #352]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d005      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c54:	4b53      	ldr	r3, [pc, #332]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	4a52      	ldr	r2, [pc, #328]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c60:	4b50      	ldr	r3, [pc, #320]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	494d      	ldr	r1, [pc, #308]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d040      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d107      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c86:	4b47      	ldr	r3, [pc, #284]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d115      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e07f      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d107      	bne.n	8003cae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c9e:	4b41      	ldr	r3, [pc, #260]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d109      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e073      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cae:	4b3d      	ldr	r3, [pc, #244]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e06b      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cbe:	4b39      	ldr	r3, [pc, #228]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f023 0203 	bic.w	r2, r3, #3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	4936      	ldr	r1, [pc, #216]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cd0:	f7fe fcc6 	bl	8002660 <HAL_GetTick>
 8003cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd6:	e00a      	b.n	8003cee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd8:	f7fe fcc2 	bl	8002660 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e053      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cee:	4b2d      	ldr	r3, [pc, #180]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f003 020c 	and.w	r2, r3, #12
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d1eb      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d00:	4b27      	ldr	r3, [pc, #156]	; (8003da0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d210      	bcs.n	8003d30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0e:	4b24      	ldr	r3, [pc, #144]	; (8003da0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 0207 	bic.w	r2, r3, #7
 8003d16:	4922      	ldr	r1, [pc, #136]	; (8003da0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1e:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e032      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d3c:	4b19      	ldr	r3, [pc, #100]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	4916      	ldr	r1, [pc, #88]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d009      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d5a:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	490e      	ldr	r1, [pc, #56]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d6e:	f000 f821 	bl	8003db4 <HAL_RCC_GetSysClockFreq>
 8003d72:	4602      	mov	r2, r0
 8003d74:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	091b      	lsrs	r3, r3, #4
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	490a      	ldr	r1, [pc, #40]	; (8003da8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d80:	5ccb      	ldrb	r3, [r1, r3]
 8003d82:	fa22 f303 	lsr.w	r3, r2, r3
 8003d86:	4a09      	ldr	r2, [pc, #36]	; (8003dac <HAL_RCC_ClockConfig+0x1cc>)
 8003d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d8a:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <HAL_RCC_ClockConfig+0x1d0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe fc24 	bl	80025dc <HAL_InitTick>

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40022000 	.word	0x40022000
 8003da4:	40021000 	.word	0x40021000
 8003da8:	080060b0 	.word	0x080060b0
 8003dac:	20000004 	.word	0x20000004
 8003db0:	20000008 	.word	0x20000008

08003db4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003dce:	4b1e      	ldr	r3, [pc, #120]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d002      	beq.n	8003de4 <HAL_RCC_GetSysClockFreq+0x30>
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d003      	beq.n	8003dea <HAL_RCC_GetSysClockFreq+0x36>
 8003de2:	e027      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003de4:	4b19      	ldr	r3, [pc, #100]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x98>)
 8003de6:	613b      	str	r3, [r7, #16]
      break;
 8003de8:	e027      	b.n	8003e3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	0c9b      	lsrs	r3, r3, #18
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	4a17      	ldr	r2, [pc, #92]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003df4:	5cd3      	ldrb	r3, [r2, r3]
 8003df6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d010      	beq.n	8003e24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e02:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	0c5b      	lsrs	r3, r3, #17
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	4a11      	ldr	r2, [pc, #68]	; (8003e54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e0e:	5cd3      	ldrb	r3, [r2, r3]
 8003e10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a0d      	ldr	r2, [pc, #52]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x98>)
 8003e16:	fb03 f202 	mul.w	r2, r3, r2
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	e004      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a0c      	ldr	r2, [pc, #48]	; (8003e58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e28:	fb02 f303 	mul.w	r3, r2, r3
 8003e2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	613b      	str	r3, [r7, #16]
      break;
 8003e32:	e002      	b.n	8003e3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e34:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x98>)
 8003e36:	613b      	str	r3, [r7, #16]
      break;
 8003e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e3a:	693b      	ldr	r3, [r7, #16]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	371c      	adds	r7, #28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	007a1200 	.word	0x007a1200
 8003e50:	080060c8 	.word	0x080060c8
 8003e54:	080060d8 	.word	0x080060d8
 8003e58:	003d0900 	.word	0x003d0900

08003e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e60:	4b02      	ldr	r3, [pc, #8]	; (8003e6c <HAL_RCC_GetHCLKFreq+0x10>)
 8003e62:	681b      	ldr	r3, [r3, #0]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr
 8003e6c:	20000004 	.word	0x20000004

08003e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e74:	f7ff fff2 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	0a1b      	lsrs	r3, r3, #8
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	4903      	ldr	r1, [pc, #12]	; (8003e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e86:	5ccb      	ldrb	r3, [r1, r3]
 8003e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40021000 	.word	0x40021000
 8003e94:	080060c0 	.word	0x080060c0

08003e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e9c:	f7ff ffde 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	0adb      	lsrs	r3, r3, #11
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	4903      	ldr	r1, [pc, #12]	; (8003ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eae:	5ccb      	ldrb	r3, [r1, r3]
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	080060c0 	.word	0x080060c0

08003ec0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <RCC_Delay+0x34>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a0a      	ldr	r2, [pc, #40]	; (8003ef8 <RCC_Delay+0x38>)
 8003ece:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed2:	0a5b      	lsrs	r3, r3, #9
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
 8003eda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003edc:	bf00      	nop
  }
  while (Delay --);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1e5a      	subs	r2, r3, #1
 8003ee2:	60fa      	str	r2, [r7, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1f9      	bne.n	8003edc <RCC_Delay+0x1c>
}
 8003ee8:	bf00      	nop
 8003eea:	bf00      	nop
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr
 8003ef4:	20000004 	.word	0x20000004
 8003ef8:	10624dd3 	.word	0x10624dd3

08003efc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e076      	b.n	8003ffc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d108      	bne.n	8003f28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f1e:	d009      	beq.n	8003f34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	61da      	str	r2, [r3, #28]
 8003f26:	e005      	b.n	8003f34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fe f9d4 	bl	80022fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb8:	ea42 0103 	orr.w	r1, r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	0c1a      	lsrs	r2, r3, #16
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f002 0204 	and.w	r2, r2, #4
 8003fda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69da      	ldr	r2, [r3, #28]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004014:	f7fe fb24 	bl	8002660 <HAL_GetTick>
 8004018:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b01      	cmp	r3, #1
 8004028:	d001      	beq.n	800402e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800402a:	2302      	movs	r3, #2
 800402c:	e12a      	b.n	8004284 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <HAL_SPI_Transmit+0x36>
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e122      	b.n	8004284 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_SPI_Transmit+0x48>
 8004048:	2302      	movs	r3, #2
 800404a:	e11b      	b.n	8004284 <HAL_SPI_Transmit+0x280>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2203      	movs	r2, #3
 8004058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	88fa      	ldrh	r2, [r7, #6]
 800406c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	88fa      	ldrh	r2, [r7, #6]
 8004072:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800409a:	d10f      	bne.n	80040bc <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c6:	2b40      	cmp	r3, #64	; 0x40
 80040c8:	d007      	beq.n	80040da <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e2:	d152      	bne.n	800418a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <HAL_SPI_Transmit+0xee>
 80040ec:	8b7b      	ldrh	r3, [r7, #26]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d145      	bne.n	800417e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	881a      	ldrh	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	1c9a      	adds	r2, r3, #2
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004116:	e032      	b.n	800417e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b02      	cmp	r3, #2
 8004124:	d112      	bne.n	800414c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	881a      	ldrh	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	1c9a      	adds	r2, r3, #2
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	86da      	strh	r2, [r3, #54]	; 0x36
 800414a:	e018      	b.n	800417e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800414c:	f7fe fa88 	bl	8002660 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d803      	bhi.n	8004164 <HAL_SPI_Transmit+0x160>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004162:	d102      	bne.n	800416a <HAL_SPI_Transmit+0x166>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e082      	b.n	8004284 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1c7      	bne.n	8004118 <HAL_SPI_Transmit+0x114>
 8004188:	e053      	b.n	8004232 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <HAL_SPI_Transmit+0x194>
 8004192:	8b7b      	ldrh	r3, [r7, #26]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d147      	bne.n	8004228 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	330c      	adds	r3, #12
 80041a2:	7812      	ldrb	r2, [r2, #0]
 80041a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041be:	e033      	b.n	8004228 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d113      	bne.n	80041f6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	330c      	adds	r3, #12
 80041d8:	7812      	ldrb	r2, [r2, #0]
 80041da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80041f4:	e018      	b.n	8004228 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041f6:	f7fe fa33 	bl	8002660 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d803      	bhi.n	800420e <HAL_SPI_Transmit+0x20a>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420c:	d102      	bne.n	8004214 <HAL_SPI_Transmit+0x210>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d109      	bne.n	8004228 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e02d      	b.n	8004284 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1c6      	bne.n	80041c0 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004232:	69fa      	ldr	r2, [r7, #28]
 8004234:	6839      	ldr	r1, [r7, #0]
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 fbd2 	bl	80049e0 <SPI_EndRxTxTransaction>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10a      	bne.n	8004266 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004250:	2300      	movs	r3, #0
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004282:	2300      	movs	r3, #0
  }
}
 8004284:	4618      	mov	r0, r3
 8004286:	3720      	adds	r7, #32
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	4613      	mov	r3, r2
 800429a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d001      	beq.n	80042ac <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80042a8:	2302      	movs	r3, #2
 80042aa:	e104      	b.n	80044b6 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b4:	d112      	bne.n	80042dc <HAL_SPI_Receive+0x50>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10e      	bne.n	80042dc <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2204      	movs	r2, #4
 80042c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80042c6:	88fa      	ldrh	r2, [r7, #6]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	4613      	mov	r3, r2
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 f8f3 	bl	80044be <HAL_SPI_TransmitReceive>
 80042d8:	4603      	mov	r3, r0
 80042da:	e0ec      	b.n	80044b6 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042dc:	f7fe f9c0 	bl	8002660 <HAL_GetTick>
 80042e0:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <HAL_SPI_Receive+0x62>
 80042e8:	88fb      	ldrh	r3, [r7, #6]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e0e1      	b.n	80044b6 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <HAL_SPI_Receive+0x74>
 80042fc:	2302      	movs	r3, #2
 80042fe:	e0da      	b.n	80044b6 <HAL_SPI_Receive+0x22a>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2204      	movs	r2, #4
 800430c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	88fa      	ldrh	r2, [r7, #6]
 8004320:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	88fa      	ldrh	r2, [r7, #6]
 8004326:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800434e:	d10f      	bne.n	8004370 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800435e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800436e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437a:	2b40      	cmp	r3, #64	; 0x40
 800437c:	d007      	beq.n	800438e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800438c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d170      	bne.n	8004478 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004396:	e035      	b.n	8004404 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d115      	bne.n	80043d2 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f103 020c 	add.w	r2, r3, #12
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b2:	7812      	ldrb	r2, [r2, #0]
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043d0:	e018      	b.n	8004404 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043d2:	f7fe f945 	bl	8002660 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d803      	bhi.n	80043ea <HAL_SPI_Receive+0x15e>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e8:	d102      	bne.n	80043f0 <HAL_SPI_Receive+0x164>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d109      	bne.n	8004404 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e058      	b.n	80044b6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1c4      	bne.n	8004398 <HAL_SPI_Receive+0x10c>
 800440e:	e038      	b.n	8004482 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b01      	cmp	r3, #1
 800441c:	d113      	bne.n	8004446 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004428:	b292      	uxth	r2, r2
 800442a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	1c9a      	adds	r2, r3, #2
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800443a:	b29b      	uxth	r3, r3
 800443c:	3b01      	subs	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004444:	e018      	b.n	8004478 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004446:	f7fe f90b 	bl	8002660 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d803      	bhi.n	800445e <HAL_SPI_Receive+0x1d2>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445c:	d102      	bne.n	8004464 <HAL_SPI_Receive+0x1d8>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d109      	bne.n	8004478 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e01e      	b.n	80044b6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1c6      	bne.n	8004410 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	6839      	ldr	r1, [r7, #0]
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fa58 	bl	800493c <SPI_EndRxTransaction>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80044b4:	2300      	movs	r3, #0
  }
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b08a      	sub	sp, #40	; 0x28
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
 80044ca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044cc:	2301      	movs	r3, #1
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044d0:	f7fe f8c6 	bl	8002660 <HAL_GetTick>
 80044d4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044dc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80044e4:	887b      	ldrh	r3, [r7, #2]
 80044e6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044e8:	7ffb      	ldrb	r3, [r7, #31]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d00c      	beq.n	8004508 <HAL_SPI_TransmitReceive+0x4a>
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044f4:	d106      	bne.n	8004504 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d102      	bne.n	8004504 <HAL_SPI_TransmitReceive+0x46>
 80044fe:	7ffb      	ldrb	r3, [r7, #31]
 8004500:	2b04      	cmp	r3, #4
 8004502:	d001      	beq.n	8004508 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004504:	2302      	movs	r3, #2
 8004506:	e17f      	b.n	8004808 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d005      	beq.n	800451a <HAL_SPI_TransmitReceive+0x5c>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <HAL_SPI_TransmitReceive+0x5c>
 8004514:	887b      	ldrh	r3, [r7, #2]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e174      	b.n	8004808 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_SPI_TransmitReceive+0x6e>
 8004528:	2302      	movs	r3, #2
 800452a:	e16d      	b.n	8004808 <HAL_SPI_TransmitReceive+0x34a>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b04      	cmp	r3, #4
 800453e:	d003      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2205      	movs	r2, #5
 8004544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	887a      	ldrh	r2, [r7, #2]
 8004558:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	887a      	ldrh	r2, [r7, #2]
 800455e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	887a      	ldrh	r2, [r7, #2]
 800456a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	887a      	ldrh	r2, [r7, #2]
 8004570:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004588:	2b40      	cmp	r3, #64	; 0x40
 800458a:	d007      	beq.n	800459c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800459a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a4:	d17e      	bne.n	80046a4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <HAL_SPI_TransmitReceive+0xf6>
 80045ae:	8afb      	ldrh	r3, [r7, #22]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d16c      	bne.n	800468e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	881a      	ldrh	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	1c9a      	adds	r2, r3, #2
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045d8:	e059      	b.n	800468e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d11b      	bne.n	8004620 <HAL_SPI_TransmitReceive+0x162>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d016      	beq.n	8004620 <HAL_SPI_TransmitReceive+0x162>
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d113      	bne.n	8004620 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	881a      	ldrh	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004608:	1c9a      	adds	r2, r3, #2
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b01      	cmp	r3, #1
 800462c:	d119      	bne.n	8004662 <HAL_SPI_TransmitReceive+0x1a4>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d014      	beq.n	8004662 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	b292      	uxth	r2, r2
 8004644:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	1c9a      	adds	r2, r3, #2
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800465e:	2301      	movs	r3, #1
 8004660:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004662:	f7fd fffd 	bl	8002660 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800466e:	429a      	cmp	r2, r3
 8004670:	d80d      	bhi.n	800468e <HAL_SPI_TransmitReceive+0x1d0>
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004678:	d009      	beq.n	800468e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e0bc      	b.n	8004808 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1a0      	bne.n	80045da <HAL_SPI_TransmitReceive+0x11c>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d19b      	bne.n	80045da <HAL_SPI_TransmitReceive+0x11c>
 80046a2:	e082      	b.n	80047aa <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <HAL_SPI_TransmitReceive+0x1f4>
 80046ac:	8afb      	ldrh	r3, [r7, #22]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d171      	bne.n	8004796 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	330c      	adds	r3, #12
 80046bc:	7812      	ldrb	r2, [r2, #0]
 80046be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046d8:	e05d      	b.n	8004796 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d11c      	bne.n	8004722 <HAL_SPI_TransmitReceive+0x264>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d017      	beq.n	8004722 <HAL_SPI_TransmitReceive+0x264>
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d114      	bne.n	8004722 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	330c      	adds	r3, #12
 8004702:	7812      	ldrb	r2, [r2, #0]
 8004704:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004714:	b29b      	uxth	r3, r3
 8004716:	3b01      	subs	r3, #1
 8004718:	b29a      	uxth	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b01      	cmp	r3, #1
 800472e:	d119      	bne.n	8004764 <HAL_SPI_TransmitReceive+0x2a6>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d014      	beq.n	8004764 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004756:	b29b      	uxth	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004760:	2301      	movs	r3, #1
 8004762:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004764:	f7fd ff7c 	bl	8002660 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004770:	429a      	cmp	r2, r3
 8004772:	d803      	bhi.n	800477c <HAL_SPI_TransmitReceive+0x2be>
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477a:	d102      	bne.n	8004782 <HAL_SPI_TransmitReceive+0x2c4>
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	2b00      	cmp	r3, #0
 8004780:	d109      	bne.n	8004796 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e038      	b.n	8004808 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800479a:	b29b      	uxth	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d19c      	bne.n	80046da <HAL_SPI_TransmitReceive+0x21c>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d197      	bne.n	80046da <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047aa:	6a3a      	ldr	r2, [r7, #32]
 80047ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 f916 	bl	80049e0 <SPI_EndRxTxTransaction>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d008      	beq.n	80047cc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2220      	movs	r2, #32
 80047be:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e01d      	b.n	8004808 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10a      	bne.n	80047ea <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047d4:	2300      	movs	r3, #0
 80047d6:	613b      	str	r3, [r7, #16]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	613b      	str	r3, [r7, #16]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004806:	2300      	movs	r3, #0
  }
}
 8004808:	4618      	mov	r0, r3
 800480a:	3728      	adds	r7, #40	; 0x28
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800481e:	b2db      	uxtb	r3, r3
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr
	...

0800482c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	4613      	mov	r3, r2
 800483a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800483c:	f7fd ff10 	bl	8002660 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004844:	1a9b      	subs	r3, r3, r2
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	4413      	add	r3, r2
 800484a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800484c:	f7fd ff08 	bl	8002660 <HAL_GetTick>
 8004850:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004852:	4b39      	ldr	r3, [pc, #228]	; (8004938 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	015b      	lsls	r3, r3, #5
 8004858:	0d1b      	lsrs	r3, r3, #20
 800485a:	69fa      	ldr	r2, [r7, #28]
 800485c:	fb02 f303 	mul.w	r3, r2, r3
 8004860:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004862:	e054      	b.n	800490e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486a:	d050      	beq.n	800490e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800486c:	f7fd fef8 	bl	8002660 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	69fa      	ldr	r2, [r7, #28]
 8004878:	429a      	cmp	r2, r3
 800487a:	d902      	bls.n	8004882 <SPI_WaitFlagStateUntilTimeout+0x56>
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d13d      	bne.n	80048fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004890:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800489a:	d111      	bne.n	80048c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a4:	d004      	beq.n	80048b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ae:	d107      	bne.n	80048c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c8:	d10f      	bne.n	80048ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e017      	b.n	800492e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	3b01      	subs	r3, #1
 800490c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4013      	ands	r3, r2
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	429a      	cmp	r2, r3
 800491c:	bf0c      	ite	eq
 800491e:	2301      	moveq	r3, #1
 8004920:	2300      	movne	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	461a      	mov	r2, r3
 8004926:	79fb      	ldrb	r3, [r7, #7]
 8004928:	429a      	cmp	r2, r3
 800492a:	d19b      	bne.n	8004864 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3720      	adds	r7, #32
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20000004 	.word	0x20000004

0800493c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af02      	add	r7, sp, #8
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004950:	d111      	bne.n	8004976 <SPI_EndRxTransaction+0x3a>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800495a:	d004      	beq.n	8004966 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004964:	d107      	bne.n	8004976 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004974:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800497e:	d117      	bne.n	80049b0 <SPI_EndRxTransaction+0x74>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004988:	d112      	bne.n	80049b0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2200      	movs	r2, #0
 8004992:	2101      	movs	r1, #1
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f7ff ff49 	bl	800482c <SPI_WaitFlagStateUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01a      	beq.n	80049d6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a4:	f043 0220 	orr.w	r2, r3, #32
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e013      	b.n	80049d8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2200      	movs	r2, #0
 80049b8:	2180      	movs	r1, #128	; 0x80
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f7ff ff36 	bl	800482c <SPI_WaitFlagStateUntilTimeout>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d007      	beq.n	80049d6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ca:	f043 0220 	orr.w	r2, r3, #32
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e000      	b.n	80049d8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2201      	movs	r2, #1
 80049f4:	2102      	movs	r1, #2
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f7ff ff18 	bl	800482c <SPI_WaitFlagStateUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d007      	beq.n	8004a12 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a06:	f043 0220 	orr.w	r2, r3, #32
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e013      	b.n	8004a3a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2180      	movs	r1, #128	; 0x80
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f7ff ff05 	bl	800482c <SPI_WaitFlagStateUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d007      	beq.n	8004a38 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	f043 0220 	orr.w	r2, r3, #32
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e000      	b.n	8004a3a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e042      	b.n	8004ada <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d106      	bne.n	8004a6e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7fd fc91 	bl	8002390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2224      	movs	r2, #36	; 0x24
 8004a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a84:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fd0a 	bl	80054a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a9a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695a      	ldr	r2, [r3, #20]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aaa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004aba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	60b9      	str	r1, [r7, #8]
 8004aec:	4613      	mov	r3, r2
 8004aee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d121      	bne.n	8004b40 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <HAL_UART_Transmit_IT+0x26>
 8004b02:	88fb      	ldrh	r3, [r7, #6]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e01a      	b.n	8004b42 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	88fa      	ldrh	r2, [r7, #6]
 8004b16:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	88fa      	ldrh	r2, [r7, #6]
 8004b1c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2221      	movs	r2, #33	; 0x21
 8004b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b3a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	e000      	b.n	8004b42 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004b40:	2302      	movs	r3, #2
  }
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr

08004b4c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	4613      	mov	r3, r2
 8004b58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d112      	bne.n	8004b8c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <HAL_UART_Receive_IT+0x26>
 8004b6c:	88fb      	ldrh	r3, [r7, #6]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e00b      	b.n	8004b8e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b7c:	88fb      	ldrh	r3, [r7, #6]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fab7 	bl	80050f6 <UART_Start_Receive_IT>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	e000      	b.n	8004b8e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004b8c:	2302      	movs	r3, #2
  }
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b0ba      	sub	sp, #232	; 0xe8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10f      	bne.n	8004bfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d009      	beq.n	8004bfe <HAL_UART_IRQHandler+0x66>
 8004bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fb93 	bl	8005322 <UART_Receive_IT>
      return;
 8004bfc:	e25b      	b.n	80050b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 80de 	beq.w	8004dc4 <HAL_UART_IRQHandler+0x22c>
 8004c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d106      	bne.n	8004c22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 80d1 	beq.w	8004dc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00b      	beq.n	8004c46 <HAL_UART_IRQHandler+0xae>
 8004c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3e:	f043 0201 	orr.w	r2, r3, #1
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00b      	beq.n	8004c6a <HAL_UART_IRQHandler+0xd2>
 8004c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d005      	beq.n	8004c6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c62:	f043 0202 	orr.w	r2, r3, #2
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00b      	beq.n	8004c8e <HAL_UART_IRQHandler+0xf6>
 8004c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c86:	f043 0204 	orr.w	r2, r3, #4
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c92:	f003 0308 	and.w	r3, r3, #8
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d011      	beq.n	8004cbe <HAL_UART_IRQHandler+0x126>
 8004c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d105      	bne.n	8004cb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d005      	beq.n	8004cbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb6:	f043 0208 	orr.w	r2, r3, #8
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 81f2 	beq.w	80050ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x14e>
 8004cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cd8:	f003 0320 	and.w	r3, r3, #32
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fb1e 	bl	8005322 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	bf14      	ite	ne
 8004cf4:	2301      	movne	r3, #1
 8004cf6:	2300      	moveq	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d103      	bne.n	8004d12 <HAL_UART_IRQHandler+0x17a>
 8004d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d04f      	beq.n	8004db2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fa28 	bl	8005168 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d041      	beq.n	8004daa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3314      	adds	r3, #20
 8004d2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d34:	e853 3f00 	ldrex	r3, [r3]
 8004d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3314      	adds	r3, #20
 8004d4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d62:	e841 2300 	strex	r3, r2, [r1]
 8004d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1d9      	bne.n	8004d26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d013      	beq.n	8004da2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7e:	4a7e      	ldr	r2, [pc, #504]	; (8004f78 <HAL_UART_IRQHandler+0x3e0>)
 8004d80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fd fde0 	bl	800294c <HAL_DMA_Abort_IT>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d016      	beq.n	8004dc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da0:	e00e      	b.n	8004dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f993 	bl	80050ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da8:	e00a      	b.n	8004dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f98f 	bl	80050ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db0:	e006      	b.n	8004dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f98b 	bl	80050ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004dbe:	e175      	b.n	80050ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc0:	bf00      	nop
    return;
 8004dc2:	e173      	b.n	80050ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	f040 814f 	bne.w	800506c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd2:	f003 0310 	and.w	r3, r3, #16
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 8148 	beq.w	800506c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de0:	f003 0310 	and.w	r3, r3, #16
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 8141 	beq.w	800506c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dea:	2300      	movs	r3, #0
 8004dec:	60bb      	str	r3, [r7, #8]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	60bb      	str	r3, [r7, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	60bb      	str	r3, [r7, #8]
 8004dfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 80b6 	beq.w	8004f7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 8145 	beq.w	80050b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	f080 813e 	bcs.w	80050b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	f000 8088 	beq.w	8004f58 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	330c      	adds	r3, #12
 8004e4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e56:	e853 3f00 	ldrex	r3, [r3]
 8004e5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	330c      	adds	r3, #12
 8004e70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004e74:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e84:	e841 2300 	strex	r3, r2, [r1]
 8004e88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1d9      	bne.n	8004e48 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3314      	adds	r3, #20
 8004e9a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ea4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ea6:	f023 0301 	bic.w	r3, r3, #1
 8004eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3314      	adds	r3, #20
 8004eb4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004eb8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ebc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ec0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ec4:	e841 2300 	strex	r3, r2, [r1]
 8004ec8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004eca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1e1      	bne.n	8004e94 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3314      	adds	r3, #20
 8004ed6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eda:	e853 3f00 	ldrex	r3, [r3]
 8004ede:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3314      	adds	r3, #20
 8004ef0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ef4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ef6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004efa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004efc:	e841 2300 	strex	r3, r2, [r1]
 8004f00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1e3      	bne.n	8004ed0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	330c      	adds	r3, #12
 8004f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f20:	e853 3f00 	ldrex	r3, [r3]
 8004f24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f28:	f023 0310 	bic.w	r3, r3, #16
 8004f2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	330c      	adds	r3, #12
 8004f36:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f3c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f42:	e841 2300 	strex	r3, r2, [r1]
 8004f46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1e3      	bne.n	8004f16 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fd fcbf 	bl	80028d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f8b6 	bl	80050e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f74:	e09c      	b.n	80050b0 <HAL_UART_IRQHandler+0x518>
 8004f76:	bf00      	nop
 8004f78:	0800522d 	.word	0x0800522d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 808e 	beq.w	80050b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004f98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 8089 	beq.w	80050b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	330c      	adds	r3, #12
 8004fa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	e853 3f00 	ldrex	r3, [r3]
 8004fb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	330c      	adds	r3, #12
 8004fc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004fc6:	647a      	str	r2, [r7, #68]	; 0x44
 8004fc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fce:	e841 2300 	strex	r3, r2, [r1]
 8004fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1e3      	bne.n	8004fa2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3314      	adds	r3, #20
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	e853 3f00 	ldrex	r3, [r3]
 8004fe8:	623b      	str	r3, [r7, #32]
   return(result);
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	f023 0301 	bic.w	r3, r3, #1
 8004ff0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	3314      	adds	r3, #20
 8004ffa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ffe:	633a      	str	r2, [r7, #48]	; 0x30
 8005000:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005002:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005006:	e841 2300 	strex	r3, r2, [r1]
 800500a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1e3      	bne.n	8004fda <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2220      	movs	r2, #32
 8005016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	330c      	adds	r3, #12
 8005026:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	e853 3f00 	ldrex	r3, [r3]
 800502e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0310 	bic.w	r3, r3, #16
 8005036:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	330c      	adds	r3, #12
 8005040:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005044:	61fa      	str	r2, [r7, #28]
 8005046:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005048:	69b9      	ldr	r1, [r7, #24]
 800504a:	69fa      	ldr	r2, [r7, #28]
 800504c:	e841 2300 	strex	r3, r2, [r1]
 8005050:	617b      	str	r3, [r7, #20]
   return(result);
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1e3      	bne.n	8005020 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800505e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005062:	4619      	mov	r1, r3
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f83b 	bl	80050e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800506a:	e023      	b.n	80050b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800506c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005074:	2b00      	cmp	r3, #0
 8005076:	d009      	beq.n	800508c <HAL_UART_IRQHandler+0x4f4>
 8005078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800507c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f8e5 	bl	8005254 <UART_Transmit_IT>
    return;
 800508a:	e014      	b.n	80050b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800508c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00e      	beq.n	80050b6 <HAL_UART_IRQHandler+0x51e>
 8005098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800509c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d008      	beq.n	80050b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f924 	bl	80052f2 <UART_EndTransmit_IT>
    return;
 80050aa:	e004      	b.n	80050b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80050ac:	bf00      	nop
 80050ae:	e002      	b.n	80050b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80050b0:	bf00      	nop
 80050b2:	e000      	b.n	80050b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80050b4:	bf00      	nop
  }
}
 80050b6:	37e8      	adds	r7, #232	; 0xe8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bc80      	pop	{r7}
 80050cc:	4770      	bx	lr

080050ce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr

080050e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	460b      	mov	r3, r1
 80050ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bc80      	pop	{r7}
 80050f4:	4770      	bx	lr

080050f6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b085      	sub	sp, #20
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	4613      	mov	r3, r2
 8005102:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	88fa      	ldrh	r2, [r7, #6]
 800510e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	88fa      	ldrh	r2, [r7, #6]
 8005114:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2222      	movs	r2, #34	; 0x22
 8005120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800513a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695a      	ldr	r2, [r3, #20]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0220 	orr.w	r2, r2, #32
 800515a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	bc80      	pop	{r7}
 8005166:	4770      	bx	lr

08005168 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005168:	b480      	push	{r7}
 800516a:	b095      	sub	sp, #84	; 0x54
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	330c      	adds	r3, #12
 8005176:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517a:	e853 3f00 	ldrex	r3, [r3]
 800517e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005182:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	330c      	adds	r3, #12
 800518e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005190:	643a      	str	r2, [r7, #64]	; 0x40
 8005192:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005194:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005196:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005198:	e841 2300 	strex	r3, r2, [r1]
 800519c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800519e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1e5      	bne.n	8005170 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3314      	adds	r3, #20
 80051aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	e853 3f00 	ldrex	r3, [r3]
 80051b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	f023 0301 	bic.w	r3, r3, #1
 80051ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3314      	adds	r3, #20
 80051c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051cc:	e841 2300 	strex	r3, r2, [r1]
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1e5      	bne.n	80051a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d119      	bne.n	8005214 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	330c      	adds	r3, #12
 80051e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	e853 3f00 	ldrex	r3, [r3]
 80051ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f023 0310 	bic.w	r3, r3, #16
 80051f6:	647b      	str	r3, [r7, #68]	; 0x44
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	330c      	adds	r3, #12
 80051fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005200:	61ba      	str	r2, [r7, #24]
 8005202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	6979      	ldr	r1, [r7, #20]
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	e841 2300 	strex	r3, r2, [r1]
 800520c:	613b      	str	r3, [r7, #16]
   return(result);
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e5      	bne.n	80051e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005222:	bf00      	nop
 8005224:	3754      	adds	r7, #84	; 0x54
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr

0800522c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f7ff ff41 	bl	80050ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800524c:	bf00      	nop
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b21      	cmp	r3, #33	; 0x21
 8005266:	d13e      	bne.n	80052e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005270:	d114      	bne.n	800529c <UART_Transmit_IT+0x48>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d110      	bne.n	800529c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	461a      	mov	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800528e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	1c9a      	adds	r2, r3, #2
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	621a      	str	r2, [r3, #32]
 800529a:	e008      	b.n	80052ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	1c59      	adds	r1, r3, #1
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6211      	str	r1, [r2, #32]
 80052a6:	781a      	ldrb	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	4619      	mov	r1, r3
 80052bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10f      	bne.n	80052e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68da      	ldr	r2, [r3, #12]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	e000      	b.n	80052e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052e6:	2302      	movs	r3, #2
  }
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bc80      	pop	{r7}
 80052f0:	4770      	bx	lr

080052f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005308:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7ff fed2 	bl	80050bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b08c      	sub	sp, #48	; 0x30
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b22      	cmp	r3, #34	; 0x22
 8005334:	f040 80ae 	bne.w	8005494 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005340:	d117      	bne.n	8005372 <UART_Receive_IT+0x50>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d113      	bne.n	8005372 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800534a:	2300      	movs	r3, #0
 800534c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005352:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	b29b      	uxth	r3, r3
 800535c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005360:	b29a      	uxth	r2, r3
 8005362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005364:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536a:	1c9a      	adds	r2, r3, #2
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	629a      	str	r2, [r3, #40]	; 0x28
 8005370:	e026      	b.n	80053c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005376:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005378:	2300      	movs	r3, #0
 800537a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005384:	d007      	beq.n	8005396 <UART_Receive_IT+0x74>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10a      	bne.n	80053a4 <UART_Receive_IT+0x82>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	b2da      	uxtb	r2, r3
 800539e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a0:	701a      	strb	r2, [r3, #0]
 80053a2:	e008      	b.n	80053b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ba:	1c5a      	adds	r2, r3, #1
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	3b01      	subs	r3, #1
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	4619      	mov	r1, r3
 80053ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d15d      	bne.n	8005490 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0220 	bic.w	r2, r2, #32
 80053e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695a      	ldr	r2, [r3, #20]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0201 	bic.w	r2, r2, #1
 8005402:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	2b01      	cmp	r3, #1
 8005418:	d135      	bne.n	8005486 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	330c      	adds	r3, #12
 8005426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	613b      	str	r3, [r7, #16]
   return(result);
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f023 0310 	bic.w	r3, r3, #16
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	330c      	adds	r3, #12
 800543e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005440:	623a      	str	r2, [r7, #32]
 8005442:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005444:	69f9      	ldr	r1, [r7, #28]
 8005446:	6a3a      	ldr	r2, [r7, #32]
 8005448:	e841 2300 	strex	r3, r2, [r1]
 800544c:	61bb      	str	r3, [r7, #24]
   return(result);
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e5      	bne.n	8005420 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0310 	and.w	r3, r3, #16
 800545e:	2b10      	cmp	r3, #16
 8005460:	d10a      	bne.n	8005478 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005462:	2300      	movs	r3, #0
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800547c:	4619      	mov	r1, r3
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7ff fe2e 	bl	80050e0 <HAL_UARTEx_RxEventCallback>
 8005484:	e002      	b.n	800548c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7fc fe0c 	bl	80020a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	e002      	b.n	8005496 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	e000      	b.n	8005496 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005494:	2302      	movs	r3, #2
  }
}
 8005496:	4618      	mov	r0, r3
 8005498:	3730      	adds	r7, #48	; 0x30
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
	...

080054a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80054da:	f023 030c 	bic.w	r3, r3, #12
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6812      	ldr	r2, [r2, #0]
 80054e2:	68b9      	ldr	r1, [r7, #8]
 80054e4:	430b      	orrs	r3, r1
 80054e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a2c      	ldr	r2, [pc, #176]	; (80055b4 <UART_SetConfig+0x114>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d103      	bne.n	8005510 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005508:	f7fe fcc6 	bl	8003e98 <HAL_RCC_GetPCLK2Freq>
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	e002      	b.n	8005516 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005510:	f7fe fcae 	bl	8003e70 <HAL_RCC_GetPCLK1Freq>
 8005514:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4613      	mov	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	009a      	lsls	r2, r3, #2
 8005520:	441a      	add	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	fbb2 f3f3 	udiv	r3, r2, r3
 800552c:	4a22      	ldr	r2, [pc, #136]	; (80055b8 <UART_SetConfig+0x118>)
 800552e:	fba2 2303 	umull	r2, r3, r2, r3
 8005532:	095b      	lsrs	r3, r3, #5
 8005534:	0119      	lsls	r1, r3, #4
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4613      	mov	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	009a      	lsls	r2, r3, #2
 8005540:	441a      	add	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	fbb2 f2f3 	udiv	r2, r2, r3
 800554c:	4b1a      	ldr	r3, [pc, #104]	; (80055b8 <UART_SetConfig+0x118>)
 800554e:	fba3 0302 	umull	r0, r3, r3, r2
 8005552:	095b      	lsrs	r3, r3, #5
 8005554:	2064      	movs	r0, #100	; 0x64
 8005556:	fb00 f303 	mul.w	r3, r0, r3
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	3332      	adds	r3, #50	; 0x32
 8005560:	4a15      	ldr	r2, [pc, #84]	; (80055b8 <UART_SetConfig+0x118>)
 8005562:	fba2 2303 	umull	r2, r3, r2, r3
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800556c:	4419      	add	r1, r3
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	009a      	lsls	r2, r3, #2
 8005578:	441a      	add	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	fbb2 f2f3 	udiv	r2, r2, r3
 8005584:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <UART_SetConfig+0x118>)
 8005586:	fba3 0302 	umull	r0, r3, r3, r2
 800558a:	095b      	lsrs	r3, r3, #5
 800558c:	2064      	movs	r0, #100	; 0x64
 800558e:	fb00 f303 	mul.w	r3, r0, r3
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	3332      	adds	r3, #50	; 0x32
 8005598:	4a07      	ldr	r2, [pc, #28]	; (80055b8 <UART_SetConfig+0x118>)
 800559a:	fba2 2303 	umull	r2, r3, r2, r3
 800559e:	095b      	lsrs	r3, r3, #5
 80055a0:	f003 020f 	and.w	r2, r3, #15
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	440a      	add	r2, r1
 80055aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80055ac:	bf00      	nop
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40013800 	.word	0x40013800
 80055b8:	51eb851f 	.word	0x51eb851f

080055bc <siprintf>:
 80055bc:	b40e      	push	{r1, r2, r3}
 80055be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055c2:	b500      	push	{lr}
 80055c4:	b09c      	sub	sp, #112	; 0x70
 80055c6:	ab1d      	add	r3, sp, #116	; 0x74
 80055c8:	9002      	str	r0, [sp, #8]
 80055ca:	9006      	str	r0, [sp, #24]
 80055cc:	9107      	str	r1, [sp, #28]
 80055ce:	9104      	str	r1, [sp, #16]
 80055d0:	4808      	ldr	r0, [pc, #32]	; (80055f4 <siprintf+0x38>)
 80055d2:	4909      	ldr	r1, [pc, #36]	; (80055f8 <siprintf+0x3c>)
 80055d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055d8:	9105      	str	r1, [sp, #20]
 80055da:	6800      	ldr	r0, [r0, #0]
 80055dc:	a902      	add	r1, sp, #8
 80055de:	9301      	str	r3, [sp, #4]
 80055e0:	f000 f99c 	bl	800591c <_svfiprintf_r>
 80055e4:	2200      	movs	r2, #0
 80055e6:	9b02      	ldr	r3, [sp, #8]
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	b01c      	add	sp, #112	; 0x70
 80055ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80055f0:	b003      	add	sp, #12
 80055f2:	4770      	bx	lr
 80055f4:	2000005c 	.word	0x2000005c
 80055f8:	ffff0208 	.word	0xffff0208

080055fc <memset>:
 80055fc:	4603      	mov	r3, r0
 80055fe:	4402      	add	r2, r0
 8005600:	4293      	cmp	r3, r2
 8005602:	d100      	bne.n	8005606 <memset+0xa>
 8005604:	4770      	bx	lr
 8005606:	f803 1b01 	strb.w	r1, [r3], #1
 800560a:	e7f9      	b.n	8005600 <memset+0x4>

0800560c <__errno>:
 800560c:	4b01      	ldr	r3, [pc, #4]	; (8005614 <__errno+0x8>)
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	2000005c 	.word	0x2000005c

08005618 <__libc_init_array>:
 8005618:	b570      	push	{r4, r5, r6, lr}
 800561a:	2600      	movs	r6, #0
 800561c:	4d0c      	ldr	r5, [pc, #48]	; (8005650 <__libc_init_array+0x38>)
 800561e:	4c0d      	ldr	r4, [pc, #52]	; (8005654 <__libc_init_array+0x3c>)
 8005620:	1b64      	subs	r4, r4, r5
 8005622:	10a4      	asrs	r4, r4, #2
 8005624:	42a6      	cmp	r6, r4
 8005626:	d109      	bne.n	800563c <__libc_init_array+0x24>
 8005628:	f000 fc7a 	bl	8005f20 <_init>
 800562c:	2600      	movs	r6, #0
 800562e:	4d0a      	ldr	r5, [pc, #40]	; (8005658 <__libc_init_array+0x40>)
 8005630:	4c0a      	ldr	r4, [pc, #40]	; (800565c <__libc_init_array+0x44>)
 8005632:	1b64      	subs	r4, r4, r5
 8005634:	10a4      	asrs	r4, r4, #2
 8005636:	42a6      	cmp	r6, r4
 8005638:	d105      	bne.n	8005646 <__libc_init_array+0x2e>
 800563a:	bd70      	pop	{r4, r5, r6, pc}
 800563c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005640:	4798      	blx	r3
 8005642:	3601      	adds	r6, #1
 8005644:	e7ee      	b.n	8005624 <__libc_init_array+0xc>
 8005646:	f855 3b04 	ldr.w	r3, [r5], #4
 800564a:	4798      	blx	r3
 800564c:	3601      	adds	r6, #1
 800564e:	e7f2      	b.n	8005636 <__libc_init_array+0x1e>
 8005650:	08006110 	.word	0x08006110
 8005654:	08006110 	.word	0x08006110
 8005658:	08006110 	.word	0x08006110
 800565c:	08006114 	.word	0x08006114

08005660 <__retarget_lock_acquire_recursive>:
 8005660:	4770      	bx	lr

08005662 <__retarget_lock_release_recursive>:
 8005662:	4770      	bx	lr

08005664 <memcpy>:
 8005664:	440a      	add	r2, r1
 8005666:	4291      	cmp	r1, r2
 8005668:	f100 33ff 	add.w	r3, r0, #4294967295
 800566c:	d100      	bne.n	8005670 <memcpy+0xc>
 800566e:	4770      	bx	lr
 8005670:	b510      	push	{r4, lr}
 8005672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005676:	4291      	cmp	r1, r2
 8005678:	f803 4f01 	strb.w	r4, [r3, #1]!
 800567c:	d1f9      	bne.n	8005672 <memcpy+0xe>
 800567e:	bd10      	pop	{r4, pc}

08005680 <_free_r>:
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	4605      	mov	r5, r0
 8005684:	2900      	cmp	r1, #0
 8005686:	d040      	beq.n	800570a <_free_r+0x8a>
 8005688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800568c:	1f0c      	subs	r4, r1, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	bfb8      	it	lt
 8005692:	18e4      	addlt	r4, r4, r3
 8005694:	f000 f8dc 	bl	8005850 <__malloc_lock>
 8005698:	4a1c      	ldr	r2, [pc, #112]	; (800570c <_free_r+0x8c>)
 800569a:	6813      	ldr	r3, [r2, #0]
 800569c:	b933      	cbnz	r3, 80056ac <_free_r+0x2c>
 800569e:	6063      	str	r3, [r4, #4]
 80056a0:	6014      	str	r4, [r2, #0]
 80056a2:	4628      	mov	r0, r5
 80056a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056a8:	f000 b8d8 	b.w	800585c <__malloc_unlock>
 80056ac:	42a3      	cmp	r3, r4
 80056ae:	d908      	bls.n	80056c2 <_free_r+0x42>
 80056b0:	6820      	ldr	r0, [r4, #0]
 80056b2:	1821      	adds	r1, r4, r0
 80056b4:	428b      	cmp	r3, r1
 80056b6:	bf01      	itttt	eq
 80056b8:	6819      	ldreq	r1, [r3, #0]
 80056ba:	685b      	ldreq	r3, [r3, #4]
 80056bc:	1809      	addeq	r1, r1, r0
 80056be:	6021      	streq	r1, [r4, #0]
 80056c0:	e7ed      	b.n	800569e <_free_r+0x1e>
 80056c2:	461a      	mov	r2, r3
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	b10b      	cbz	r3, 80056cc <_free_r+0x4c>
 80056c8:	42a3      	cmp	r3, r4
 80056ca:	d9fa      	bls.n	80056c2 <_free_r+0x42>
 80056cc:	6811      	ldr	r1, [r2, #0]
 80056ce:	1850      	adds	r0, r2, r1
 80056d0:	42a0      	cmp	r0, r4
 80056d2:	d10b      	bne.n	80056ec <_free_r+0x6c>
 80056d4:	6820      	ldr	r0, [r4, #0]
 80056d6:	4401      	add	r1, r0
 80056d8:	1850      	adds	r0, r2, r1
 80056da:	4283      	cmp	r3, r0
 80056dc:	6011      	str	r1, [r2, #0]
 80056de:	d1e0      	bne.n	80056a2 <_free_r+0x22>
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	4408      	add	r0, r1
 80056e6:	6010      	str	r0, [r2, #0]
 80056e8:	6053      	str	r3, [r2, #4]
 80056ea:	e7da      	b.n	80056a2 <_free_r+0x22>
 80056ec:	d902      	bls.n	80056f4 <_free_r+0x74>
 80056ee:	230c      	movs	r3, #12
 80056f0:	602b      	str	r3, [r5, #0]
 80056f2:	e7d6      	b.n	80056a2 <_free_r+0x22>
 80056f4:	6820      	ldr	r0, [r4, #0]
 80056f6:	1821      	adds	r1, r4, r0
 80056f8:	428b      	cmp	r3, r1
 80056fa:	bf01      	itttt	eq
 80056fc:	6819      	ldreq	r1, [r3, #0]
 80056fe:	685b      	ldreq	r3, [r3, #4]
 8005700:	1809      	addeq	r1, r1, r0
 8005702:	6021      	streq	r1, [r4, #0]
 8005704:	6063      	str	r3, [r4, #4]
 8005706:	6054      	str	r4, [r2, #4]
 8005708:	e7cb      	b.n	80056a2 <_free_r+0x22>
 800570a:	bd38      	pop	{r3, r4, r5, pc}
 800570c:	20000334 	.word	0x20000334

08005710 <sbrk_aligned>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	4e0e      	ldr	r6, [pc, #56]	; (800574c <sbrk_aligned+0x3c>)
 8005714:	460c      	mov	r4, r1
 8005716:	6831      	ldr	r1, [r6, #0]
 8005718:	4605      	mov	r5, r0
 800571a:	b911      	cbnz	r1, 8005722 <sbrk_aligned+0x12>
 800571c:	f000 fbaa 	bl	8005e74 <_sbrk_r>
 8005720:	6030      	str	r0, [r6, #0]
 8005722:	4621      	mov	r1, r4
 8005724:	4628      	mov	r0, r5
 8005726:	f000 fba5 	bl	8005e74 <_sbrk_r>
 800572a:	1c43      	adds	r3, r0, #1
 800572c:	d00a      	beq.n	8005744 <sbrk_aligned+0x34>
 800572e:	1cc4      	adds	r4, r0, #3
 8005730:	f024 0403 	bic.w	r4, r4, #3
 8005734:	42a0      	cmp	r0, r4
 8005736:	d007      	beq.n	8005748 <sbrk_aligned+0x38>
 8005738:	1a21      	subs	r1, r4, r0
 800573a:	4628      	mov	r0, r5
 800573c:	f000 fb9a 	bl	8005e74 <_sbrk_r>
 8005740:	3001      	adds	r0, #1
 8005742:	d101      	bne.n	8005748 <sbrk_aligned+0x38>
 8005744:	f04f 34ff 	mov.w	r4, #4294967295
 8005748:	4620      	mov	r0, r4
 800574a:	bd70      	pop	{r4, r5, r6, pc}
 800574c:	20000338 	.word	0x20000338

08005750 <_malloc_r>:
 8005750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005754:	1ccd      	adds	r5, r1, #3
 8005756:	f025 0503 	bic.w	r5, r5, #3
 800575a:	3508      	adds	r5, #8
 800575c:	2d0c      	cmp	r5, #12
 800575e:	bf38      	it	cc
 8005760:	250c      	movcc	r5, #12
 8005762:	2d00      	cmp	r5, #0
 8005764:	4607      	mov	r7, r0
 8005766:	db01      	blt.n	800576c <_malloc_r+0x1c>
 8005768:	42a9      	cmp	r1, r5
 800576a:	d905      	bls.n	8005778 <_malloc_r+0x28>
 800576c:	230c      	movs	r3, #12
 800576e:	2600      	movs	r6, #0
 8005770:	603b      	str	r3, [r7, #0]
 8005772:	4630      	mov	r0, r6
 8005774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005778:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800584c <_malloc_r+0xfc>
 800577c:	f000 f868 	bl	8005850 <__malloc_lock>
 8005780:	f8d8 3000 	ldr.w	r3, [r8]
 8005784:	461c      	mov	r4, r3
 8005786:	bb5c      	cbnz	r4, 80057e0 <_malloc_r+0x90>
 8005788:	4629      	mov	r1, r5
 800578a:	4638      	mov	r0, r7
 800578c:	f7ff ffc0 	bl	8005710 <sbrk_aligned>
 8005790:	1c43      	adds	r3, r0, #1
 8005792:	4604      	mov	r4, r0
 8005794:	d155      	bne.n	8005842 <_malloc_r+0xf2>
 8005796:	f8d8 4000 	ldr.w	r4, [r8]
 800579a:	4626      	mov	r6, r4
 800579c:	2e00      	cmp	r6, #0
 800579e:	d145      	bne.n	800582c <_malloc_r+0xdc>
 80057a0:	2c00      	cmp	r4, #0
 80057a2:	d048      	beq.n	8005836 <_malloc_r+0xe6>
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	4631      	mov	r1, r6
 80057a8:	4638      	mov	r0, r7
 80057aa:	eb04 0903 	add.w	r9, r4, r3
 80057ae:	f000 fb61 	bl	8005e74 <_sbrk_r>
 80057b2:	4581      	cmp	r9, r0
 80057b4:	d13f      	bne.n	8005836 <_malloc_r+0xe6>
 80057b6:	6821      	ldr	r1, [r4, #0]
 80057b8:	4638      	mov	r0, r7
 80057ba:	1a6d      	subs	r5, r5, r1
 80057bc:	4629      	mov	r1, r5
 80057be:	f7ff ffa7 	bl	8005710 <sbrk_aligned>
 80057c2:	3001      	adds	r0, #1
 80057c4:	d037      	beq.n	8005836 <_malloc_r+0xe6>
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	442b      	add	r3, r5
 80057ca:	6023      	str	r3, [r4, #0]
 80057cc:	f8d8 3000 	ldr.w	r3, [r8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d038      	beq.n	8005846 <_malloc_r+0xf6>
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	42a2      	cmp	r2, r4
 80057d8:	d12b      	bne.n	8005832 <_malloc_r+0xe2>
 80057da:	2200      	movs	r2, #0
 80057dc:	605a      	str	r2, [r3, #4]
 80057de:	e00f      	b.n	8005800 <_malloc_r+0xb0>
 80057e0:	6822      	ldr	r2, [r4, #0]
 80057e2:	1b52      	subs	r2, r2, r5
 80057e4:	d41f      	bmi.n	8005826 <_malloc_r+0xd6>
 80057e6:	2a0b      	cmp	r2, #11
 80057e8:	d917      	bls.n	800581a <_malloc_r+0xca>
 80057ea:	1961      	adds	r1, r4, r5
 80057ec:	42a3      	cmp	r3, r4
 80057ee:	6025      	str	r5, [r4, #0]
 80057f0:	bf18      	it	ne
 80057f2:	6059      	strne	r1, [r3, #4]
 80057f4:	6863      	ldr	r3, [r4, #4]
 80057f6:	bf08      	it	eq
 80057f8:	f8c8 1000 	streq.w	r1, [r8]
 80057fc:	5162      	str	r2, [r4, r5]
 80057fe:	604b      	str	r3, [r1, #4]
 8005800:	4638      	mov	r0, r7
 8005802:	f104 060b 	add.w	r6, r4, #11
 8005806:	f000 f829 	bl	800585c <__malloc_unlock>
 800580a:	f026 0607 	bic.w	r6, r6, #7
 800580e:	1d23      	adds	r3, r4, #4
 8005810:	1af2      	subs	r2, r6, r3
 8005812:	d0ae      	beq.n	8005772 <_malloc_r+0x22>
 8005814:	1b9b      	subs	r3, r3, r6
 8005816:	50a3      	str	r3, [r4, r2]
 8005818:	e7ab      	b.n	8005772 <_malloc_r+0x22>
 800581a:	42a3      	cmp	r3, r4
 800581c:	6862      	ldr	r2, [r4, #4]
 800581e:	d1dd      	bne.n	80057dc <_malloc_r+0x8c>
 8005820:	f8c8 2000 	str.w	r2, [r8]
 8005824:	e7ec      	b.n	8005800 <_malloc_r+0xb0>
 8005826:	4623      	mov	r3, r4
 8005828:	6864      	ldr	r4, [r4, #4]
 800582a:	e7ac      	b.n	8005786 <_malloc_r+0x36>
 800582c:	4634      	mov	r4, r6
 800582e:	6876      	ldr	r6, [r6, #4]
 8005830:	e7b4      	b.n	800579c <_malloc_r+0x4c>
 8005832:	4613      	mov	r3, r2
 8005834:	e7cc      	b.n	80057d0 <_malloc_r+0x80>
 8005836:	230c      	movs	r3, #12
 8005838:	4638      	mov	r0, r7
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	f000 f80e 	bl	800585c <__malloc_unlock>
 8005840:	e797      	b.n	8005772 <_malloc_r+0x22>
 8005842:	6025      	str	r5, [r4, #0]
 8005844:	e7dc      	b.n	8005800 <_malloc_r+0xb0>
 8005846:	605b      	str	r3, [r3, #4]
 8005848:	deff      	udf	#255	; 0xff
 800584a:	bf00      	nop
 800584c:	20000334 	.word	0x20000334

08005850 <__malloc_lock>:
 8005850:	4801      	ldr	r0, [pc, #4]	; (8005858 <__malloc_lock+0x8>)
 8005852:	f7ff bf05 	b.w	8005660 <__retarget_lock_acquire_recursive>
 8005856:	bf00      	nop
 8005858:	20000330 	.word	0x20000330

0800585c <__malloc_unlock>:
 800585c:	4801      	ldr	r0, [pc, #4]	; (8005864 <__malloc_unlock+0x8>)
 800585e:	f7ff bf00 	b.w	8005662 <__retarget_lock_release_recursive>
 8005862:	bf00      	nop
 8005864:	20000330 	.word	0x20000330

08005868 <__ssputs_r>:
 8005868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800586c:	461f      	mov	r7, r3
 800586e:	688e      	ldr	r6, [r1, #8]
 8005870:	4682      	mov	sl, r0
 8005872:	42be      	cmp	r6, r7
 8005874:	460c      	mov	r4, r1
 8005876:	4690      	mov	r8, r2
 8005878:	680b      	ldr	r3, [r1, #0]
 800587a:	d82c      	bhi.n	80058d6 <__ssputs_r+0x6e>
 800587c:	898a      	ldrh	r2, [r1, #12]
 800587e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005882:	d026      	beq.n	80058d2 <__ssputs_r+0x6a>
 8005884:	6965      	ldr	r5, [r4, #20]
 8005886:	6909      	ldr	r1, [r1, #16]
 8005888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800588c:	eba3 0901 	sub.w	r9, r3, r1
 8005890:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005894:	1c7b      	adds	r3, r7, #1
 8005896:	444b      	add	r3, r9
 8005898:	106d      	asrs	r5, r5, #1
 800589a:	429d      	cmp	r5, r3
 800589c:	bf38      	it	cc
 800589e:	461d      	movcc	r5, r3
 80058a0:	0553      	lsls	r3, r2, #21
 80058a2:	d527      	bpl.n	80058f4 <__ssputs_r+0x8c>
 80058a4:	4629      	mov	r1, r5
 80058a6:	f7ff ff53 	bl	8005750 <_malloc_r>
 80058aa:	4606      	mov	r6, r0
 80058ac:	b360      	cbz	r0, 8005908 <__ssputs_r+0xa0>
 80058ae:	464a      	mov	r2, r9
 80058b0:	6921      	ldr	r1, [r4, #16]
 80058b2:	f7ff fed7 	bl	8005664 <memcpy>
 80058b6:	89a3      	ldrh	r3, [r4, #12]
 80058b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c0:	81a3      	strh	r3, [r4, #12]
 80058c2:	6126      	str	r6, [r4, #16]
 80058c4:	444e      	add	r6, r9
 80058c6:	6026      	str	r6, [r4, #0]
 80058c8:	463e      	mov	r6, r7
 80058ca:	6165      	str	r5, [r4, #20]
 80058cc:	eba5 0509 	sub.w	r5, r5, r9
 80058d0:	60a5      	str	r5, [r4, #8]
 80058d2:	42be      	cmp	r6, r7
 80058d4:	d900      	bls.n	80058d8 <__ssputs_r+0x70>
 80058d6:	463e      	mov	r6, r7
 80058d8:	4632      	mov	r2, r6
 80058da:	4641      	mov	r1, r8
 80058dc:	6820      	ldr	r0, [r4, #0]
 80058de:	f000 faaf 	bl	8005e40 <memmove>
 80058e2:	2000      	movs	r0, #0
 80058e4:	68a3      	ldr	r3, [r4, #8]
 80058e6:	1b9b      	subs	r3, r3, r6
 80058e8:	60a3      	str	r3, [r4, #8]
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	4433      	add	r3, r6
 80058ee:	6023      	str	r3, [r4, #0]
 80058f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f4:	462a      	mov	r2, r5
 80058f6:	f000 fadb 	bl	8005eb0 <_realloc_r>
 80058fa:	4606      	mov	r6, r0
 80058fc:	2800      	cmp	r0, #0
 80058fe:	d1e0      	bne.n	80058c2 <__ssputs_r+0x5a>
 8005900:	4650      	mov	r0, sl
 8005902:	6921      	ldr	r1, [r4, #16]
 8005904:	f7ff febc 	bl	8005680 <_free_r>
 8005908:	230c      	movs	r3, #12
 800590a:	f8ca 3000 	str.w	r3, [sl]
 800590e:	89a3      	ldrh	r3, [r4, #12]
 8005910:	f04f 30ff 	mov.w	r0, #4294967295
 8005914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005918:	81a3      	strh	r3, [r4, #12]
 800591a:	e7e9      	b.n	80058f0 <__ssputs_r+0x88>

0800591c <_svfiprintf_r>:
 800591c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005920:	4698      	mov	r8, r3
 8005922:	898b      	ldrh	r3, [r1, #12]
 8005924:	4607      	mov	r7, r0
 8005926:	061b      	lsls	r3, r3, #24
 8005928:	460d      	mov	r5, r1
 800592a:	4614      	mov	r4, r2
 800592c:	b09d      	sub	sp, #116	; 0x74
 800592e:	d50e      	bpl.n	800594e <_svfiprintf_r+0x32>
 8005930:	690b      	ldr	r3, [r1, #16]
 8005932:	b963      	cbnz	r3, 800594e <_svfiprintf_r+0x32>
 8005934:	2140      	movs	r1, #64	; 0x40
 8005936:	f7ff ff0b 	bl	8005750 <_malloc_r>
 800593a:	6028      	str	r0, [r5, #0]
 800593c:	6128      	str	r0, [r5, #16]
 800593e:	b920      	cbnz	r0, 800594a <_svfiprintf_r+0x2e>
 8005940:	230c      	movs	r3, #12
 8005942:	603b      	str	r3, [r7, #0]
 8005944:	f04f 30ff 	mov.w	r0, #4294967295
 8005948:	e0d0      	b.n	8005aec <_svfiprintf_r+0x1d0>
 800594a:	2340      	movs	r3, #64	; 0x40
 800594c:	616b      	str	r3, [r5, #20]
 800594e:	2300      	movs	r3, #0
 8005950:	9309      	str	r3, [sp, #36]	; 0x24
 8005952:	2320      	movs	r3, #32
 8005954:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005958:	2330      	movs	r3, #48	; 0x30
 800595a:	f04f 0901 	mov.w	r9, #1
 800595e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005962:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005b04 <_svfiprintf_r+0x1e8>
 8005966:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800596a:	4623      	mov	r3, r4
 800596c:	469a      	mov	sl, r3
 800596e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005972:	b10a      	cbz	r2, 8005978 <_svfiprintf_r+0x5c>
 8005974:	2a25      	cmp	r2, #37	; 0x25
 8005976:	d1f9      	bne.n	800596c <_svfiprintf_r+0x50>
 8005978:	ebba 0b04 	subs.w	fp, sl, r4
 800597c:	d00b      	beq.n	8005996 <_svfiprintf_r+0x7a>
 800597e:	465b      	mov	r3, fp
 8005980:	4622      	mov	r2, r4
 8005982:	4629      	mov	r1, r5
 8005984:	4638      	mov	r0, r7
 8005986:	f7ff ff6f 	bl	8005868 <__ssputs_r>
 800598a:	3001      	adds	r0, #1
 800598c:	f000 80a9 	beq.w	8005ae2 <_svfiprintf_r+0x1c6>
 8005990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005992:	445a      	add	r2, fp
 8005994:	9209      	str	r2, [sp, #36]	; 0x24
 8005996:	f89a 3000 	ldrb.w	r3, [sl]
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 80a1 	beq.w	8005ae2 <_svfiprintf_r+0x1c6>
 80059a0:	2300      	movs	r3, #0
 80059a2:	f04f 32ff 	mov.w	r2, #4294967295
 80059a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059aa:	f10a 0a01 	add.w	sl, sl, #1
 80059ae:	9304      	str	r3, [sp, #16]
 80059b0:	9307      	str	r3, [sp, #28]
 80059b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059b6:	931a      	str	r3, [sp, #104]	; 0x68
 80059b8:	4654      	mov	r4, sl
 80059ba:	2205      	movs	r2, #5
 80059bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059c0:	4850      	ldr	r0, [pc, #320]	; (8005b04 <_svfiprintf_r+0x1e8>)
 80059c2:	f000 fa67 	bl	8005e94 <memchr>
 80059c6:	9a04      	ldr	r2, [sp, #16]
 80059c8:	b9d8      	cbnz	r0, 8005a02 <_svfiprintf_r+0xe6>
 80059ca:	06d0      	lsls	r0, r2, #27
 80059cc:	bf44      	itt	mi
 80059ce:	2320      	movmi	r3, #32
 80059d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059d4:	0711      	lsls	r1, r2, #28
 80059d6:	bf44      	itt	mi
 80059d8:	232b      	movmi	r3, #43	; 0x2b
 80059da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059de:	f89a 3000 	ldrb.w	r3, [sl]
 80059e2:	2b2a      	cmp	r3, #42	; 0x2a
 80059e4:	d015      	beq.n	8005a12 <_svfiprintf_r+0xf6>
 80059e6:	4654      	mov	r4, sl
 80059e8:	2000      	movs	r0, #0
 80059ea:	f04f 0c0a 	mov.w	ip, #10
 80059ee:	9a07      	ldr	r2, [sp, #28]
 80059f0:	4621      	mov	r1, r4
 80059f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059f6:	3b30      	subs	r3, #48	; 0x30
 80059f8:	2b09      	cmp	r3, #9
 80059fa:	d94d      	bls.n	8005a98 <_svfiprintf_r+0x17c>
 80059fc:	b1b0      	cbz	r0, 8005a2c <_svfiprintf_r+0x110>
 80059fe:	9207      	str	r2, [sp, #28]
 8005a00:	e014      	b.n	8005a2c <_svfiprintf_r+0x110>
 8005a02:	eba0 0308 	sub.w	r3, r0, r8
 8005a06:	fa09 f303 	lsl.w	r3, r9, r3
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	46a2      	mov	sl, r4
 8005a0e:	9304      	str	r3, [sp, #16]
 8005a10:	e7d2      	b.n	80059b8 <_svfiprintf_r+0x9c>
 8005a12:	9b03      	ldr	r3, [sp, #12]
 8005a14:	1d19      	adds	r1, r3, #4
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	9103      	str	r1, [sp, #12]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	bfbb      	ittet	lt
 8005a1e:	425b      	neglt	r3, r3
 8005a20:	f042 0202 	orrlt.w	r2, r2, #2
 8005a24:	9307      	strge	r3, [sp, #28]
 8005a26:	9307      	strlt	r3, [sp, #28]
 8005a28:	bfb8      	it	lt
 8005a2a:	9204      	strlt	r2, [sp, #16]
 8005a2c:	7823      	ldrb	r3, [r4, #0]
 8005a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a30:	d10c      	bne.n	8005a4c <_svfiprintf_r+0x130>
 8005a32:	7863      	ldrb	r3, [r4, #1]
 8005a34:	2b2a      	cmp	r3, #42	; 0x2a
 8005a36:	d134      	bne.n	8005aa2 <_svfiprintf_r+0x186>
 8005a38:	9b03      	ldr	r3, [sp, #12]
 8005a3a:	3402      	adds	r4, #2
 8005a3c:	1d1a      	adds	r2, r3, #4
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	9203      	str	r2, [sp, #12]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	bfb8      	it	lt
 8005a46:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a4a:	9305      	str	r3, [sp, #20]
 8005a4c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005b08 <_svfiprintf_r+0x1ec>
 8005a50:	2203      	movs	r2, #3
 8005a52:	4650      	mov	r0, sl
 8005a54:	7821      	ldrb	r1, [r4, #0]
 8005a56:	f000 fa1d 	bl	8005e94 <memchr>
 8005a5a:	b138      	cbz	r0, 8005a6c <_svfiprintf_r+0x150>
 8005a5c:	2240      	movs	r2, #64	; 0x40
 8005a5e:	9b04      	ldr	r3, [sp, #16]
 8005a60:	eba0 000a 	sub.w	r0, r0, sl
 8005a64:	4082      	lsls	r2, r0
 8005a66:	4313      	orrs	r3, r2
 8005a68:	3401      	adds	r4, #1
 8005a6a:	9304      	str	r3, [sp, #16]
 8005a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a70:	2206      	movs	r2, #6
 8005a72:	4826      	ldr	r0, [pc, #152]	; (8005b0c <_svfiprintf_r+0x1f0>)
 8005a74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a78:	f000 fa0c 	bl	8005e94 <memchr>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d038      	beq.n	8005af2 <_svfiprintf_r+0x1d6>
 8005a80:	4b23      	ldr	r3, [pc, #140]	; (8005b10 <_svfiprintf_r+0x1f4>)
 8005a82:	bb1b      	cbnz	r3, 8005acc <_svfiprintf_r+0x1b0>
 8005a84:	9b03      	ldr	r3, [sp, #12]
 8005a86:	3307      	adds	r3, #7
 8005a88:	f023 0307 	bic.w	r3, r3, #7
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	9303      	str	r3, [sp, #12]
 8005a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a92:	4433      	add	r3, r6
 8005a94:	9309      	str	r3, [sp, #36]	; 0x24
 8005a96:	e768      	b.n	800596a <_svfiprintf_r+0x4e>
 8005a98:	460c      	mov	r4, r1
 8005a9a:	2001      	movs	r0, #1
 8005a9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005aa0:	e7a6      	b.n	80059f0 <_svfiprintf_r+0xd4>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f04f 0c0a 	mov.w	ip, #10
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	3401      	adds	r4, #1
 8005aac:	9305      	str	r3, [sp, #20]
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ab4:	3a30      	subs	r2, #48	; 0x30
 8005ab6:	2a09      	cmp	r2, #9
 8005ab8:	d903      	bls.n	8005ac2 <_svfiprintf_r+0x1a6>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0c6      	beq.n	8005a4c <_svfiprintf_r+0x130>
 8005abe:	9105      	str	r1, [sp, #20]
 8005ac0:	e7c4      	b.n	8005a4c <_svfiprintf_r+0x130>
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005aca:	e7f0      	b.n	8005aae <_svfiprintf_r+0x192>
 8005acc:	ab03      	add	r3, sp, #12
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	462a      	mov	r2, r5
 8005ad2:	4638      	mov	r0, r7
 8005ad4:	4b0f      	ldr	r3, [pc, #60]	; (8005b14 <_svfiprintf_r+0x1f8>)
 8005ad6:	a904      	add	r1, sp, #16
 8005ad8:	f3af 8000 	nop.w
 8005adc:	1c42      	adds	r2, r0, #1
 8005ade:	4606      	mov	r6, r0
 8005ae0:	d1d6      	bne.n	8005a90 <_svfiprintf_r+0x174>
 8005ae2:	89ab      	ldrh	r3, [r5, #12]
 8005ae4:	065b      	lsls	r3, r3, #25
 8005ae6:	f53f af2d 	bmi.w	8005944 <_svfiprintf_r+0x28>
 8005aea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005aec:	b01d      	add	sp, #116	; 0x74
 8005aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af2:	ab03      	add	r3, sp, #12
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	462a      	mov	r2, r5
 8005af8:	4638      	mov	r0, r7
 8005afa:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <_svfiprintf_r+0x1f8>)
 8005afc:	a904      	add	r1, sp, #16
 8005afe:	f000 f87d 	bl	8005bfc <_printf_i>
 8005b02:	e7eb      	b.n	8005adc <_svfiprintf_r+0x1c0>
 8005b04:	080060da 	.word	0x080060da
 8005b08:	080060e0 	.word	0x080060e0
 8005b0c:	080060e4 	.word	0x080060e4
 8005b10:	00000000 	.word	0x00000000
 8005b14:	08005869 	.word	0x08005869

08005b18 <_printf_common>:
 8005b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b1c:	4616      	mov	r6, r2
 8005b1e:	4699      	mov	r9, r3
 8005b20:	688a      	ldr	r2, [r1, #8]
 8005b22:	690b      	ldr	r3, [r1, #16]
 8005b24:	4607      	mov	r7, r0
 8005b26:	4293      	cmp	r3, r2
 8005b28:	bfb8      	it	lt
 8005b2a:	4613      	movlt	r3, r2
 8005b2c:	6033      	str	r3, [r6, #0]
 8005b2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b32:	460c      	mov	r4, r1
 8005b34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b38:	b10a      	cbz	r2, 8005b3e <_printf_common+0x26>
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	6033      	str	r3, [r6, #0]
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	0699      	lsls	r1, r3, #26
 8005b42:	bf42      	ittt	mi
 8005b44:	6833      	ldrmi	r3, [r6, #0]
 8005b46:	3302      	addmi	r3, #2
 8005b48:	6033      	strmi	r3, [r6, #0]
 8005b4a:	6825      	ldr	r5, [r4, #0]
 8005b4c:	f015 0506 	ands.w	r5, r5, #6
 8005b50:	d106      	bne.n	8005b60 <_printf_common+0x48>
 8005b52:	f104 0a19 	add.w	sl, r4, #25
 8005b56:	68e3      	ldr	r3, [r4, #12]
 8005b58:	6832      	ldr	r2, [r6, #0]
 8005b5a:	1a9b      	subs	r3, r3, r2
 8005b5c:	42ab      	cmp	r3, r5
 8005b5e:	dc2b      	bgt.n	8005bb8 <_printf_common+0xa0>
 8005b60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b64:	1e13      	subs	r3, r2, #0
 8005b66:	6822      	ldr	r2, [r4, #0]
 8005b68:	bf18      	it	ne
 8005b6a:	2301      	movne	r3, #1
 8005b6c:	0692      	lsls	r2, r2, #26
 8005b6e:	d430      	bmi.n	8005bd2 <_printf_common+0xba>
 8005b70:	4649      	mov	r1, r9
 8005b72:	4638      	mov	r0, r7
 8005b74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b78:	47c0      	blx	r8
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	d023      	beq.n	8005bc6 <_printf_common+0xae>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	6922      	ldr	r2, [r4, #16]
 8005b82:	f003 0306 	and.w	r3, r3, #6
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	bf14      	ite	ne
 8005b8a:	2500      	movne	r5, #0
 8005b8c:	6833      	ldreq	r3, [r6, #0]
 8005b8e:	f04f 0600 	mov.w	r6, #0
 8005b92:	bf08      	it	eq
 8005b94:	68e5      	ldreq	r5, [r4, #12]
 8005b96:	f104 041a 	add.w	r4, r4, #26
 8005b9a:	bf08      	it	eq
 8005b9c:	1aed      	subeq	r5, r5, r3
 8005b9e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005ba2:	bf08      	it	eq
 8005ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	bfc4      	itt	gt
 8005bac:	1a9b      	subgt	r3, r3, r2
 8005bae:	18ed      	addgt	r5, r5, r3
 8005bb0:	42b5      	cmp	r5, r6
 8005bb2:	d11a      	bne.n	8005bea <_printf_common+0xd2>
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	e008      	b.n	8005bca <_printf_common+0xb2>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	4652      	mov	r2, sl
 8005bbc:	4649      	mov	r1, r9
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	47c0      	blx	r8
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	d103      	bne.n	8005bce <_printf_common+0xb6>
 8005bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8005bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bce:	3501      	adds	r5, #1
 8005bd0:	e7c1      	b.n	8005b56 <_printf_common+0x3e>
 8005bd2:	2030      	movs	r0, #48	; 0x30
 8005bd4:	18e1      	adds	r1, r4, r3
 8005bd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005be0:	4422      	add	r2, r4
 8005be2:	3302      	adds	r3, #2
 8005be4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005be8:	e7c2      	b.n	8005b70 <_printf_common+0x58>
 8005bea:	2301      	movs	r3, #1
 8005bec:	4622      	mov	r2, r4
 8005bee:	4649      	mov	r1, r9
 8005bf0:	4638      	mov	r0, r7
 8005bf2:	47c0      	blx	r8
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d0e6      	beq.n	8005bc6 <_printf_common+0xae>
 8005bf8:	3601      	adds	r6, #1
 8005bfa:	e7d9      	b.n	8005bb0 <_printf_common+0x98>

08005bfc <_printf_i>:
 8005bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c00:	7e0f      	ldrb	r7, [r1, #24]
 8005c02:	4691      	mov	r9, r2
 8005c04:	2f78      	cmp	r7, #120	; 0x78
 8005c06:	4680      	mov	r8, r0
 8005c08:	460c      	mov	r4, r1
 8005c0a:	469a      	mov	sl, r3
 8005c0c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c12:	d807      	bhi.n	8005c24 <_printf_i+0x28>
 8005c14:	2f62      	cmp	r7, #98	; 0x62
 8005c16:	d80a      	bhi.n	8005c2e <_printf_i+0x32>
 8005c18:	2f00      	cmp	r7, #0
 8005c1a:	f000 80d5 	beq.w	8005dc8 <_printf_i+0x1cc>
 8005c1e:	2f58      	cmp	r7, #88	; 0x58
 8005c20:	f000 80c1 	beq.w	8005da6 <_printf_i+0x1aa>
 8005c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c2c:	e03a      	b.n	8005ca4 <_printf_i+0xa8>
 8005c2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c32:	2b15      	cmp	r3, #21
 8005c34:	d8f6      	bhi.n	8005c24 <_printf_i+0x28>
 8005c36:	a101      	add	r1, pc, #4	; (adr r1, 8005c3c <_printf_i+0x40>)
 8005c38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c3c:	08005c95 	.word	0x08005c95
 8005c40:	08005ca9 	.word	0x08005ca9
 8005c44:	08005c25 	.word	0x08005c25
 8005c48:	08005c25 	.word	0x08005c25
 8005c4c:	08005c25 	.word	0x08005c25
 8005c50:	08005c25 	.word	0x08005c25
 8005c54:	08005ca9 	.word	0x08005ca9
 8005c58:	08005c25 	.word	0x08005c25
 8005c5c:	08005c25 	.word	0x08005c25
 8005c60:	08005c25 	.word	0x08005c25
 8005c64:	08005c25 	.word	0x08005c25
 8005c68:	08005daf 	.word	0x08005daf
 8005c6c:	08005cd5 	.word	0x08005cd5
 8005c70:	08005d69 	.word	0x08005d69
 8005c74:	08005c25 	.word	0x08005c25
 8005c78:	08005c25 	.word	0x08005c25
 8005c7c:	08005dd1 	.word	0x08005dd1
 8005c80:	08005c25 	.word	0x08005c25
 8005c84:	08005cd5 	.word	0x08005cd5
 8005c88:	08005c25 	.word	0x08005c25
 8005c8c:	08005c25 	.word	0x08005c25
 8005c90:	08005d71 	.word	0x08005d71
 8005c94:	682b      	ldr	r3, [r5, #0]
 8005c96:	1d1a      	adds	r2, r3, #4
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	602a      	str	r2, [r5, #0]
 8005c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e0a0      	b.n	8005dea <_printf_i+0x1ee>
 8005ca8:	6820      	ldr	r0, [r4, #0]
 8005caa:	682b      	ldr	r3, [r5, #0]
 8005cac:	0607      	lsls	r7, r0, #24
 8005cae:	f103 0104 	add.w	r1, r3, #4
 8005cb2:	6029      	str	r1, [r5, #0]
 8005cb4:	d501      	bpl.n	8005cba <_printf_i+0xbe>
 8005cb6:	681e      	ldr	r6, [r3, #0]
 8005cb8:	e003      	b.n	8005cc2 <_printf_i+0xc6>
 8005cba:	0646      	lsls	r6, r0, #25
 8005cbc:	d5fb      	bpl.n	8005cb6 <_printf_i+0xba>
 8005cbe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005cc2:	2e00      	cmp	r6, #0
 8005cc4:	da03      	bge.n	8005cce <_printf_i+0xd2>
 8005cc6:	232d      	movs	r3, #45	; 0x2d
 8005cc8:	4276      	negs	r6, r6
 8005cca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cce:	230a      	movs	r3, #10
 8005cd0:	4859      	ldr	r0, [pc, #356]	; (8005e38 <_printf_i+0x23c>)
 8005cd2:	e012      	b.n	8005cfa <_printf_i+0xfe>
 8005cd4:	682b      	ldr	r3, [r5, #0]
 8005cd6:	6820      	ldr	r0, [r4, #0]
 8005cd8:	1d19      	adds	r1, r3, #4
 8005cda:	6029      	str	r1, [r5, #0]
 8005cdc:	0605      	lsls	r5, r0, #24
 8005cde:	d501      	bpl.n	8005ce4 <_printf_i+0xe8>
 8005ce0:	681e      	ldr	r6, [r3, #0]
 8005ce2:	e002      	b.n	8005cea <_printf_i+0xee>
 8005ce4:	0641      	lsls	r1, r0, #25
 8005ce6:	d5fb      	bpl.n	8005ce0 <_printf_i+0xe4>
 8005ce8:	881e      	ldrh	r6, [r3, #0]
 8005cea:	2f6f      	cmp	r7, #111	; 0x6f
 8005cec:	bf0c      	ite	eq
 8005cee:	2308      	moveq	r3, #8
 8005cf0:	230a      	movne	r3, #10
 8005cf2:	4851      	ldr	r0, [pc, #324]	; (8005e38 <_printf_i+0x23c>)
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cfa:	6865      	ldr	r5, [r4, #4]
 8005cfc:	2d00      	cmp	r5, #0
 8005cfe:	bfa8      	it	ge
 8005d00:	6821      	ldrge	r1, [r4, #0]
 8005d02:	60a5      	str	r5, [r4, #8]
 8005d04:	bfa4      	itt	ge
 8005d06:	f021 0104 	bicge.w	r1, r1, #4
 8005d0a:	6021      	strge	r1, [r4, #0]
 8005d0c:	b90e      	cbnz	r6, 8005d12 <_printf_i+0x116>
 8005d0e:	2d00      	cmp	r5, #0
 8005d10:	d04b      	beq.n	8005daa <_printf_i+0x1ae>
 8005d12:	4615      	mov	r5, r2
 8005d14:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d18:	fb03 6711 	mls	r7, r3, r1, r6
 8005d1c:	5dc7      	ldrb	r7, [r0, r7]
 8005d1e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d22:	4637      	mov	r7, r6
 8005d24:	42bb      	cmp	r3, r7
 8005d26:	460e      	mov	r6, r1
 8005d28:	d9f4      	bls.n	8005d14 <_printf_i+0x118>
 8005d2a:	2b08      	cmp	r3, #8
 8005d2c:	d10b      	bne.n	8005d46 <_printf_i+0x14a>
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	07de      	lsls	r6, r3, #31
 8005d32:	d508      	bpl.n	8005d46 <_printf_i+0x14a>
 8005d34:	6923      	ldr	r3, [r4, #16]
 8005d36:	6861      	ldr	r1, [r4, #4]
 8005d38:	4299      	cmp	r1, r3
 8005d3a:	bfde      	ittt	le
 8005d3c:	2330      	movle	r3, #48	; 0x30
 8005d3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d46:	1b52      	subs	r2, r2, r5
 8005d48:	6122      	str	r2, [r4, #16]
 8005d4a:	464b      	mov	r3, r9
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	4640      	mov	r0, r8
 8005d50:	f8cd a000 	str.w	sl, [sp]
 8005d54:	aa03      	add	r2, sp, #12
 8005d56:	f7ff fedf 	bl	8005b18 <_printf_common>
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	d14a      	bne.n	8005df4 <_printf_i+0x1f8>
 8005d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d62:	b004      	add	sp, #16
 8005d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	f043 0320 	orr.w	r3, r3, #32
 8005d6e:	6023      	str	r3, [r4, #0]
 8005d70:	2778      	movs	r7, #120	; 0x78
 8005d72:	4832      	ldr	r0, [pc, #200]	; (8005e3c <_printf_i+0x240>)
 8005d74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	6829      	ldr	r1, [r5, #0]
 8005d7c:	061f      	lsls	r7, r3, #24
 8005d7e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d82:	d402      	bmi.n	8005d8a <_printf_i+0x18e>
 8005d84:	065f      	lsls	r7, r3, #25
 8005d86:	bf48      	it	mi
 8005d88:	b2b6      	uxthmi	r6, r6
 8005d8a:	07df      	lsls	r7, r3, #31
 8005d8c:	bf48      	it	mi
 8005d8e:	f043 0320 	orrmi.w	r3, r3, #32
 8005d92:	6029      	str	r1, [r5, #0]
 8005d94:	bf48      	it	mi
 8005d96:	6023      	strmi	r3, [r4, #0]
 8005d98:	b91e      	cbnz	r6, 8005da2 <_printf_i+0x1a6>
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	f023 0320 	bic.w	r3, r3, #32
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	2310      	movs	r3, #16
 8005da4:	e7a6      	b.n	8005cf4 <_printf_i+0xf8>
 8005da6:	4824      	ldr	r0, [pc, #144]	; (8005e38 <_printf_i+0x23c>)
 8005da8:	e7e4      	b.n	8005d74 <_printf_i+0x178>
 8005daa:	4615      	mov	r5, r2
 8005dac:	e7bd      	b.n	8005d2a <_printf_i+0x12e>
 8005dae:	682b      	ldr	r3, [r5, #0]
 8005db0:	6826      	ldr	r6, [r4, #0]
 8005db2:	1d18      	adds	r0, r3, #4
 8005db4:	6961      	ldr	r1, [r4, #20]
 8005db6:	6028      	str	r0, [r5, #0]
 8005db8:	0635      	lsls	r5, r6, #24
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	d501      	bpl.n	8005dc2 <_printf_i+0x1c6>
 8005dbe:	6019      	str	r1, [r3, #0]
 8005dc0:	e002      	b.n	8005dc8 <_printf_i+0x1cc>
 8005dc2:	0670      	lsls	r0, r6, #25
 8005dc4:	d5fb      	bpl.n	8005dbe <_printf_i+0x1c2>
 8005dc6:	8019      	strh	r1, [r3, #0]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	4615      	mov	r5, r2
 8005dcc:	6123      	str	r3, [r4, #16]
 8005dce:	e7bc      	b.n	8005d4a <_printf_i+0x14e>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	1d1a      	adds	r2, r3, #4
 8005dd6:	602a      	str	r2, [r5, #0]
 8005dd8:	681d      	ldr	r5, [r3, #0]
 8005dda:	6862      	ldr	r2, [r4, #4]
 8005ddc:	4628      	mov	r0, r5
 8005dde:	f000 f859 	bl	8005e94 <memchr>
 8005de2:	b108      	cbz	r0, 8005de8 <_printf_i+0x1ec>
 8005de4:	1b40      	subs	r0, r0, r5
 8005de6:	6060      	str	r0, [r4, #4]
 8005de8:	6863      	ldr	r3, [r4, #4]
 8005dea:	6123      	str	r3, [r4, #16]
 8005dec:	2300      	movs	r3, #0
 8005dee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005df2:	e7aa      	b.n	8005d4a <_printf_i+0x14e>
 8005df4:	462a      	mov	r2, r5
 8005df6:	4649      	mov	r1, r9
 8005df8:	4640      	mov	r0, r8
 8005dfa:	6923      	ldr	r3, [r4, #16]
 8005dfc:	47d0      	blx	sl
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d0ad      	beq.n	8005d5e <_printf_i+0x162>
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	079b      	lsls	r3, r3, #30
 8005e06:	d413      	bmi.n	8005e30 <_printf_i+0x234>
 8005e08:	68e0      	ldr	r0, [r4, #12]
 8005e0a:	9b03      	ldr	r3, [sp, #12]
 8005e0c:	4298      	cmp	r0, r3
 8005e0e:	bfb8      	it	lt
 8005e10:	4618      	movlt	r0, r3
 8005e12:	e7a6      	b.n	8005d62 <_printf_i+0x166>
 8005e14:	2301      	movs	r3, #1
 8005e16:	4632      	mov	r2, r6
 8005e18:	4649      	mov	r1, r9
 8005e1a:	4640      	mov	r0, r8
 8005e1c:	47d0      	blx	sl
 8005e1e:	3001      	adds	r0, #1
 8005e20:	d09d      	beq.n	8005d5e <_printf_i+0x162>
 8005e22:	3501      	adds	r5, #1
 8005e24:	68e3      	ldr	r3, [r4, #12]
 8005e26:	9903      	ldr	r1, [sp, #12]
 8005e28:	1a5b      	subs	r3, r3, r1
 8005e2a:	42ab      	cmp	r3, r5
 8005e2c:	dcf2      	bgt.n	8005e14 <_printf_i+0x218>
 8005e2e:	e7eb      	b.n	8005e08 <_printf_i+0x20c>
 8005e30:	2500      	movs	r5, #0
 8005e32:	f104 0619 	add.w	r6, r4, #25
 8005e36:	e7f5      	b.n	8005e24 <_printf_i+0x228>
 8005e38:	080060eb 	.word	0x080060eb
 8005e3c:	080060fc 	.word	0x080060fc

08005e40 <memmove>:
 8005e40:	4288      	cmp	r0, r1
 8005e42:	b510      	push	{r4, lr}
 8005e44:	eb01 0402 	add.w	r4, r1, r2
 8005e48:	d902      	bls.n	8005e50 <memmove+0x10>
 8005e4a:	4284      	cmp	r4, r0
 8005e4c:	4623      	mov	r3, r4
 8005e4e:	d807      	bhi.n	8005e60 <memmove+0x20>
 8005e50:	1e43      	subs	r3, r0, #1
 8005e52:	42a1      	cmp	r1, r4
 8005e54:	d008      	beq.n	8005e68 <memmove+0x28>
 8005e56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e5e:	e7f8      	b.n	8005e52 <memmove+0x12>
 8005e60:	4601      	mov	r1, r0
 8005e62:	4402      	add	r2, r0
 8005e64:	428a      	cmp	r2, r1
 8005e66:	d100      	bne.n	8005e6a <memmove+0x2a>
 8005e68:	bd10      	pop	{r4, pc}
 8005e6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e72:	e7f7      	b.n	8005e64 <memmove+0x24>

08005e74 <_sbrk_r>:
 8005e74:	b538      	push	{r3, r4, r5, lr}
 8005e76:	2300      	movs	r3, #0
 8005e78:	4d05      	ldr	r5, [pc, #20]	; (8005e90 <_sbrk_r+0x1c>)
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	4608      	mov	r0, r1
 8005e7e:	602b      	str	r3, [r5, #0]
 8005e80:	f7fc fb34 	bl	80024ec <_sbrk>
 8005e84:	1c43      	adds	r3, r0, #1
 8005e86:	d102      	bne.n	8005e8e <_sbrk_r+0x1a>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	b103      	cbz	r3, 8005e8e <_sbrk_r+0x1a>
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	bd38      	pop	{r3, r4, r5, pc}
 8005e90:	2000032c 	.word	0x2000032c

08005e94 <memchr>:
 8005e94:	4603      	mov	r3, r0
 8005e96:	b510      	push	{r4, lr}
 8005e98:	b2c9      	uxtb	r1, r1
 8005e9a:	4402      	add	r2, r0
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	d101      	bne.n	8005ea6 <memchr+0x12>
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	e003      	b.n	8005eae <memchr+0x1a>
 8005ea6:	7804      	ldrb	r4, [r0, #0]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	428c      	cmp	r4, r1
 8005eac:	d1f6      	bne.n	8005e9c <memchr+0x8>
 8005eae:	bd10      	pop	{r4, pc}

08005eb0 <_realloc_r>:
 8005eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb4:	4680      	mov	r8, r0
 8005eb6:	4614      	mov	r4, r2
 8005eb8:	460e      	mov	r6, r1
 8005eba:	b921      	cbnz	r1, 8005ec6 <_realloc_r+0x16>
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec2:	f7ff bc45 	b.w	8005750 <_malloc_r>
 8005ec6:	b92a      	cbnz	r2, 8005ed4 <_realloc_r+0x24>
 8005ec8:	f7ff fbda 	bl	8005680 <_free_r>
 8005ecc:	4625      	mov	r5, r4
 8005ece:	4628      	mov	r0, r5
 8005ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ed4:	f000 f81b 	bl	8005f0e <_malloc_usable_size_r>
 8005ed8:	4284      	cmp	r4, r0
 8005eda:	4607      	mov	r7, r0
 8005edc:	d802      	bhi.n	8005ee4 <_realloc_r+0x34>
 8005ede:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ee2:	d812      	bhi.n	8005f0a <_realloc_r+0x5a>
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	4640      	mov	r0, r8
 8005ee8:	f7ff fc32 	bl	8005750 <_malloc_r>
 8005eec:	4605      	mov	r5, r0
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	d0ed      	beq.n	8005ece <_realloc_r+0x1e>
 8005ef2:	42bc      	cmp	r4, r7
 8005ef4:	4622      	mov	r2, r4
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	bf28      	it	cs
 8005efa:	463a      	movcs	r2, r7
 8005efc:	f7ff fbb2 	bl	8005664 <memcpy>
 8005f00:	4631      	mov	r1, r6
 8005f02:	4640      	mov	r0, r8
 8005f04:	f7ff fbbc 	bl	8005680 <_free_r>
 8005f08:	e7e1      	b.n	8005ece <_realloc_r+0x1e>
 8005f0a:	4635      	mov	r5, r6
 8005f0c:	e7df      	b.n	8005ece <_realloc_r+0x1e>

08005f0e <_malloc_usable_size_r>:
 8005f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f12:	1f18      	subs	r0, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bfbc      	itt	lt
 8005f18:	580b      	ldrlt	r3, [r1, r0]
 8005f1a:	18c0      	addlt	r0, r0, r3
 8005f1c:	4770      	bx	lr
	...

08005f20 <_init>:
 8005f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f22:	bf00      	nop
 8005f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f26:	bc08      	pop	{r3}
 8005f28:	469e      	mov	lr, r3
 8005f2a:	4770      	bx	lr

08005f2c <_fini>:
 8005f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2e:	bf00      	nop
 8005f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f32:	bc08      	pop	{r3}
 8005f34:	469e      	mov	lr, r3
 8005f36:	4770      	bx	lr
